
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

#define YYLIP  (& thd->m_parser_state->m_lip)
#define YYPS   (& thd->m_parser_state->m_yacc)
#define YYCSCL (thd->variables.character_set_client)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(current_thd, (char*) (A));      \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label(current_thd, EMPTY_STR, lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label(current_thd, EMPTY_STR, 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->default_value)
    it= spv->default_value;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  thd         The current thread.
  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal*
create_item_for_sp_var(THD *thd, LEX_STRING name, sp_variable *spvar,
                       const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  LEX *lex= thd->lex;
  uint pos_in_q, len_in_q;
  sp_pcontext *spc = lex->spcont;

  /* If necessary, look for the variable. */
  if (spc && !spvar)
    spvar= spc->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spc && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= start_in_q - lex->sphead->m_tmp_query;
  len_in_q= end_in_q - start_in_q;

  item= new (thd->mem_root)
    Item_splocal(name, spvar->offset, spvar->type, pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list, lex->check_exists);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->one_shot_set= 0;
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    DBUG_ASSERT(no_lookahead);
    lex->sphead->m_tmp_query= lip->get_ptr();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                 lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}




/* Line 189 of yacc.c  */
#line 948 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADMIN_SYM = 262,
     ADDDATE_SYM = 263,
     AFTER_SYM = 264,
     AGAINST = 265,
     AGGREGATE_SYM = 266,
     ALGORITHM_SYM = 267,
     ALL = 268,
     ALTER = 269,
     ALWAYS_SYM = 270,
     ANALYZE_SYM = 271,
     AND_AND_SYM = 272,
     AND_SYM = 273,
     ANY_SYM = 274,
     AS = 275,
     ASC = 276,
     ASCII_SYM = 277,
     ASENSITIVE_SYM = 278,
     AT_SYM = 279,
     AUTHORS_SYM = 280,
     AUTOEXTEND_SIZE_SYM = 281,
     AUTO_INC = 282,
     AUTO_SYM = 283,
     AVG_ROW_LENGTH = 284,
     AVG_SYM = 285,
     BACKUP_SYM = 286,
     BEFORE_SYM = 287,
     BEGIN_SYM = 288,
     BETWEEN_SYM = 289,
     BIGINT = 290,
     BINARY = 291,
     BINLOG_SYM = 292,
     BIN_NUM = 293,
     BIT_AND = 294,
     BIT_OR = 295,
     BIT_SYM = 296,
     BIT_XOR = 297,
     BLOB_SYM = 298,
     BLOCK_SYM = 299,
     BOOLEAN_SYM = 300,
     BOOL_SYM = 301,
     BOTH = 302,
     BTREE_SYM = 303,
     BY = 304,
     BYTE_SYM = 305,
     CACHE_SYM = 306,
     CALL_SYM = 307,
     CASCADE = 308,
     CASCADED = 309,
     CASE_SYM = 310,
     CAST_SYM = 311,
     CATALOG_NAME_SYM = 312,
     CHAIN_SYM = 313,
     CHANGE = 314,
     CHANGED = 315,
     CHARSET = 316,
     CHAR_SYM = 317,
     CHECKPOINT_SYM = 318,
     CHECKSUM_SYM = 319,
     CHECK_SYM = 320,
     CIPHER_SYM = 321,
     CLASS_ORIGIN_SYM = 322,
     CLIENT_SYM = 323,
     CLIENT_STATS_SYM = 324,
     CLOSE_SYM = 325,
     COALESCE = 326,
     CODE_SYM = 327,
     COLLATE_SYM = 328,
     COLLATION_SYM = 329,
     COLUMNS = 330,
     COLUMN_ADD_SYM = 331,
     COLUMN_CHECK_SYM = 332,
     COLUMN_CREATE_SYM = 333,
     COLUMN_DELETE_SYM = 334,
     COLUMN_GET_SYM = 335,
     COLUMN_SYM = 336,
     COLUMN_NAME_SYM = 337,
     COMMENT_SYM = 338,
     COMMITTED_SYM = 339,
     COMMIT_SYM = 340,
     COMPACT_SYM = 341,
     COMPLETION_SYM = 342,
     COMPRESSED_SYM = 343,
     CONCURRENT = 344,
     CONDITION_SYM = 345,
     CONNECTION_SYM = 346,
     CONSISTENT_SYM = 347,
     CONSTRAINT = 348,
     CONSTRAINT_CATALOG_SYM = 349,
     CONSTRAINT_NAME_SYM = 350,
     CONSTRAINT_SCHEMA_SYM = 351,
     CONTAINS_SYM = 352,
     CONTEXT_SYM = 353,
     CONTINUE_SYM = 354,
     CONTRIBUTORS_SYM = 355,
     CONVERT_SYM = 356,
     COUNT_SYM = 357,
     CPU_SYM = 358,
     CREATE = 359,
     CROSS = 360,
     CUBE_SYM = 361,
     CURDATE = 362,
     CURRENT_SYM = 363,
     CURRENT_USER = 364,
     CURRENT_ROLE = 365,
     CURRENT_POS_SYM = 366,
     CURSOR_SYM = 367,
     CURSOR_NAME_SYM = 368,
     CURTIME = 369,
     DATABASE = 370,
     DATABASES = 371,
     DATAFILE_SYM = 372,
     DATA_SYM = 373,
     DATETIME = 374,
     DATE_ADD_INTERVAL = 375,
     DATE_SUB_INTERVAL = 376,
     DATE_SYM = 377,
     DAY_HOUR_SYM = 378,
     DAY_MICROSECOND_SYM = 379,
     DAY_MINUTE_SYM = 380,
     DAY_SECOND_SYM = 381,
     DAY_SYM = 382,
     DEALLOCATE_SYM = 383,
     DECIMAL_NUM = 384,
     DECIMAL_SYM = 385,
     DECLARE_SYM = 386,
     DEFAULT = 387,
     DEFINER_SYM = 388,
     DELAYED_SYM = 389,
     DELAY_KEY_WRITE_SYM = 390,
     DELETE_SYM = 391,
     DESC = 392,
     DESCRIBE = 393,
     DES_KEY_FILE = 394,
     DETERMINISTIC_SYM = 395,
     DIAGNOSTICS_SYM = 396,
     DIRECTORY_SYM = 397,
     DISABLE_SYM = 398,
     DISCARD = 399,
     DISK_SYM = 400,
     DISTINCT = 401,
     DIV_SYM = 402,
     DOUBLE_SYM = 403,
     DO_SYM = 404,
     DROP = 405,
     DUAL_SYM = 406,
     DUMPFILE = 407,
     DUPLICATE_SYM = 408,
     DYNAMIC_SYM = 409,
     EACH_SYM = 410,
     ELSE = 411,
     ELSEIF_SYM = 412,
     ENABLE_SYM = 413,
     ENCLOSED = 414,
     END = 415,
     ENDS_SYM = 416,
     END_OF_INPUT = 417,
     ENGINES_SYM = 418,
     ENGINE_SYM = 419,
     ENUM = 420,
     EQ = 421,
     EQUAL_SYM = 422,
     ERROR_SYM = 423,
     ERRORS = 424,
     ESCAPED = 425,
     ESCAPE_SYM = 426,
     EVENTS_SYM = 427,
     EVENT_SYM = 428,
     EVERY_SYM = 429,
     EXCHANGE_SYM = 430,
     EXAMINED_SYM = 431,
     EXECUTE_SYM = 432,
     EXISTS = 433,
     EXIT_SYM = 434,
     EXPANSION_SYM = 435,
     EXTENDED_SYM = 436,
     EXTENT_SIZE_SYM = 437,
     EXTRACT_SYM = 438,
     FALSE_SYM = 439,
     FAST_SYM = 440,
     FAULTS_SYM = 441,
     FETCH_SYM = 442,
     FILE_SYM = 443,
     FIRST_SYM = 444,
     FIXED_SYM = 445,
     FLOAT_NUM = 446,
     FLOAT_SYM = 447,
     FLUSH_SYM = 448,
     FORCE_SYM = 449,
     FOREIGN = 450,
     FOR_SYM = 451,
     FOUND_SYM = 452,
     FROM = 453,
     FULL = 454,
     FULLTEXT_SYM = 455,
     FUNCTION_SYM = 456,
     GE = 457,
     GENERAL = 458,
     GENERATED_SYM = 459,
     GEOMETRYCOLLECTION = 460,
     GEOMETRY_SYM = 461,
     GET_FORMAT = 462,
     GET_SYM = 463,
     GLOBAL_SYM = 464,
     GRANT = 465,
     GRANTS = 466,
     GROUP_SYM = 467,
     GROUP_CONCAT_SYM = 468,
     GT_SYM = 469,
     HANDLER_SYM = 470,
     HARD_SYM = 471,
     HASH_SYM = 472,
     HAVING = 473,
     HELP_SYM = 474,
     HEX_NUM = 475,
     HEX_STRING = 476,
     HIGH_PRIORITY = 477,
     HOST_SYM = 478,
     HOSTS_SYM = 479,
     HOUR_MICROSECOND_SYM = 480,
     HOUR_MINUTE_SYM = 481,
     HOUR_SECOND_SYM = 482,
     HOUR_SYM = 483,
     ID_SYM = 484,
     IDENT = 485,
     IDENTIFIED_SYM = 486,
     IDENT_QUOTED = 487,
     IF = 488,
     IGNORE_SYM = 489,
     IGNORE_SERVER_IDS_SYM = 490,
     IMPORT = 491,
     INDEXES = 492,
     INDEX_SYM = 493,
     INDEX_STATS_SYM = 494,
     INFILE = 495,
     INITIAL_SIZE_SYM = 496,
     INNER_SYM = 497,
     INOUT_SYM = 498,
     INSENSITIVE_SYM = 499,
     INSERT = 500,
     INSERT_METHOD = 501,
     INSTALL_SYM = 502,
     INTERVAL_SYM = 503,
     INTO = 504,
     INT_SYM = 505,
     INVOKER_SYM = 506,
     IN_SYM = 507,
     IO_SYM = 508,
     IPC_SYM = 509,
     IS = 510,
     ISOLATION = 511,
     ISSUER_SYM = 512,
     ITERATE_SYM = 513,
     JOIN_SYM = 514,
     KEYS = 515,
     KEY_BLOCK_SIZE = 516,
     KEY_SYM = 517,
     KILL_SYM = 518,
     LANGUAGE_SYM = 519,
     LAST_SYM = 520,
     LAST_VALUE = 521,
     LE = 522,
     LEADING = 523,
     LEAVES = 524,
     LEAVE_SYM = 525,
     LEFT = 526,
     LESS_SYM = 527,
     LEVEL_SYM = 528,
     LEX_HOSTNAME = 529,
     LIKE = 530,
     LIMIT = 531,
     LINEAR_SYM = 532,
     LINES = 533,
     LINESTRING = 534,
     LIST_SYM = 535,
     LOAD = 536,
     LOCAL_SYM = 537,
     LOCATOR_SYM = 538,
     LOCKS_SYM = 539,
     LOCK_SYM = 540,
     LOGFILE_SYM = 541,
     LOGS_SYM = 542,
     LONGBLOB = 543,
     LONGTEXT = 544,
     LONG_NUM = 545,
     LONG_SYM = 546,
     LOOP_SYM = 547,
     LOW_PRIORITY = 548,
     LT = 549,
     MASTER_CONNECT_RETRY_SYM = 550,
     MASTER_GTID_POS_SYM = 551,
     MASTER_HOST_SYM = 552,
     MASTER_LOG_FILE_SYM = 553,
     MASTER_LOG_POS_SYM = 554,
     MASTER_PASSWORD_SYM = 555,
     MASTER_PORT_SYM = 556,
     MASTER_SERVER_ID_SYM = 557,
     MASTER_SSL_CAPATH_SYM = 558,
     MASTER_SSL_CA_SYM = 559,
     MASTER_SSL_CERT_SYM = 560,
     MASTER_SSL_CIPHER_SYM = 561,
     MASTER_SSL_CRL_SYM = 562,
     MASTER_SSL_CRLPATH_SYM = 563,
     MASTER_SSL_KEY_SYM = 564,
     MASTER_SSL_SYM = 565,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 566,
     MASTER_SYM = 567,
     MASTER_USER_SYM = 568,
     MASTER_USE_GTID_SYM = 569,
     MASTER_HEARTBEAT_PERIOD_SYM = 570,
     MATCH = 571,
     MAX_CONNECTIONS_PER_HOUR = 572,
     MAX_QUERIES_PER_HOUR = 573,
     MAX_ROWS = 574,
     MAX_SIZE_SYM = 575,
     MAX_SYM = 576,
     MAX_UPDATES_PER_HOUR = 577,
     MAX_USER_CONNECTIONS_SYM = 578,
     MAX_VALUE_SYM = 579,
     MEDIUMBLOB = 580,
     MEDIUMINT = 581,
     MEDIUMTEXT = 582,
     MEDIUM_SYM = 583,
     MEMORY_SYM = 584,
     MERGE_SYM = 585,
     MESSAGE_TEXT_SYM = 586,
     MICROSECOND_SYM = 587,
     MIGRATE_SYM = 588,
     MINUTE_MICROSECOND_SYM = 589,
     MINUTE_SECOND_SYM = 590,
     MINUTE_SYM = 591,
     MIN_ROWS = 592,
     MIN_SYM = 593,
     MODE_SYM = 594,
     MODIFIES_SYM = 595,
     MODIFY_SYM = 596,
     MOD_SYM = 597,
     MONTH_SYM = 598,
     MULTILINESTRING = 599,
     MULTIPOINT = 600,
     MULTIPOLYGON = 601,
     MUTEX_SYM = 602,
     MYSQL_ERRNO_SYM = 603,
     NAMES_SYM = 604,
     NAME_SYM = 605,
     NATIONAL_SYM = 606,
     NATURAL = 607,
     NCHAR_STRING = 608,
     NCHAR_SYM = 609,
     NDBCLUSTER_SYM = 610,
     NE = 611,
     NEG = 612,
     NEW_SYM = 613,
     NEXT_SYM = 614,
     NODEGROUP_SYM = 615,
     NONE_SYM = 616,
     NOT2_SYM = 617,
     NOT_SYM = 618,
     NOW_SYM = 619,
     NO_SYM = 620,
     NO_WAIT_SYM = 621,
     NO_WRITE_TO_BINLOG = 622,
     NULL_SYM = 623,
     NUM = 624,
     NUMBER_SYM = 625,
     NUMERIC_SYM = 626,
     NVARCHAR_SYM = 627,
     OFFSET_SYM = 628,
     OLD_PASSWORD = 629,
     ON = 630,
     ONE_SYM = 631,
     ONLY_SYM = 632,
     ONLINE_SYM = 633,
     OPEN_SYM = 634,
     OPTIMIZE = 635,
     OPTIONS_SYM = 636,
     OPTION = 637,
     OPTIONALLY = 638,
     OR2_SYM = 639,
     ORDER_SYM = 640,
     OR_OR_SYM = 641,
     OR_SYM = 642,
     OUTER = 643,
     OUTFILE = 644,
     OUT_SYM = 645,
     OWNER_SYM = 646,
     PACK_KEYS_SYM = 647,
     PAGE_SYM = 648,
     PAGE_CHECKSUM_SYM = 649,
     PARAM_MARKER = 650,
     PARSER_SYM = 651,
     PARSE_VCOL_EXPR_SYM = 652,
     PARTIAL = 653,
     PARTITION_SYM = 654,
     PARTITIONS_SYM = 655,
     PARTITIONING_SYM = 656,
     PASSWORD = 657,
     PERSISTENT_SYM = 658,
     PHASE_SYM = 659,
     PLUGINS_SYM = 660,
     PLUGIN_SYM = 661,
     POINT_SYM = 662,
     POLYGON = 663,
     PORT_SYM = 664,
     POSITION_SYM = 665,
     PRECISION = 666,
     PREPARE_SYM = 667,
     PRESERVE_SYM = 668,
     PREV_SYM = 669,
     PRIMARY_SYM = 670,
     PRIVILEGES = 671,
     PROCEDURE_SYM = 672,
     PROCESS = 673,
     PROCESSLIST_SYM = 674,
     PROFILE_SYM = 675,
     PROFILES_SYM = 676,
     PROXY_SYM = 677,
     PURGE = 678,
     QUARTER_SYM = 679,
     QUERY_SYM = 680,
     QUICK = 681,
     RANGE_SYM = 682,
     READS_SYM = 683,
     READ_ONLY_SYM = 684,
     READ_SYM = 685,
     READ_WRITE_SYM = 686,
     REAL = 687,
     REBUILD_SYM = 688,
     RECOVER_SYM = 689,
     REDOFILE_SYM = 690,
     REDO_BUFFER_SIZE_SYM = 691,
     REDUNDANT_SYM = 692,
     REFERENCES = 693,
     REGEXP = 694,
     RELAY = 695,
     RELAYLOG_SYM = 696,
     RELAY_LOG_FILE_SYM = 697,
     RELAY_LOG_POS_SYM = 698,
     RELAY_THREAD = 699,
     RELEASE_SYM = 700,
     RELOAD = 701,
     REMOVE_SYM = 702,
     RENAME = 703,
     REORGANIZE_SYM = 704,
     REPAIR = 705,
     REPEATABLE_SYM = 706,
     REPEAT_SYM = 707,
     REPLACE = 708,
     REPLICATION = 709,
     REQUIRE_SYM = 710,
     RESET_SYM = 711,
     RESIGNAL_SYM = 712,
     RESOURCES = 713,
     RESTORE_SYM = 714,
     RESTRICT = 715,
     RESUME_SYM = 716,
     RETURNED_SQLSTATE_SYM = 717,
     RETURNING_SYM = 718,
     RETURNS_SYM = 719,
     RETURN_SYM = 720,
     REVERSE_SYM = 721,
     REVOKE = 722,
     RIGHT = 723,
     ROLE_SYM = 724,
     ROLLBACK_SYM = 725,
     ROLLUP_SYM = 726,
     ROUTINE_SYM = 727,
     ROWS_SYM = 728,
     ROW_FORMAT_SYM = 729,
     ROW_SYM = 730,
     ROW_COUNT_SYM = 731,
     RTREE_SYM = 732,
     SAVEPOINT_SYM = 733,
     SCHEDULE_SYM = 734,
     SCHEMA_NAME_SYM = 735,
     SECOND_MICROSECOND_SYM = 736,
     SECOND_SYM = 737,
     SECURITY_SYM = 738,
     SELECT_SYM = 739,
     SENSITIVE_SYM = 740,
     SEPARATOR_SYM = 741,
     SERIALIZABLE_SYM = 742,
     SERIAL_SYM = 743,
     SESSION_SYM = 744,
     SERVER_SYM = 745,
     SERVER_OPTIONS = 746,
     SET = 747,
     SET_VAR = 748,
     SHARE_SYM = 749,
     SHIFT_LEFT = 750,
     SHIFT_RIGHT = 751,
     SHOW = 752,
     SHUTDOWN = 753,
     SIGNAL_SYM = 754,
     SIGNED_SYM = 755,
     SIMPLE_SYM = 756,
     SLAVE = 757,
     SLAVES = 758,
     SLAVE_POS_SYM = 759,
     SLOW = 760,
     SMALLINT = 761,
     SNAPSHOT_SYM = 762,
     SOCKET_SYM = 763,
     SOFT_SYM = 764,
     SONAME_SYM = 765,
     SOUNDS_SYM = 766,
     SOURCE_SYM = 767,
     SPATIAL_SYM = 768,
     SPECIFIC_SYM = 769,
     SQLEXCEPTION_SYM = 770,
     SQLSTATE_SYM = 771,
     SQLWARNING_SYM = 772,
     SQL_BIG_RESULT = 773,
     SQL_BUFFER_RESULT = 774,
     SQL_CACHE_SYM = 775,
     SQL_CALC_FOUND_ROWS = 776,
     SQL_NO_CACHE_SYM = 777,
     SQL_SMALL_RESULT = 778,
     SQL_SYM = 779,
     SQL_THREAD = 780,
     SSL_SYM = 781,
     STARTING = 782,
     STARTS_SYM = 783,
     START_SYM = 784,
     STATS_AUTO_RECALC_SYM = 785,
     STATS_PERSISTENT_SYM = 786,
     STATS_SAMPLE_PAGES_SYM = 787,
     STATUS_SYM = 788,
     STDDEV_SAMP_SYM = 789,
     STD_SYM = 790,
     STOP_SYM = 791,
     STORAGE_SYM = 792,
     STRAIGHT_JOIN = 793,
     STRING_SYM = 794,
     SUBCLASS_ORIGIN_SYM = 795,
     SUBDATE_SYM = 796,
     SUBJECT_SYM = 797,
     SUBPARTITIONS_SYM = 798,
     SUBPARTITION_SYM = 799,
     SUBSTRING = 800,
     SUM_SYM = 801,
     SUPER_SYM = 802,
     SUSPEND_SYM = 803,
     SWAPS_SYM = 804,
     SWITCHES_SYM = 805,
     SYSDATE = 806,
     TABLES = 807,
     TABLESPACE = 808,
     TABLE_REF_PRIORITY = 809,
     TABLE_STATS_SYM = 810,
     TABLE_SYM = 811,
     TABLE_CHECKSUM_SYM = 812,
     TABLE_NAME_SYM = 813,
     TEMPORARY = 814,
     TEMPTABLE_SYM = 815,
     TERMINATED = 816,
     TEXT_STRING = 817,
     TEXT_SYM = 818,
     THAN_SYM = 819,
     THEN_SYM = 820,
     TIMESTAMP = 821,
     TIMESTAMP_ADD = 822,
     TIMESTAMP_DIFF = 823,
     TIME_SYM = 824,
     TINYBLOB = 825,
     TINYINT = 826,
     TINYTEXT = 827,
     TO_SYM = 828,
     TRAILING = 829,
     TRANSACTION_SYM = 830,
     TRANSACTIONAL_SYM = 831,
     TRIGGERS_SYM = 832,
     TRIGGER_SYM = 833,
     TRIM = 834,
     TRUE_SYM = 835,
     TRUNCATE_SYM = 836,
     TYPES_SYM = 837,
     TYPE_SYM = 838,
     UDF_RETURNS_SYM = 839,
     ULONGLONG_NUM = 840,
     UNCOMMITTED_SYM = 841,
     UNDEFINED_SYM = 842,
     UNDERSCORE_CHARSET = 843,
     UNDOFILE_SYM = 844,
     UNDO_BUFFER_SIZE_SYM = 845,
     UNDO_SYM = 846,
     UNICODE_SYM = 847,
     UNINSTALL_SYM = 848,
     UNION_SYM = 849,
     UNIQUE_SYM = 850,
     UNKNOWN_SYM = 851,
     UNLOCK_SYM = 852,
     UNSIGNED = 853,
     UNTIL_SYM = 854,
     UPDATE_SYM = 855,
     UPGRADE_SYM = 856,
     USAGE = 857,
     USER = 858,
     USER_STATS_SYM = 859,
     USE_FRM = 860,
     USE_SYM = 861,
     USING = 862,
     UTC_DATE_SYM = 863,
     UTC_TIMESTAMP_SYM = 864,
     UTC_TIME_SYM = 865,
     VALUES = 866,
     VALUE_SYM = 867,
     VARBINARY = 868,
     VARCHAR = 869,
     VARIABLES = 870,
     VARIANCE_SYM = 871,
     VARYING = 872,
     VAR_SAMP_SYM = 873,
     VIA_SYM = 874,
     VIEW_SYM = 875,
     VIRTUAL_SYM = 876,
     WAIT_SYM = 877,
     WARNINGS = 878,
     WEEK_SYM = 879,
     WEIGHT_STRING_SYM = 880,
     WHEN_SYM = 881,
     WHERE = 882,
     WHILE_SYM = 883,
     WITH = 884,
     WITH_CUBE_SYM = 885,
     WITH_ROLLUP_SYM = 886,
     WORK_SYM = 887,
     WRAPPER_SYM = 888,
     WRITE_SYM = 889,
     X509_SYM = 890,
     XA_SYM = 891,
     XML_SYM = 892,
     XOR = 893,
     YEAR_MONTH_SYM = 894,
     YEAR_SYM = 895,
     ZEROFILL = 896,
     IMPOSSIBLE_ACTION = 897
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADMIN_SYM 262
#define ADDDATE_SYM 263
#define AFTER_SYM 264
#define AGAINST 265
#define AGGREGATE_SYM 266
#define ALGORITHM_SYM 267
#define ALL 268
#define ALTER 269
#define ALWAYS_SYM 270
#define ANALYZE_SYM 271
#define AND_AND_SYM 272
#define AND_SYM 273
#define ANY_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define AUTHORS_SYM 280
#define AUTOEXTEND_SIZE_SYM 281
#define AUTO_INC 282
#define AUTO_SYM 283
#define AVG_ROW_LENGTH 284
#define AVG_SYM 285
#define BACKUP_SYM 286
#define BEFORE_SYM 287
#define BEGIN_SYM 288
#define BETWEEN_SYM 289
#define BIGINT 290
#define BINARY 291
#define BINLOG_SYM 292
#define BIN_NUM 293
#define BIT_AND 294
#define BIT_OR 295
#define BIT_SYM 296
#define BIT_XOR 297
#define BLOB_SYM 298
#define BLOCK_SYM 299
#define BOOLEAN_SYM 300
#define BOOL_SYM 301
#define BOTH 302
#define BTREE_SYM 303
#define BY 304
#define BYTE_SYM 305
#define CACHE_SYM 306
#define CALL_SYM 307
#define CASCADE 308
#define CASCADED 309
#define CASE_SYM 310
#define CAST_SYM 311
#define CATALOG_NAME_SYM 312
#define CHAIN_SYM 313
#define CHANGE 314
#define CHANGED 315
#define CHARSET 316
#define CHAR_SYM 317
#define CHECKPOINT_SYM 318
#define CHECKSUM_SYM 319
#define CHECK_SYM 320
#define CIPHER_SYM 321
#define CLASS_ORIGIN_SYM 322
#define CLIENT_SYM 323
#define CLIENT_STATS_SYM 324
#define CLOSE_SYM 325
#define COALESCE 326
#define CODE_SYM 327
#define COLLATE_SYM 328
#define COLLATION_SYM 329
#define COLUMNS 330
#define COLUMN_ADD_SYM 331
#define COLUMN_CHECK_SYM 332
#define COLUMN_CREATE_SYM 333
#define COLUMN_DELETE_SYM 334
#define COLUMN_GET_SYM 335
#define COLUMN_SYM 336
#define COLUMN_NAME_SYM 337
#define COMMENT_SYM 338
#define COMMITTED_SYM 339
#define COMMIT_SYM 340
#define COMPACT_SYM 341
#define COMPLETION_SYM 342
#define COMPRESSED_SYM 343
#define CONCURRENT 344
#define CONDITION_SYM 345
#define CONNECTION_SYM 346
#define CONSISTENT_SYM 347
#define CONSTRAINT 348
#define CONSTRAINT_CATALOG_SYM 349
#define CONSTRAINT_NAME_SYM 350
#define CONSTRAINT_SCHEMA_SYM 351
#define CONTAINS_SYM 352
#define CONTEXT_SYM 353
#define CONTINUE_SYM 354
#define CONTRIBUTORS_SYM 355
#define CONVERT_SYM 356
#define COUNT_SYM 357
#define CPU_SYM 358
#define CREATE 359
#define CROSS 360
#define CUBE_SYM 361
#define CURDATE 362
#define CURRENT_SYM 363
#define CURRENT_USER 364
#define CURRENT_ROLE 365
#define CURRENT_POS_SYM 366
#define CURSOR_SYM 367
#define CURSOR_NAME_SYM 368
#define CURTIME 369
#define DATABASE 370
#define DATABASES 371
#define DATAFILE_SYM 372
#define DATA_SYM 373
#define DATETIME 374
#define DATE_ADD_INTERVAL 375
#define DATE_SUB_INTERVAL 376
#define DATE_SYM 377
#define DAY_HOUR_SYM 378
#define DAY_MICROSECOND_SYM 379
#define DAY_MINUTE_SYM 380
#define DAY_SECOND_SYM 381
#define DAY_SYM 382
#define DEALLOCATE_SYM 383
#define DECIMAL_NUM 384
#define DECIMAL_SYM 385
#define DECLARE_SYM 386
#define DEFAULT 387
#define DEFINER_SYM 388
#define DELAYED_SYM 389
#define DELAY_KEY_WRITE_SYM 390
#define DELETE_SYM 391
#define DESC 392
#define DESCRIBE 393
#define DES_KEY_FILE 394
#define DETERMINISTIC_SYM 395
#define DIAGNOSTICS_SYM 396
#define DIRECTORY_SYM 397
#define DISABLE_SYM 398
#define DISCARD 399
#define DISK_SYM 400
#define DISTINCT 401
#define DIV_SYM 402
#define DOUBLE_SYM 403
#define DO_SYM 404
#define DROP 405
#define DUAL_SYM 406
#define DUMPFILE 407
#define DUPLICATE_SYM 408
#define DYNAMIC_SYM 409
#define EACH_SYM 410
#define ELSE 411
#define ELSEIF_SYM 412
#define ENABLE_SYM 413
#define ENCLOSED 414
#define END 415
#define ENDS_SYM 416
#define END_OF_INPUT 417
#define ENGINES_SYM 418
#define ENGINE_SYM 419
#define ENUM 420
#define EQ 421
#define EQUAL_SYM 422
#define ERROR_SYM 423
#define ERRORS 424
#define ESCAPED 425
#define ESCAPE_SYM 426
#define EVENTS_SYM 427
#define EVENT_SYM 428
#define EVERY_SYM 429
#define EXCHANGE_SYM 430
#define EXAMINED_SYM 431
#define EXECUTE_SYM 432
#define EXISTS 433
#define EXIT_SYM 434
#define EXPANSION_SYM 435
#define EXTENDED_SYM 436
#define EXTENT_SIZE_SYM 437
#define EXTRACT_SYM 438
#define FALSE_SYM 439
#define FAST_SYM 440
#define FAULTS_SYM 441
#define FETCH_SYM 442
#define FILE_SYM 443
#define FIRST_SYM 444
#define FIXED_SYM 445
#define FLOAT_NUM 446
#define FLOAT_SYM 447
#define FLUSH_SYM 448
#define FORCE_SYM 449
#define FOREIGN 450
#define FOR_SYM 451
#define FOUND_SYM 452
#define FROM 453
#define FULL 454
#define FULLTEXT_SYM 455
#define FUNCTION_SYM 456
#define GE 457
#define GENERAL 458
#define GENERATED_SYM 459
#define GEOMETRYCOLLECTION 460
#define GEOMETRY_SYM 461
#define GET_FORMAT 462
#define GET_SYM 463
#define GLOBAL_SYM 464
#define GRANT 465
#define GRANTS 466
#define GROUP_SYM 467
#define GROUP_CONCAT_SYM 468
#define GT_SYM 469
#define HANDLER_SYM 470
#define HARD_SYM 471
#define HASH_SYM 472
#define HAVING 473
#define HELP_SYM 474
#define HEX_NUM 475
#define HEX_STRING 476
#define HIGH_PRIORITY 477
#define HOST_SYM 478
#define HOSTS_SYM 479
#define HOUR_MICROSECOND_SYM 480
#define HOUR_MINUTE_SYM 481
#define HOUR_SECOND_SYM 482
#define HOUR_SYM 483
#define ID_SYM 484
#define IDENT 485
#define IDENTIFIED_SYM 486
#define IDENT_QUOTED 487
#define IF 488
#define IGNORE_SYM 489
#define IGNORE_SERVER_IDS_SYM 490
#define IMPORT 491
#define INDEXES 492
#define INDEX_SYM 493
#define INDEX_STATS_SYM 494
#define INFILE 495
#define INITIAL_SIZE_SYM 496
#define INNER_SYM 497
#define INOUT_SYM 498
#define INSENSITIVE_SYM 499
#define INSERT 500
#define INSERT_METHOD 501
#define INSTALL_SYM 502
#define INTERVAL_SYM 503
#define INTO 504
#define INT_SYM 505
#define INVOKER_SYM 506
#define IN_SYM 507
#define IO_SYM 508
#define IPC_SYM 509
#define IS 510
#define ISOLATION 511
#define ISSUER_SYM 512
#define ITERATE_SYM 513
#define JOIN_SYM 514
#define KEYS 515
#define KEY_BLOCK_SIZE 516
#define KEY_SYM 517
#define KILL_SYM 518
#define LANGUAGE_SYM 519
#define LAST_SYM 520
#define LAST_VALUE 521
#define LE 522
#define LEADING 523
#define LEAVES 524
#define LEAVE_SYM 525
#define LEFT 526
#define LESS_SYM 527
#define LEVEL_SYM 528
#define LEX_HOSTNAME 529
#define LIKE 530
#define LIMIT 531
#define LINEAR_SYM 532
#define LINES 533
#define LINESTRING 534
#define LIST_SYM 535
#define LOAD 536
#define LOCAL_SYM 537
#define LOCATOR_SYM 538
#define LOCKS_SYM 539
#define LOCK_SYM 540
#define LOGFILE_SYM 541
#define LOGS_SYM 542
#define LONGBLOB 543
#define LONGTEXT 544
#define LONG_NUM 545
#define LONG_SYM 546
#define LOOP_SYM 547
#define LOW_PRIORITY 548
#define LT 549
#define MASTER_CONNECT_RETRY_SYM 550
#define MASTER_GTID_POS_SYM 551
#define MASTER_HOST_SYM 552
#define MASTER_LOG_FILE_SYM 553
#define MASTER_LOG_POS_SYM 554
#define MASTER_PASSWORD_SYM 555
#define MASTER_PORT_SYM 556
#define MASTER_SERVER_ID_SYM 557
#define MASTER_SSL_CAPATH_SYM 558
#define MASTER_SSL_CA_SYM 559
#define MASTER_SSL_CERT_SYM 560
#define MASTER_SSL_CIPHER_SYM 561
#define MASTER_SSL_CRL_SYM 562
#define MASTER_SSL_CRLPATH_SYM 563
#define MASTER_SSL_KEY_SYM 564
#define MASTER_SSL_SYM 565
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 566
#define MASTER_SYM 567
#define MASTER_USER_SYM 568
#define MASTER_USE_GTID_SYM 569
#define MASTER_HEARTBEAT_PERIOD_SYM 570
#define MATCH 571
#define MAX_CONNECTIONS_PER_HOUR 572
#define MAX_QUERIES_PER_HOUR 573
#define MAX_ROWS 574
#define MAX_SIZE_SYM 575
#define MAX_SYM 576
#define MAX_UPDATES_PER_HOUR 577
#define MAX_USER_CONNECTIONS_SYM 578
#define MAX_VALUE_SYM 579
#define MEDIUMBLOB 580
#define MEDIUMINT 581
#define MEDIUMTEXT 582
#define MEDIUM_SYM 583
#define MEMORY_SYM 584
#define MERGE_SYM 585
#define MESSAGE_TEXT_SYM 586
#define MICROSECOND_SYM 587
#define MIGRATE_SYM 588
#define MINUTE_MICROSECOND_SYM 589
#define MINUTE_SECOND_SYM 590
#define MINUTE_SYM 591
#define MIN_ROWS 592
#define MIN_SYM 593
#define MODE_SYM 594
#define MODIFIES_SYM 595
#define MODIFY_SYM 596
#define MOD_SYM 597
#define MONTH_SYM 598
#define MULTILINESTRING 599
#define MULTIPOINT 600
#define MULTIPOLYGON 601
#define MUTEX_SYM 602
#define MYSQL_ERRNO_SYM 603
#define NAMES_SYM 604
#define NAME_SYM 605
#define NATIONAL_SYM 606
#define NATURAL 607
#define NCHAR_STRING 608
#define NCHAR_SYM 609
#define NDBCLUSTER_SYM 610
#define NE 611
#define NEG 612
#define NEW_SYM 613
#define NEXT_SYM 614
#define NODEGROUP_SYM 615
#define NONE_SYM 616
#define NOT2_SYM 617
#define NOT_SYM 618
#define NOW_SYM 619
#define NO_SYM 620
#define NO_WAIT_SYM 621
#define NO_WRITE_TO_BINLOG 622
#define NULL_SYM 623
#define NUM 624
#define NUMBER_SYM 625
#define NUMERIC_SYM 626
#define NVARCHAR_SYM 627
#define OFFSET_SYM 628
#define OLD_PASSWORD 629
#define ON 630
#define ONE_SYM 631
#define ONLY_SYM 632
#define ONLINE_SYM 633
#define OPEN_SYM 634
#define OPTIMIZE 635
#define OPTIONS_SYM 636
#define OPTION 637
#define OPTIONALLY 638
#define OR2_SYM 639
#define ORDER_SYM 640
#define OR_OR_SYM 641
#define OR_SYM 642
#define OUTER 643
#define OUTFILE 644
#define OUT_SYM 645
#define OWNER_SYM 646
#define PACK_KEYS_SYM 647
#define PAGE_SYM 648
#define PAGE_CHECKSUM_SYM 649
#define PARAM_MARKER 650
#define PARSER_SYM 651
#define PARSE_VCOL_EXPR_SYM 652
#define PARTIAL 653
#define PARTITION_SYM 654
#define PARTITIONS_SYM 655
#define PARTITIONING_SYM 656
#define PASSWORD 657
#define PERSISTENT_SYM 658
#define PHASE_SYM 659
#define PLUGINS_SYM 660
#define PLUGIN_SYM 661
#define POINT_SYM 662
#define POLYGON 663
#define PORT_SYM 664
#define POSITION_SYM 665
#define PRECISION 666
#define PREPARE_SYM 667
#define PRESERVE_SYM 668
#define PREV_SYM 669
#define PRIMARY_SYM 670
#define PRIVILEGES 671
#define PROCEDURE_SYM 672
#define PROCESS 673
#define PROCESSLIST_SYM 674
#define PROFILE_SYM 675
#define PROFILES_SYM 676
#define PROXY_SYM 677
#define PURGE 678
#define QUARTER_SYM 679
#define QUERY_SYM 680
#define QUICK 681
#define RANGE_SYM 682
#define READS_SYM 683
#define READ_ONLY_SYM 684
#define READ_SYM 685
#define READ_WRITE_SYM 686
#define REAL 687
#define REBUILD_SYM 688
#define RECOVER_SYM 689
#define REDOFILE_SYM 690
#define REDO_BUFFER_SIZE_SYM 691
#define REDUNDANT_SYM 692
#define REFERENCES 693
#define REGEXP 694
#define RELAY 695
#define RELAYLOG_SYM 696
#define RELAY_LOG_FILE_SYM 697
#define RELAY_LOG_POS_SYM 698
#define RELAY_THREAD 699
#define RELEASE_SYM 700
#define RELOAD 701
#define REMOVE_SYM 702
#define RENAME 703
#define REORGANIZE_SYM 704
#define REPAIR 705
#define REPEATABLE_SYM 706
#define REPEAT_SYM 707
#define REPLACE 708
#define REPLICATION 709
#define REQUIRE_SYM 710
#define RESET_SYM 711
#define RESIGNAL_SYM 712
#define RESOURCES 713
#define RESTORE_SYM 714
#define RESTRICT 715
#define RESUME_SYM 716
#define RETURNED_SQLSTATE_SYM 717
#define RETURNING_SYM 718
#define RETURNS_SYM 719
#define RETURN_SYM 720
#define REVERSE_SYM 721
#define REVOKE 722
#define RIGHT 723
#define ROLE_SYM 724
#define ROLLBACK_SYM 725
#define ROLLUP_SYM 726
#define ROUTINE_SYM 727
#define ROWS_SYM 728
#define ROW_FORMAT_SYM 729
#define ROW_SYM 730
#define ROW_COUNT_SYM 731
#define RTREE_SYM 732
#define SAVEPOINT_SYM 733
#define SCHEDULE_SYM 734
#define SCHEMA_NAME_SYM 735
#define SECOND_MICROSECOND_SYM 736
#define SECOND_SYM 737
#define SECURITY_SYM 738
#define SELECT_SYM 739
#define SENSITIVE_SYM 740
#define SEPARATOR_SYM 741
#define SERIALIZABLE_SYM 742
#define SERIAL_SYM 743
#define SESSION_SYM 744
#define SERVER_SYM 745
#define SERVER_OPTIONS 746
#define SET 747
#define SET_VAR 748
#define SHARE_SYM 749
#define SHIFT_LEFT 750
#define SHIFT_RIGHT 751
#define SHOW 752
#define SHUTDOWN 753
#define SIGNAL_SYM 754
#define SIGNED_SYM 755
#define SIMPLE_SYM 756
#define SLAVE 757
#define SLAVES 758
#define SLAVE_POS_SYM 759
#define SLOW 760
#define SMALLINT 761
#define SNAPSHOT_SYM 762
#define SOCKET_SYM 763
#define SOFT_SYM 764
#define SONAME_SYM 765
#define SOUNDS_SYM 766
#define SOURCE_SYM 767
#define SPATIAL_SYM 768
#define SPECIFIC_SYM 769
#define SQLEXCEPTION_SYM 770
#define SQLSTATE_SYM 771
#define SQLWARNING_SYM 772
#define SQL_BIG_RESULT 773
#define SQL_BUFFER_RESULT 774
#define SQL_CACHE_SYM 775
#define SQL_CALC_FOUND_ROWS 776
#define SQL_NO_CACHE_SYM 777
#define SQL_SMALL_RESULT 778
#define SQL_SYM 779
#define SQL_THREAD 780
#define SSL_SYM 781
#define STARTING 782
#define STARTS_SYM 783
#define START_SYM 784
#define STATS_AUTO_RECALC_SYM 785
#define STATS_PERSISTENT_SYM 786
#define STATS_SAMPLE_PAGES_SYM 787
#define STATUS_SYM 788
#define STDDEV_SAMP_SYM 789
#define STD_SYM 790
#define STOP_SYM 791
#define STORAGE_SYM 792
#define STRAIGHT_JOIN 793
#define STRING_SYM 794
#define SUBCLASS_ORIGIN_SYM 795
#define SUBDATE_SYM 796
#define SUBJECT_SYM 797
#define SUBPARTITIONS_SYM 798
#define SUBPARTITION_SYM 799
#define SUBSTRING 800
#define SUM_SYM 801
#define SUPER_SYM 802
#define SUSPEND_SYM 803
#define SWAPS_SYM 804
#define SWITCHES_SYM 805
#define SYSDATE 806
#define TABLES 807
#define TABLESPACE 808
#define TABLE_REF_PRIORITY 809
#define TABLE_STATS_SYM 810
#define TABLE_SYM 811
#define TABLE_CHECKSUM_SYM 812
#define TABLE_NAME_SYM 813
#define TEMPORARY 814
#define TEMPTABLE_SYM 815
#define TERMINATED 816
#define TEXT_STRING 817
#define TEXT_SYM 818
#define THAN_SYM 819
#define THEN_SYM 820
#define TIMESTAMP 821
#define TIMESTAMP_ADD 822
#define TIMESTAMP_DIFF 823
#define TIME_SYM 824
#define TINYBLOB 825
#define TINYINT 826
#define TINYTEXT 827
#define TO_SYM 828
#define TRAILING 829
#define TRANSACTION_SYM 830
#define TRANSACTIONAL_SYM 831
#define TRIGGERS_SYM 832
#define TRIGGER_SYM 833
#define TRIM 834
#define TRUE_SYM 835
#define TRUNCATE_SYM 836
#define TYPES_SYM 837
#define TYPE_SYM 838
#define UDF_RETURNS_SYM 839
#define ULONGLONG_NUM 840
#define UNCOMMITTED_SYM 841
#define UNDEFINED_SYM 842
#define UNDERSCORE_CHARSET 843
#define UNDOFILE_SYM 844
#define UNDO_BUFFER_SIZE_SYM 845
#define UNDO_SYM 846
#define UNICODE_SYM 847
#define UNINSTALL_SYM 848
#define UNION_SYM 849
#define UNIQUE_SYM 850
#define UNKNOWN_SYM 851
#define UNLOCK_SYM 852
#define UNSIGNED 853
#define UNTIL_SYM 854
#define UPDATE_SYM 855
#define UPGRADE_SYM 856
#define USAGE 857
#define USER 858
#define USER_STATS_SYM 859
#define USE_FRM 860
#define USE_SYM 861
#define USING 862
#define UTC_DATE_SYM 863
#define UTC_TIMESTAMP_SYM 864
#define UTC_TIME_SYM 865
#define VALUES 866
#define VALUE_SYM 867
#define VARBINARY 868
#define VARCHAR 869
#define VARIABLES 870
#define VARIANCE_SYM 871
#define VARYING 872
#define VAR_SAMP_SYM 873
#define VIA_SYM 874
#define VIEW_SYM 875
#define VIRTUAL_SYM 876
#define WAIT_SYM 877
#define WARNINGS 878
#define WEEK_SYM 879
#define WEIGHT_STRING_SYM 880
#define WHEN_SYM 881
#define WHERE 882
#define WHILE_SYM 883
#define WITH 884
#define WITH_CUBE_SYM 885
#define WITH_ROLLUP_SYM 886
#define WORK_SYM 887
#define WRAPPER_SYM 888
#define WRITE_SYM 889
#define X509_SYM 890
#define XA_SYM 891
#define XML_SYM 892
#define XOR 893
#define YEAR_MONTH_SYM 894
#define YEAR_SYM 895
#define ZEROFILL 896
#define IMPOSSIBLE_ACTION 897




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 890 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  bool is_not_empty;



/* Line 214 of yacc.c  */
#line 2330 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2347 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  623
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   65477

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  662
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  994
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2816
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4779

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   897

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   655,     2,     2,     2,   649,   644,     2,
     652,   653,   647,   646,   654,   645,   660,   648,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   661,   658,
       2,     2,     2,     2,   659,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   650,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   656,   643,   657,   651,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   129,   131,   135,   137,   139,   144,
     146,   149,   150,   155,   156,   159,   163,   165,   168,   169,
     173,   174,   181,   183,   187,   191,   195,   199,   203,   207,
     211,   215,   219,   223,   227,   231,   235,   239,   243,   247,
     253,   255,   256,   258,   262,   264,   268,   272,   276,   280,
     284,   288,   292,   293,   295,   297,   298,   306,   307,   308,
     324,   325,   326,   342,   343,   344,   360,   361,   368,   369,
     373,   378,   384,   389,   393,   396,   407,   409,   413,   416,
     419,   422,   425,   428,   431,   434,   435,   449,   450,   457,
     460,   461,   463,   467,   469,   470,   473,   474,   477,   478,
     480,   484,   489,   490,   493,   494,   497,   499,   501,   503,
     505,   507,   509,   511,   513,   515,   517,   519,   521,   523,
     524,   528,   530,   531,   534,   535,   538,   541,   544,   547,
     550,   554,   558,   560,   562,   564,   567,   571,   575,   576,
     581,   582,   586,   587,   589,   593,   595,   596,   598,   602,
     604,   605,   609,   610,   612,   616,   618,   623,   624,   626,
     628,   630,   631,   635,   638,   642,   643,   647,   648,   654,
     660,   661,   669,   675,   676,   679,   681,   683,   685,   689,
     691,   693,   695,   699,   700,   702,   704,   706,   708,   711,
     713,   717,   719,   721,   722,   724,   725,   728,   732,   738,
     740,   742,   744,   746,   748,   750,   752,   754,   756,   758,
     760,   762,   764,   766,   768,   772,   777,   778,   780,   782,
     786,   788,   792,   796,   798,   801,   803,   805,   807,   809,
     813,   817,   819,   821,   823,   825,   827,   829,   831,   833,
     835,   837,   839,   841,   843,   845,   849,   850,   853,   855,
     857,   859,   861,   863,   865,   867,   869,   871,   873,   875,
     877,   879,   880,   886,   887,   890,   891,   895,   896,   899,
     902,   905,   908,   909,   916,   919,   920,   923,   925,   927,
     931,   932,   933,   934,   942,   943,   946,   949,   951,   953,
     954,   955,   964,   965,   972,   974,   977,   979,   982,   983,
     984,   991,   992,   993,  1000,  1001,  1004,  1005,  1011,  1012,
    1014,  1015,  1021,  1022,  1025,  1026,  1032,  1037,  1038,  1039,
    1048,  1049,  1057,  1059,  1061,  1063,  1065,  1067,  1070,  1075,
    1081,  1082,  1087,  1092,  1097,  1101,  1105,  1108,  1111,  1112,
    1115,  1117,  1120,  1124,  1126,  1128,  1130,  1132,  1134,  1137,
    1141,  1143,  1145,  1147,  1149,  1151,  1153,  1155,  1157,  1159,
    1161,  1164,  1168,  1170,  1172,  1174,  1176,  1178,  1180,  1182,
    1185,  1189,  1191,  1193,  1195,  1197,  1199,  1201,  1203,  1205,
    1207,  1210,  1214,  1216,  1218,  1220,  1223,  1226,  1229,  1231,
    1233,  1235,  1237,  1240,  1244,  1248,  1252,  1256,  1260,  1264,
    1268,  1272,  1277,  1278,  1280,  1282,  1284,  1286,  1288,  1289,
    1297,  1301,  1302,  1308,  1310,  1313,  1318,  1319,  1320,  1326,
    1327,  1335,  1337,  1338,  1340,  1341,  1346,  1347,  1348,  1352,
    1358,  1364,  1365,  1370,  1373,  1376,  1379,  1382,  1383,  1385,
    1386,  1388,  1390,  1394,  1396,  1401,  1407,  1413,  1414,  1417,
    1418,  1419,  1427,  1428,  1438,  1440,  1444,  1446,  1448,  1449,
    1452,  1453,  1457,  1459,  1463,  1464,  1471,  1473,  1474,  1475,
    1481,  1482,  1487,  1489,  1491,  1493,  1497,  1499,  1503,  1504,
    1505,  1511,  1513,  1517,  1519,  1521,  1522,  1526,  1528,  1532,
    1533,  1538,  1540,  1541,  1543,  1546,  1548,  1552,  1557,  1561,
    1565,  1569,  1573,  1578,  1583,  1587,  1588,  1589,  1596,  1597,
    1599,  1600,  1602,  1604,  1607,  1609,  1611,  1612,  1614,  1616,
    1619,  1621,  1622,  1626,  1627,  1629,  1631,  1634,  1636,  1639,
    1643,  1647,  1651,  1655,  1659,  1663,  1667,  1671,  1675,  1679,
    1683,  1687,  1691,  1695,  1699,  1703,  1707,  1711,  1715,  1719,
    1723,  1724,  1731,  1733,  1735,  1739,  1744,  1749,  1752,  1755,
    1758,  1762,  1766,  1770,  1774,  1778,  1782,  1786,  1791,  1796,
    1798,  1800,  1802,  1804,  1806,  1808,  1810,  1812,  1814,  1816,
    1818,  1820,  1822,  1825,  1827,  1829,  1831,  1833,  1835,  1837,
    1841,  1843,  1845,  1848,  1851,  1852,  1861,  1862,  1872,  1873,
    1883,  1884,  1894,  1903,  1906,  1907,  1909,  1914,  1915,  1917,
    1920,  1921,  1925,  1928,  1937,  1938,  1941,  1942,  1944,  1946,
    1947,  1949,  1952,  1954,  1956,  1959,  1962,  1967,  1971,  1975,
    1979,  1983,  1985,  1988,  1990,  1992,  1996,  1999,  2003,  2006,
    2009,  2011,  2015,  2019,  2022,  2026,  2028,  2031,  2034,  2037,
    2039,  2042,  2044,  2046,  2048,  2051,  2055,  2058,  2062,  2065,
    2068,  2072,  2076,  2080,  2081,  2088,  2089,  2096,  2099,  2101,
    2103,  2105,  2107,  2109,  2111,  2113,  2115,  2117,  2119,  2121,
    2124,  2127,  2129,  2132,  2134,  2137,  2141,  2144,  2146,  2148,
    2150,  2152,  2154,  2156,  2158,  2161,  2162,  2164,  2166,  2172,
    2173,  2175,  2178,  2180,  2182,  2184,  2186,  2190,  2194,  2198,
    2202,  2203,  2205,  2206,  2208,  2209,  2211,  2214,  2216,  2218,
    2221,  2224,  2229,  2231,  2235,  2238,  2240,  2243,  2246,  2249,
    2253,  2257,  2261,  2265,  2268,  2271,  2273,  2275,  2277,  2280,
    2282,  2284,  2286,  2288,  2290,  2291,  2294,  2296,  2298,  2300,
    2302,  2304,  2305,  2308,  2310,  2312,  2313,  2315,  2317,  2320,
    2323,  2325,  2328,  2331,  2332,  2334,  2336,  2338,  2342,  2344,
    2348,  2349,  2351,  2352,  2357,  2359,  2361,  2363,  2364,  2366,
    2369,  2371,  2373,  2376,  2378,  2382,  2386,  2388,  2390,  2391,
    2394,  2395,  2397,  2403,  2404,  2408,  2412,  2414,  2415,  2418,
    2421,  2424,  2425,  2429,  2433,  2440,  2447,  2449,  2451,  2454,
    2457,  2460,  2462,  2465,  2468,  2470,  2472,  2473,  2475,  2477,
    2479,  2481,  2482,  2484,  2486,  2488,  2489,  2491,  2494,  2495,
    2497,  2498,  2500,  2501,  2503,  2505,  2508,  2510,  2513,  2515,
    2518,  2521,  2524,  2528,  2531,  2535,  2539,  2543,  2547,  2549,
    2551,  2553,  2555,  2559,  2561,  2563,  2565,  2570,  2573,  2575,
    2580,  2581,  2583,  2586,  2587,  2590,  2592,  2596,  2597,  2598,
    2606,  2607,  2613,  2621,  2622,  2628,  2629,  2635,  2636,  2642,
    2643,  2648,  2649,  2660,  2664,  2669,  2673,  2677,  2685,  2686,
    2690,  2692,  2697,  2698,  2702,  2703,  2706,  2707,  2709,  2710,
    2713,  2716,  2719,  2722,  2724,  2726,  2728,  2733,  2738,  2739,
    2746,  2751,  2752,  2758,  2759,  2766,  2771,  2775,  2777,  2785,
    2788,  2790,  2792,  2793,  2800,  2801,  2805,  2808,  2809,  2815,
    2816,  2817,  2824,  2826,  2830,  2832,  2834,  2838,  2842,  2846,
    2849,  2854,  2855,  2863,  2864,  2865,  2874,  2880,  2886,  2890,
    2895,  2898,  2901,  2908,  2914,  2918,  2924,  2926,  2928,  2930,
    2932,  2934,  2935,  2937,  2939,  2942,  2945,  2949,  2953,  2957,
    2961,  2962,  2964,  2965,  2967,  2968,  2971,  2972,  2974,  2977,
    2979,  2981,  2983,  2984,  2986,  2988,  2989,  2992,  2994,  2995,
    2997,  2999,  3001,  3002,  3009,  3010,  3016,  3021,  3026,  3030,
    3031,  3033,  3035,  3039,  3043,  3046,  3049,  3050,  3053,  3055,
    3059,  3060,  3062,  3064,  3065,  3068,  3073,  3075,  3079,  3080,
    3086,  3087,  3089,  3091,  3092,  3099,  3100,  3102,  3104,  3107,
    3109,  3111,  3113,  3114,  3120,  3122,  3126,  3129,  3130,  3134,
    3136,  3141,  3143,  3144,  3149,  3151,  3152,  3157,  3158,  3160,
    3164,  3165,  3167,  3171,  3173,  3175,  3178,  3179,  3185,  3186,
    3188,  3190,  3193,  3195,  3197,  3199,  3201,  3203,  3206,  3207,
    3213,  3214,  3216,  3218,  3219,  3224,  3229,  3233,  3239,  3241,
    3245,  3249,  3250,  3257,  3259,  3261,  3263,  3267,  3270,  3274,
    3276,  3278,  3279,  3286,  3288,  3290,  3292,  3296,  3300,  3305,
    3306,  3313,  3314,  3317,  3318,  3323,  3324,  3327,  3329,  3332,
    3337,  3340,  3344,  3347,  3351,  3352,  3356,  3357,  3358,  3365,
    3368,  3370,  3372,  3375,  3378,  3387,  3392,  3393,  3395,  3398,
    3400,  3402,  3404,  3406,  3407,  3410,  3415,  3419,  3421,  3423,
    3427,  3432,  3433,  3434,  3435,  3438,  3441,  3443,  3445,  3446,
    3449,  3453,  3454,  3457,  3461,  3462,  3465,  3469,  3473,  3477,
    3480,  3484,  3489,  3493,  3498,  3502,  3507,  3509,  3513,  3518,
    3522,  3526,  3533,  3535,  3541,  3548,  3554,  3562,  3569,  3578,
    3584,  3591,  3596,  3601,  3607,  3611,  3616,  3618,  3622,  3626,
    3630,  3634,  3638,  3642,  3648,  3654,  3658,  3662,  3666,  3670,
    3674,  3678,  3680,  3682,  3684,  3686,  3688,  3690,  3692,  3694,
    3696,  3698,  3700,  3702,  3704,  3706,  3708,  3710,  3712,  3713,
    3716,  3718,  3721,  3723,  3725,  3727,  3730,  3733,  3735,  3737,
    3740,  3743,  3748,  3750,  3754,  3756,  3758,  3760,  3762,  3764,
    3768,  3770,  3772,  3774,  3776,  3780,  3783,  3786,  3789,  3792,
    3796,  3800,  3806,  3813,  3818,  3823,  3831,  3834,  3841,  3847,
    3854,  3861,  3866,  3871,  3877,  3882,  3889,  3892,  3895,  3900,
    3905,  3910,  3921,  3928,  3937,  3944,  3949,  3954,  3961,  3966,
    3971,  3976,  3983,  3988,  3996,  4004,  4012,  4019,  4026,  4033,
    4040,  4044,  4049,  4056,  4065,  4068,  4071,  4080,  4089,  4096,
    4103,  4106,  4113,  4120,  4129,  4138,  4145,  4154,  4161,  4164,
    4173,  4182,  4185,  4188,  4191,  4198,  4205,  4210,  4215,  4224,
    4229,  4234,  4239,  4244,  4248,  4257,  4262,  4267,  4274,  4279,
    4284,  4289,  4296,  4305,  4310,  4314,  4321,  4326,  4333,  4339,
    4348,  4356,  4367,  4369,  4376,  4381,  4386,  4391,  4396,  4401,
    4408,  4413,  4414,  4420,  4427,  4430,  4434,  4435,  4440,  4441,
    4445,  4446,  4448,  4450,  4454,  4459,  4464,  4470,  4475,  4480,
    4485,  4491,  4496,  4497,  4498,  4506,  4511,  4517,  4522,  4528,
    4533,  4538,  4543,  4548,  4553,  4559,  4560,  4569,  4570,  4574,
    4578,  4580,  4585,  4586,  4588,  4589,  4592,  4593,  4594,  4599,
    4604,  4607,  4608,  4612,  4615,  4619,  4622,  4624,  4626,  4629,
    4631,  4634,  4636,  4639,  4642,  4645,  4646,  4650,  4651,  4653,
    4655,  4659,  4661,  4665,  4667,  4671,  4672,  4674,  4675,  4678,
    4683,  4689,  4691,  4693,  4695,  4697,  4702,  4704,  4708,  4712,
    4713,  4720,  4721,  4730,  4735,  4736,  4745,  4746,  4757,  4764,
    4765,  4774,  4775,  4786,  4793,  4795,  4798,  4800,  4802,  4805,
    4806,  4808,  4814,  4815,  4821,  4825,  4831,  4834,  4835,  4836,
    4844,  4846,  4847,  4848,  4855,  4856,  4860,  4861,  4862,  4868,
    4869,  4871,  4872,  4874,  4875,  4878,  4882,  4886,  4888,  4890,
    4891,  4899,  4900,  4908,  4910,  4913,  4914,  4915,  4918,  4919,
    4922,  4923,  4925,  4927,  4929,  4931,  4935,  4937,  4941,  4943,
    4945,  4947,  4949,  4951,  4953,  4955,  4957,  4959,  4961,  4963,
    4965,  4967,  4969,  4971,  4973,  4975,  4977,  4979,  4981,  4983,
    4985,  4987,  4989,  4991,  4992,  4994,  4996,  4997,  5000,  5001,
    5003,  5004,  5005,  5009,  5010,  5011,  5015,  5018,  5019,  5020,
    5025,  5030,  5033,  5034,  5036,  5038,  5042,  5046,  5048,  5051,
    5052,  5054,  5055,  5060,  5065,  5068,  5069,  5071,  5073,  5074,
    5076,  5077,  5079,  5082,  5088,  5093,  5095,  5099,  5103,  5105,
    5107,  5109,  5111,  5113,  5115,  5116,  5119,  5123,  5128,  5130,
    5133,  5136,  5138,  5140,  5142,  5144,  5146,  5148,  5150,  5152,
    5154,  5156,  5158,  5160,  5162,  5164,  5166,  5168,  5170,  5172,
    5174,  5176,  5178,  5180,  5182,  5184,  5186,  5188,  5189,  5190,
    5197,  5198,  5200,  5204,  5206,  5210,  5211,  5214,  5218,  5220,
    5223,  5225,  5226,  5230,  5231,  5232,  5240,  5243,  5245,  5246,
    5250,  5251,  5259,  5260,  5268,  5273,  5280,  5285,  5290,  5295,
    5300,  5301,  5308,  5313,  5318,  5324,  5331,  5336,  5338,  5342,
    5344,  5347,  5349,  5353,  5355,  5356,  5359,  5360,  5362,  5363,
    5364,  5373,  5374,  5375,  5382,  5383,  5385,  5387,  5389,  5391,
    5393,  5396,  5398,  5400,  5402,  5406,  5411,  5412,  5416,  5420,
    5422,  5425,  5428,  5429,  5433,  5434,  5440,  5444,  5446,  5450,
    5452,  5456,  5458,  5460,  5461,  5463,  5464,  5469,  5470,  5472,
    5476,  5478,  5480,  5482,  5483,  5484,  5491,  5492,  5493,  5505,
    5509,  5511,  5515,  5519,  5521,  5525,  5526,  5528,  5529,  5534,
    5535,  5536,  5546,  5547,  5553,  5554,  5561,  5562,  5565,  5567,
    5571,  5574,  5579,  5580,  5583,  5584,  5587,  5589,  5591,  5593,
    5594,  5599,  5600,  5602,  5603,  5605,  5607,  5611,  5613,  5615,
    5618,  5621,  5624,  5626,  5628,  5630,  5632,  5633,  5637,  5638,
    5642,  5645,  5650,  5655,  5659,  5664,  5669,  5671,  5675,  5679,
    5683,  5687,  5694,  5697,  5700,  5701,  5708,  5709,  5717,  5723,
    5726,  5728,  5730,  5732,  5738,  5744,  5747,  5750,  5752,  5757,
    5761,  5764,  5768,  5771,  5774,  5776,  5780,  5785,  5789,  5793,
    5796,  5800,  5803,  5807,  5809,  5811,  5813,  5815,  5819,  5823,
    5827,  5831,  5835,  5839,  5843,  5847,  5851,  5853,  5855,  5857,
    5859,  5861,  5862,  5864,  5865,  5868,  5869,  5871,  5873,  5875,
    5876,  5879,  5880,  5883,  5884,  5887,  5890,  5891,  5896,  5897,
    5902,  5904,  5906,  5908,  5910,  5912,  5914,  5916,  5917,  5919,
    5921,  5922,  5924,  5926,  5927,  5932,  5933,  5934,  5940,  5942,
    5943,  5948,  5952,  5954,  5957,  5960,  5963,  5966,  5969,  5973,
    5976,  5978,  5980,  5982,  5984,  5987,  5989,  5991,  5993,  5995,
    5997,  5999,  6001,  6002,  6004,  6005,  6009,  6010,  6014,  6018,
    6020,  6021,  6026,  6028,  6031,  6032,  6034,  6035,  6039,  6043,
    6046,  6049,  6050,  6056,  6057,  6059,  6061,  6062,  6064,  6066,
    6069,  6071,  6074,  6076,  6079,  6080,  6081,  6082,  6083,  6106,
    6108,  6110,  6111,  6113,  6114,  6116,  6118,  6119,  6121,  6123,
    6124,  6127,  6130,  6132,  6136,  6141,  6145,  6149,  6150,  6153,
    6156,  6158,  6162,  6166,  6167,  6172,  6173,  6177,  6179,  6181,
    6182,  6186,  6189,  6193,  6195,  6197,  6200,  6201,  6204,  6208,
    6210,  6216,  6218,  6220,  6223,  6226,  6228,  6230,  6232,  6234,
    6236,  6238,  6241,  6244,  6246,  6248,  6250,  6252,  6254,  6256,
    6258,  6260,  6262,  6265,  6268,  6270,  6272,  6274,  6276,  6278,
    6281,  6284,  6287,  6289,  6291,  6295,  6301,  6303,  6305,  6307,
    6309,  6311,  6315,  6320,  6326,  6328,  6334,  6338,  6341,  6343,
    6347,  6350,  6353,  6358,  6360,  6362,  6364,  6366,  6368,  6370,
    6372,  6374,  6376,  6378,  6380,  6382,  6384,  6386,  6390,  6393,
    6395,  6397,  6399,  6401,  6403,  6405,  6407,  6409,  6411,  6413,
    6415,  6417,  6419,  6421,  6423,  6425,  6427,  6429,  6431,  6433,
    6435,  6437,  6439,  6441,  6443,  6445,  6447,  6449,  6451,  6453,
    6455,  6457,  6459,  6461,  6463,  6465,  6467,  6469,  6471,  6473,
    6475,  6477,  6479,  6481,  6483,  6485,  6487,  6489,  6491,  6493,
    6495,  6497,  6499,  6501,  6503,  6505,  6507,  6509,  6511,  6513,
    6515,  6517,  6519,  6521,  6523,  6525,  6527,  6529,  6531,  6533,
    6535,  6537,  6539,  6541,  6543,  6545,  6547,  6549,  6551,  6553,
    6555,  6557,  6559,  6561,  6563,  6565,  6567,  6569,  6571,  6573,
    6575,  6577,  6579,  6581,  6583,  6585,  6587,  6589,  6591,  6593,
    6595,  6597,  6599,  6601,  6603,  6605,  6607,  6609,  6611,  6613,
    6615,  6617,  6619,  6621,  6623,  6625,  6627,  6629,  6631,  6633,
    6635,  6637,  6639,  6641,  6643,  6645,  6647,  6649,  6651,  6653,
    6655,  6657,  6659,  6661,  6663,  6665,  6667,  6669,  6671,  6673,
    6675,  6677,  6679,  6681,  6683,  6685,  6687,  6689,  6691,  6693,
    6695,  6697,  6699,  6701,  6703,  6705,  6707,  6709,  6711,  6713,
    6715,  6717,  6719,  6721,  6723,  6725,  6727,  6729,  6731,  6733,
    6735,  6737,  6739,  6741,  6743,  6745,  6747,  6749,  6751,  6753,
    6755,  6757,  6759,  6761,  6763,  6765,  6767,  6769,  6771,  6773,
    6775,  6777,  6779,  6781,  6783,  6785,  6787,  6789,  6791,  6793,
    6795,  6797,  6799,  6801,  6803,  6805,  6807,  6809,  6811,  6813,
    6815,  6817,  6819,  6821,  6823,  6825,  6827,  6829,  6831,  6833,
    6835,  6837,  6839,  6841,  6843,  6845,  6847,  6849,  6851,  6853,
    6855,  6857,  6859,  6861,  6863,  6865,  6867,  6869,  6871,  6873,
    6875,  6877,  6879,  6881,  6883,  6885,  6887,  6889,  6891,  6893,
    6895,  6897,  6899,  6901,  6903,  6905,  6907,  6909,  6911,  6913,
    6915,  6917,  6919,  6921,  6923,  6925,  6927,  6929,  6931,  6933,
    6935,  6937,  6939,  6941,  6943,  6945,  6947,  6949,  6951,  6953,
    6955,  6957,  6959,  6961,  6963,  6965,  6967,  6969,  6971,  6973,
    6975,  6977,  6979,  6981,  6983,  6985,  6987,  6989,  6991,  6993,
    6995,  6997,  6999,  7001,  7003,  7005,  7007,  7009,  7011,  7013,
    7015,  7017,  7019,  7021,  7023,  7025,  7027,  7029,  7031,  7033,
    7035,  7037,  7039,  7041,  7043,  7045,  7047,  7049,  7051,  7053,
    7055,  7057,  7059,  7061,  7063,  7065,  7067,  7069,  7071,  7073,
    7075,  7077,  7079,  7081,  7083,  7085,  7087,  7089,  7091,  7093,
    7095,  7097,  7099,  7101,  7103,  7105,  7107,  7109,  7111,  7113,
    7115,  7117,  7119,  7121,  7123,  7125,  7127,  7129,  7131,  7133,
    7134,  7138,  7139,  7143,  7144,  7148,  7149,  7153,  7154,  7158,
    7161,  7162,  7165,  7166,  7169,  7170,  7175,  7176,  7180,  7182,
    7184,  7186,  7188,  7189,  7191,  7193,  7195,  7196,  7199,  7202,
    7205,  7209,  7213,  7218,  7225,  7228,  7232,  7236,  7239,  7243,
    7249,  7251,  7255,  7259,  7261,  7263,  7267,  7271,  7273,  7277,
    7280,  7283,  7286,  7289,  7292,  7294,  7296,  7301,  7306,  7308,
    7310,  7312,  7314,  7316,  7317,  7322,  7324,  7326,  7328,  7332,
    7336,  7338,  7340,  7343,  7346,  7349,  7350,  7354,  7359,  7363,
    7364,  7372,  7374,  7377,  7379,  7381,  7383,  7385,  7387,  7389,
    7390,  7396,  7398,  7400,  7402,  7404,  7406,  7410,  7417,  7424,
    7431,  7439,  7445,  7449,  7454,  7456,  7460,  7469,  7478,  7487,
    7494,  7499,  7500,  7504,  7505,  7509,  7511,  7515,  7518,  7520,
    7522,  7523,  7525,  7527,  7530,  7531,  7533,  7535,  7539,  7540,
    7544,  7545,  7549,  7550,  7554,  7555,  7559,  7561,  7563,  7565,
    7567,  7569,  7571,  7573,  7575,  7577,  7579,  7581,  7584,  7587,
    7589,  7593,  7596,  7599,  7602,  7605,  7608,  7611,  7614,  7617,
    7619,  7621,  7624,  7625,  7627,  7631,  7633,  7636,  7639,  7642,
    7644,  7648,  7652,  7654,  7656,  7660,  7662,  7666,  7668,  7672,
    7674,  7676,  7678,  7680,  7685,  7691,  7696,  7703,  7705,  7706,
    7710,  7714,  7716,  7718,  7719,  7722,  7725,  7728,  7731,  7732,
    7735,  7736,  7740,  7743,  7745,  7748,  7751,  7754,  7757,  7760,
    7761,  7765,  7766,  7768,  7769,  7773,  7776,  7777,  7779,  7782,
    7783,  7785,  7790,  7795,  7801,  7804,  7808,  7809,  7811,  7812,
    7817,  7818,  7820,  7822,  7823,  7825,  7826,  7829,  7832,  7834,
    7835,  7837,  7839,  7842,  7846,  7849,  7850,  7857,  7861,  7862,
    7863,  7864,  7866,  7869,  7871,  7873,  7875,  7877,  7879,  7881,
    7883,  7885,  7887,  7890,  7893,  7897,  7899,  7901,  7903,  7905,
    7907,  7909,  7911,  7913,  7915,  7917,  7919,  7921,  7923,  7924,
    7928,  7930,  7933,  7935,  7938,  7942,  7946,  7950,  7951,  7955,
    7959,  7960,  7968,  7969,  7973,  7975,  7979,  7980,  7984,  7987,
    7992,  7993,  7997,  8002,  8007,  8008,  8009,  8010,  8027,  8036,
    8044,  8045,  8046,  8047,  8048,  8049,  8065,  8066,  8067,  8068,
    8069,  8082,  8087,  8092,  8096,  8101,  8105,  8108,  8110,  8114,
    8120,  8122,  8124,  8125,  8127,  8129,  8130,  8133,  8134,  8135,
    8139,  8140,  8143,  8149,  8153,  8157,  8161
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     663,     0,    -1,   162,    -1,    -1,   666,   664,   658,   665,
      -1,   666,   162,    -1,    -1,   162,    -1,   667,    -1,  1583,
      -1,  1051,    -1,  1119,    -1,  1132,    -1,   721,    -1,   679,
      -1,  1133,    -1,  1111,    -1,  1589,    -1,   688,    -1,   668,
      -1,  1384,    -1,  1418,    -1,  1335,    -1,  1337,    -1,   672,
      -1,  1425,    -1,   757,    -1,  1549,    -1,  1539,    -1,   677,
      -1,  1348,    -1,  1653,    -1,  1655,    -1,  1146,    -1,  1445,
      -1,  1452,    -1,  1531,    -1,  1138,    -1,   965,    -1,   876,
      -1,  1153,    -1,   670,    -1,  1441,    -1,  1592,    -1,  1141,
      -1,  1114,    -1,  1351,    -1,  1435,    -1,   756,    -1,  1546,
      -1,  1590,    -1,  1591,    -1,  1165,    -1,  1504,    -1,   749,
      -1,  1404,    -1,  1450,    -1,  1098,    -1,  1101,    -1,  1397,
      -1,  1654,    -1,  1537,    -1,  1376,    -1,  1451,    -1,  1645,
      -1,   669,   412,  1497,    -1,   128,    -1,   150,    -1,   412,
    1497,   198,   671,    -1,  1494,    -1,   659,  1499,    -1,    -1,
     177,  1497,   673,   674,    -1,    -1,   607,   675,    -1,   675,
     654,   676,    -1,   676,    -1,   659,  1499,    -1,    -1,   219,
     678,  1499,    -1,    -1,    59,   312,   686,   573,   680,   681,
      -1,   682,    -1,   681,   654,   682,    -1,   297,   166,  1494,
      -1,   313,   166,  1494,    -1,   300,   166,  1494,    -1,   301,
     166,  1314,    -1,   295,   166,  1314,    -1,   310,   166,  1314,
      -1,   304,   166,  1494,    -1,   303,   166,  1494,    -1,   305,
     166,  1494,    -1,   306,   166,  1494,    -1,   309,   166,  1494,
      -1,   311,   166,  1314,    -1,   307,   166,  1494,    -1,   308,
     166,  1494,    -1,   315,   166,  1481,    -1,   235,   166,   652,
     683,   653,    -1,   685,    -1,    -1,   684,    -1,   683,   654,
     684,    -1,  1314,    -1,   298,   166,  1494,    -1,   299,   166,
    1316,    -1,   442,   166,  1494,    -1,   443,   166,  1314,    -1,
     314,   166,   111,    -1,   314,   166,   504,    -1,   314,   166,
     365,    -1,    -1,   687,    -1,  1494,    -1,    -1,   104,   927,
     556,   930,  1490,   689,   864,    -1,    -1,    -1,   104,  1028,
     238,   930,  1497,  1032,   375,  1490,   690,   652,  1045,   653,
    1033,   691,  1085,    -1,    -1,    -1,   104,  1029,   238,   930,
    1497,  1031,   375,  1490,   692,   652,  1045,   653,  1034,   693,
    1085,    -1,    -1,    -1,   104,  1030,   238,   930,  1497,  1031,
     375,  1490,   694,   652,  1045,   653,  1035,   695,  1085,    -1,
      -1,   104,   115,   930,  1497,   696,   924,    -1,    -1,   104,
     697,  1611,    -1,   104,   603,   714,  1570,    -1,   104,   469,
     714,  1553,  1551,    -1,   104,   286,   212,   827,    -1,   104,
     553,   824,    -1,   104,   698,    -1,   490,  1499,   195,   118,
     633,  1499,   381,   652,   699,   653,    -1,   700,    -1,   699,
     654,   700,    -1,   603,  1494,    -1,   223,  1494,    -1,   115,
    1494,    -1,   391,  1494,    -1,   402,  1494,    -1,   508,  1494,
      -1,   409,  1314,    -1,    -1,  1182,   173,   930,   715,   702,
     375,   479,   703,   708,   705,   710,   149,   711,    -1,    -1,
     174,  1188,  1284,   704,   706,   707,    -1,    24,  1188,    -1,
      -1,   158,    -1,   143,   375,   502,    -1,   143,    -1,    -1,
     528,  1188,    -1,    -1,   161,  1188,    -1,    -1,   709,    -1,
     375,    87,   413,    -1,   375,    87,   363,   413,    -1,    -1,
      83,  1494,    -1,    -1,   712,   713,    -1,   773,    -1,   775,
      -1,   771,    -1,   792,    -1,   810,    -1,   812,    -1,   807,
      -1,   777,    -1,   779,    -1,   780,    -1,   781,    -1,   782,
      -1,   784,    -1,    -1,  1497,   660,  1497,    -1,  1497,    -1,
      -1,   716,   718,    -1,    -1,   717,   719,    -1,    83,  1494,
      -1,   264,   524,    -1,   365,   524,    -1,    97,   524,    -1,
     428,   524,   118,    -1,   340,   524,   118,    -1,   720,    -1,
     718,    -1,   140,    -1,  1194,   140,    -1,   524,   483,   133,
      -1,   524,   483,   251,    -1,    -1,    52,   715,   722,   723,
      -1,    -1,   652,   724,   653,    -1,    -1,   725,    -1,   725,
     654,  1188,    -1,  1188,    -1,    -1,   727,    -1,   727,   654,
     729,    -1,   729,    -1,    -1,  1497,   728,   988,    -1,    -1,
     731,    -1,   731,   654,   732,    -1,   732,    -1,   733,   728,
    1497,   988,    -1,    -1,   252,    -1,   390,    -1,   243,    -1,
      -1,   734,   770,   658,    -1,   770,   658,    -1,   735,   770,
     658,    -1,    -1,   736,   737,   658,    -1,    -1,   131,   768,
     738,   988,   769,    -1,   131,  1497,    90,   196,   745,    -1,
      -1,   131,   742,   215,   196,   739,   743,   770,    -1,   131,
    1497,   112,   196,   740,    -1,    -1,   741,  1165,    -1,   179,
      -1,    99,    -1,   744,    -1,   743,   654,   744,    -1,   748,
      -1,  1314,    -1,   746,    -1,   516,   747,  1495,    -1,    -1,
     612,    -1,   745,    -1,  1497,    -1,   517,    -1,  1194,   197,
      -1,   515,    -1,   499,   750,   752,    -1,  1497,    -1,   746,
      -1,    -1,   750,    -1,    -1,   492,   753,    -1,   755,   166,
     754,    -1,   753,   654,   755,   166,   754,    -1,  1480,    -1,
    1219,    -1,  1486,    -1,    67,    -1,   540,    -1,    94,    -1,
      96,    -1,    95,    -1,    57,    -1,   480,    -1,   558,    -1,
      82,    -1,   113,    -1,   331,    -1,   348,    -1,   457,   751,
     752,    -1,   208,   758,   141,   759,    -1,    -1,   108,    -1,
     760,    -1,    90,   764,   765,    -1,   761,    -1,   760,   654,
     761,    -1,   762,   166,   763,    -1,  1497,    -1,   659,  1499,
      -1,   370,    -1,   476,    -1,   754,    -1,   766,    -1,   765,
     654,   766,    -1,   762,   166,   767,    -1,    67,    -1,   540,
      -1,    94,    -1,    96,    -1,    95,    -1,    57,    -1,   480,
      -1,   558,    -1,    82,    -1,   113,    -1,   331,    -1,   348,
      -1,   462,    -1,  1497,    -1,   768,   654,  1497,    -1,    -1,
     132,  1188,    -1,   773,    -1,   775,    -1,   771,    -1,   792,
      -1,   810,    -1,   812,    -1,   807,    -1,   777,    -1,   779,
      -1,   780,    -1,   781,    -1,   782,    -1,   784,    -1,    -1,
     233,   772,   787,   160,   233,    -1,    -1,   774,   667,    -1,
      -1,   465,   776,  1188,    -1,    -1,   778,   816,    -1,   270,
    1498,    -1,   258,  1498,    -1,   379,  1497,    -1,    -1,   187,
     785,  1497,   249,   783,   786,    -1,    70,  1497,    -1,    -1,
     359,   198,    -1,   198,    -1,  1497,    -1,   786,   654,  1497,
      -1,    -1,    -1,    -1,   788,  1188,   565,   789,   735,   790,
     791,    -1,    -1,   157,   787,    -1,   156,   735,    -1,   793,
      -1,   796,    -1,    -1,    -1,    55,   794,  1188,   795,   798,
     806,   160,    55,    -1,    -1,    55,   797,   799,   806,   160,
      55,    -1,   800,    -1,   798,   800,    -1,   803,    -1,   799,
     803,    -1,    -1,    -1,   626,   801,  1188,   802,   565,   735,
      -1,    -1,    -1,   626,   804,  1188,   805,   565,   735,    -1,
      -1,   156,   735,    -1,    -1,  1498,   661,   808,   816,   809,
      -1,    -1,  1498,    -1,    -1,  1498,   661,   811,   814,   809,
      -1,    -1,   813,   814,    -1,    -1,    33,   815,   736,   734,
     160,    -1,   292,   735,   160,   292,    -1,    -1,    -1,   628,
     817,  1188,   149,   818,   735,   160,   628,    -1,    -1,   452,
     735,   599,   819,  1188,   160,   452,    -1,    32,    -1,     9,
      -1,   245,    -1,   600,    -1,   136,    -1,   849,   851,    -1,
     849,    59,   846,   830,    -1,   849,     6,   846,   825,   834,
      -1,    -1,   606,   286,   212,  1497,    -1,   849,     6,   846,
     837,    -1,   849,   150,   846,   837,    -1,   850,   829,   840,
      -1,   850,   829,   843,    -1,     6,   847,    -1,     6,   848,
      -1,    -1,   831,   832,    -1,   833,    -1,   832,   833,    -1,
     832,   654,   833,    -1,   852,    -1,   853,    -1,   854,    -1,
     835,    -1,   836,    -1,   835,   836,    -1,   835,   654,   836,
      -1,   852,    -1,   853,    -1,   854,    -1,   855,    -1,   858,
      -1,   860,    -1,   862,    -1,   859,    -1,   838,    -1,   839,
      -1,   838,   839,    -1,   838,   654,   839,    -1,   852,    -1,
     853,    -1,   854,    -1,   860,    -1,   862,    -1,   841,    -1,
     842,    -1,   841,   842,    -1,   841,   654,   842,    -1,   852,
      -1,   856,    -1,   857,    -1,   858,    -1,   860,    -1,   862,
      -1,   859,    -1,   844,    -1,   845,    -1,   844,   845,    -1,
     844,   654,   845,    -1,   852,    -1,   860,    -1,   862,    -1,
     117,  1494,    -1,   589,  1494,    -1,   435,  1494,    -1,  1497,
      -1,  1497,    -1,   429,    -1,   431,    -1,   363,     4,    -1,
     241,  1368,   863,    -1,    26,  1368,   863,    -1,   320,  1368,
     863,    -1,   182,  1368,   863,    -1,   590,  1368,   863,    -1,
     436,  1368,   863,    -1,   360,  1368,  1315,    -1,    83,  1368,
    1494,    -1,  1411,   164,  1368,   938,    -1,    -1,   862,    -1,
     622,    -1,   366,    -1,  1317,    -1,  1493,    -1,    -1,   652,
     944,   653,   865,   931,   871,   868,    -1,   931,   871,   868,
      -1,    -1,   652,   920,   653,   866,  1596,    -1,   867,    -1,
     275,  1490,    -1,   652,   275,  1490,   653,    -1,    -1,    -1,
    1460,   923,   920,   869,  1593,    -1,    -1,  1460,   923,   652,
     920,   653,   870,  1596,    -1,   872,    -1,    -1,   873,    -1,
      -1,   399,   875,   874,   878,    -1,    -1,    -1,   399,   877,
     878,    -1,    49,   879,   888,   889,   896,    -1,   881,   262,
     652,   882,   653,    -1,    -1,   881,   217,   880,   886,    -1,
     427,   886,    -1,   427,   885,    -1,   280,   886,    -1,   280,
     885,    -1,    -1,   277,    -1,    -1,   883,    -1,   884,    -1,
     883,   654,   884,    -1,  1497,    -1,    75,   652,   882,   653,
      -1,   652,  1182,   894,  1183,   653,    -1,   652,  1182,   894,
    1183,   653,    -1,    -1,   400,  1315,    -1,    -1,    -1,   544,
      49,   881,   217,   887,   890,   895,    -1,    -1,   544,    49,
     881,   262,   652,   892,   653,   891,   895,    -1,   893,    -1,
     892,   654,   893,    -1,  1497,    -1,  1191,    -1,    -1,   543,
    1315,    -1,    -1,   652,   897,   653,    -1,   898,    -1,   897,
     654,   898,    -1,    -1,   399,   899,   900,   901,   917,   912,
      -1,  1497,    -1,    -1,    -1,   611,   272,   564,   902,   904,
      -1,    -1,   611,   252,   903,   905,    -1,   324,    -1,   907,
      -1,   907,    -1,   652,   906,   653,    -1,   907,    -1,   906,
     654,   907,    -1,    -1,    -1,   652,   908,   910,   909,   653,
      -1,   911,    -1,   910,   654,   911,    -1,   324,    -1,  1191,
      -1,    -1,   652,   913,   653,    -1,   914,    -1,   913,   654,
     914,    -1,    -1,   544,   915,   916,   917,    -1,  1499,    -1,
      -1,   918,    -1,   918,   919,    -1,   919,    -1,   553,  1368,
    1499,    -1,  1411,   164,  1368,   938,    -1,    91,  1368,  1494,
      -1,   360,  1368,  1315,    -1,   319,  1368,  1317,    -1,   337,
    1368,  1317,    -1,   118,   142,  1368,  1494,    -1,   238,   142,
    1368,  1494,    -1,    83,  1368,  1494,    -1,    -1,    -1,   484,
     921,  1176,  1180,   922,   942,    -1,    -1,    20,    -1,    -1,
     925,    -1,   926,    -1,   925,   926,    -1,   937,    -1,   936,
      -1,    -1,   928,    -1,   929,    -1,   929,   928,    -1,   559,
      -1,    -1,   233,  1194,   178,    -1,    -1,   933,    -1,   934,
      -1,   934,   932,    -1,   934,    -1,   934,   933,    -1,   934,
     654,   933,    -1,   164,  1368,   938,    -1,   319,  1368,  1316,
      -1,   337,  1368,  1316,    -1,    29,  1368,  1314,    -1,   402,
    1368,  1494,    -1,    83,  1368,  1494,    -1,    27,  1368,  1316,
      -1,   392,  1368,  1314,    -1,   392,  1368,   132,    -1,   530,
    1368,  1314,    -1,   530,  1368,   132,    -1,   531,  1368,  1314,
      -1,   531,  1368,   132,    -1,   532,  1368,  1314,    -1,   532,
    1368,   132,    -1,    64,  1368,  1314,    -1,   557,  1368,  1314,
      -1,   394,  1368,  1320,    -1,   135,  1368,  1314,    -1,   474,
    1368,   940,    -1,    -1,   594,  1368,   935,   652,  1433,   653,
      -1,   936,    -1,   937,    -1,   246,  1368,   941,    -1,   118,
     142,  1368,  1494,    -1,   238,   142,  1368,  1494,    -1,   553,
    1497,    -1,   537,   145,    -1,   537,   329,    -1,    91,  1368,
    1494,    -1,   261,  1368,  1314,    -1,   576,  1368,  1320,    -1,
    1493,  1367,  1494,    -1,  1493,  1367,  1497,    -1,  1493,  1367,
    1317,    -1,  1493,  1367,   132,    -1,  1000,   991,  1368,   993,
      -1,  1000,    73,  1368,   999,    -1,  1499,    -1,  1499,    -1,
     132,    -1,   190,    -1,   154,    -1,    88,    -1,   437,    -1,
      86,    -1,   393,    -1,   365,    -1,   189,    -1,   265,    -1,
    1307,    -1,  1175,  1179,    -1,   539,    -1,   432,    -1,   130,
      -1,   250,    -1,   945,    -1,   946,    -1,   945,   654,   946,
      -1,   947,    -1,   948,    -1,   957,   953,    -1,   957,  1017,
      -1,    -1,  1023,  1048,  1032,   652,  1045,   653,   949,  1033,
      -1,    -1,  1029,  1026,  1048,  1031,   652,  1045,   653,   950,
    1034,    -1,    -1,  1030,  1026,  1048,  1031,   652,  1045,   653,
     951,  1035,    -1,    -1,   955,  1024,  1048,  1032,   652,  1045,
     653,   952,  1033,    -1,   955,   195,   262,  1048,   652,  1045,
     653,  1017,    -1,   955,   954,    -1,    -1,   954,    -1,    65,
     652,  1188,   653,    -1,    -1,   956,    -1,    93,  1047,    -1,
      -1,  1489,   958,   959,    -1,   967,   985,    -1,   967,   960,
      20,   652,   966,   653,   961,   962,    -1,    -1,   204,    15,
      -1,    -1,   621,    -1,   403,    -1,    -1,   963,    -1,   963,
     964,    -1,   964,    -1,   595,    -1,   595,   262,    -1,    83,
    1494,    -1,   397,   652,   966,   653,    -1,  1182,  1188,  1183,
      -1,   975,   983,   979,    -1,   976,   984,   979,    -1,   192,
     977,   979,    -1,    41,    -1,    41,   982,    -1,    46,    -1,
      45,    -1,   971,   982,  1003,    -1,   971,  1003,    -1,   972,
     982,  1004,    -1,   972,  1004,    -1,    36,   982,    -1,    36,
      -1,   973,   982,  1003,    -1,   974,   982,  1004,    -1,   613,
     982,    -1,   640,   983,   979,    -1,   122,    -1,   569,   983,
      -1,   566,   983,    -1,   119,   983,    -1,   570,    -1,    43,
     983,    -1,   970,    -1,   325,    -1,   288,    -1,   291,   613,
      -1,   291,   973,  1003,    -1,   572,  1003,    -1,   563,   983,
    1003,    -1,   327,  1003,    -1,   289,  1003,    -1,   130,   977,
     979,    -1,   371,   977,   979,    -1,   190,   977,   979,    -1,
      -1,   165,   968,   652,  1050,   653,  1003,    -1,    -1,   492,
     969,   652,  1050,   653,  1003,    -1,   291,  1003,    -1,   488,
      -1,   206,    -1,   205,    -1,   407,    -1,   345,    -1,   279,
      -1,   344,    -1,   408,    -1,   346,    -1,    62,    -1,   354,
      -1,   351,    62,    -1,   971,   617,    -1,   614,    -1,   351,
     614,    -1,   372,    -1,   354,   614,    -1,   351,    62,   617,
      -1,   354,   617,    -1,   250,    -1,   571,    -1,   506,    -1,
     326,    -1,    35,    -1,   432,    -1,   148,    -1,   148,   411,
      -1,    -1,   982,    -1,   978,    -1,   652,   369,   654,   369,
     653,    -1,    -1,   980,    -1,   980,   981,    -1,   981,    -1,
     500,    -1,   598,    -1,   641,    -1,   652,   290,   653,    -1,
     652,   585,   653,    -1,   652,   129,   653,    -1,   652,   369,
     653,    -1,    -1,   982,    -1,    -1,   978,    -1,    -1,   986,
      -1,   986,   987,    -1,   987,    -1,   368,    -1,  1194,   368,
      -1,   132,   989,    -1,   375,   600,   364,  1185,    -1,    27,
      -1,   488,   132,   612,    -1,  1016,   262,    -1,   595,    -1,
     595,   262,    -1,    83,  1494,    -1,    73,   997,    -1,  1493,
    1367,  1494,    -1,  1493,  1367,  1497,    -1,  1493,  1367,  1317,
      -1,  1493,  1367,   132,    -1,   967,   998,    -1,   364,  1185,
      -1,  1479,    -1,   220,    -1,   221,    -1,    62,   492,    -1,
      61,    -1,  1499,    -1,    36,    -1,   992,    -1,   132,    -1,
      -1,   991,   993,    -1,  1499,    -1,    36,    -1,   995,    -1,
     132,    -1,  1499,    -1,    -1,    73,   999,    -1,   997,    -1,
     132,    -1,    -1,   132,    -1,    22,    -1,    36,    22,    -1,
      22,    36,    -1,   592,    -1,   592,    36,    -1,    36,   592,
      -1,    -1,  1001,    -1,  1002,    -1,    50,    -1,   991,   992,
    1004,    -1,    36,    -1,    36,   991,   992,    -1,    -1,    36,
      -1,    -1,   652,  1315,  1006,   653,    -1,    21,    -1,   137,
      -1,   466,    -1,    -1,  1007,    -1,  1007,  1008,    -1,  1008,
      -1,  1315,    -1,  1010,  1009,    -1,  1011,    -1,  1012,   654,
    1011,    -1,  1010,   645,  1010,    -1,  1012,    -1,  1013,    -1,
      -1,   273,  1014,    -1,    -1,   415,    -1,   438,  1490,  1018,
    1020,  1021,    -1,    -1,   652,  1019,   653,    -1,  1019,   654,
    1497,    -1,  1497,    -1,    -1,   316,   199,    -1,   316,   398,
      -1,   316,   501,    -1,    -1,   375,   600,  1022,    -1,   375,
     136,  1022,    -1,   375,   600,  1022,   375,   136,  1022,    -1,
     375,   136,  1022,   375,   600,  1022,    -1,   460,    -1,    53,
      -1,   492,   368,    -1,   365,     5,    -1,   492,   132,    -1,
    1025,    -1,   415,   262,    -1,   595,  1026,    -1,   262,    -1,
     238,    -1,    -1,  1025,    -1,   260,    -1,   238,    -1,   237,
      -1,    -1,   595,    -1,   200,    -1,   513,    -1,    -1,  1031,
      -1,  1031,  1039,    -1,    -1,  1036,    -1,    -1,  1038,    -1,
      -1,  1037,    -1,  1041,    -1,  1036,  1041,    -1,  1042,    -1,
    1037,  1042,    -1,  1043,    -1,  1038,  1043,    -1,   607,  1044,
      -1,   583,  1044,    -1,   261,  1368,  1314,    -1,    83,  1494,
      -1,  1493,  1367,  1494,    -1,  1493,  1367,  1497,    -1,  1493,
    1367,  1317,    -1,  1493,  1367,   132,    -1,  1040,    -1,  1039,
      -1,  1040,    -1,  1040,    -1,   629,   396,  1493,    -1,    48,
      -1,   477,    -1,   217,    -1,  1045,   654,  1046,  1305,    -1,
    1046,  1305,    -1,  1497,    -1,  1497,   652,   369,   653,    -1,
      -1,  1489,    -1,   930,  1047,    -1,    -1,   660,  1497,    -1,
    1477,    -1,  1050,   654,  1477,    -1,    -1,    -1,    14,  1052,
    1090,   556,  1490,  1053,  1064,    -1,    -1,    14,   115,  1063,
    1054,   925,    -1,    14,   115,  1497,   601,   118,   142,   350,
      -1,    -1,    14,   417,   715,  1055,   716,    -1,    -1,    14,
     201,   715,  1056,   716,    -1,    -1,    14,  1619,  1614,  1057,
    1621,    -1,    -1,    14,  1614,  1058,  1621,    -1,    -1,    14,
    1614,   173,   715,  1059,  1060,  1061,   705,   710,  1062,    -1,
      14,   553,   826,    -1,    14,   286,   212,   828,    -1,    14,
     553,   823,    -1,    14,   553,   822,    -1,    14,   490,  1499,
     381,   652,   699,   653,    -1,    -1,   375,   479,   703,    -1,
     709,    -1,   375,   479,   703,   709,    -1,    -1,   448,   573,
     715,    -1,    -1,   149,   711,    -1,    -1,  1497,    -1,    -1,
     144,   553,    -1,   236,   553,    -1,  1079,   872,    -1,  1079,
    1068,    -1,  1068,    -1,   873,    -1,  1070,    -1,   150,   399,
    1346,  1077,    -1,   433,   399,  1140,  1069,    -1,    -1,   380,
     399,  1140,  1069,  1065,  1140,    -1,    16,   399,  1140,  1069,
      -1,    -1,    65,   399,  1069,  1066,  1135,    -1,    -1,   450,
     399,  1140,  1069,  1067,  1116,    -1,    71,   399,  1140,  1315,
      -1,   581,   399,  1069,    -1,  1073,    -1,   175,   399,  1078,
     629,   556,  1490,   875,    -1,   447,   401,    -1,    13,    -1,
    1077,    -1,    -1,     6,   399,   930,  1140,  1071,  1072,    -1,
      -1,   652,   897,   653,    -1,   400,  1315,    -1,    -1,   449,
     399,  1140,  1074,  1075,    -1,    -1,    -1,  1077,  1076,   249,
     652,   897,   653,    -1,  1078,    -1,  1077,   654,  1078,    -1,
    1497,    -1,  1081,    -1,  1079,   654,  1081,    -1,     6,  1088,
     930,    -1,  1080,   947,  1096,    -1,     6,   948,    -1,  1080,
     652,   944,   653,    -1,    -1,    59,  1088,  1346,  1489,  1082,
     957,  1096,    -1,    -1,    -1,   341,  1088,  1346,  1489,  1083,
     959,  1084,  1096,    -1,   150,  1088,  1346,  1489,  1095,    -1,
     150,   195,   262,  1346,  1489,    -1,   150,   415,   262,    -1,
     150,  1025,  1346,  1489,    -1,   143,   260,    -1,   158,   260,
      -1,    14,  1088,  1489,   492,   132,  1479,    -1,    14,  1088,
    1489,   150,   132,    -1,   448,  1097,  1490,    -1,   101,   573,
     991,   993,   998,    -1,   932,    -1,   194,    -1,  1298,    -1,
    1086,    -1,  1087,    -1,    -1,  1087,    -1,  1086,    -1,  1087,
    1086,    -1,  1086,  1087,    -1,    12,  1368,   132,    -1,    12,
    1368,  1497,    -1,   285,  1368,   132,    -1,   285,  1368,  1497,
      -1,    -1,    81,    -1,    -1,   234,    -1,    -1,  1091,  1092,
      -1,    -1,  1093,    -1,  1093,  1094,    -1,  1094,    -1,   234,
      -1,   378,    -1,    -1,   460,    -1,    53,    -1,    -1,     9,
    1497,    -1,   189,    -1,    -1,   573,    -1,   166,    -1,    20,
      -1,    -1,   529,   502,   686,  1105,  1099,  1109,    -1,    -1,
     529,    13,   503,  1105,  1100,    -1,   536,   502,   686,  1105,
      -1,   536,    13,   503,  1105,    -1,   529,   575,  1102,    -1,
      -1,  1103,    -1,  1104,    -1,  1103,   654,  1104,    -1,   629,
      92,   507,    -1,   430,   377,    -1,   430,   634,    -1,    -1,
    1106,  1107,    -1,  1108,    -1,  1107,   654,  1108,    -1,    -1,
     525,    -1,   444,    -1,    -1,   599,  1110,    -1,   599,   296,
     166,  1494,    -1,   685,    -1,  1110,   654,   685,    -1,    -1,
      64,  1533,  1112,  1341,  1113,    -1,    -1,   426,    -1,   181,
      -1,    -1,   450,  1140,  1533,  1115,  1341,  1116,    -1,    -1,
    1117,    -1,  1118,    -1,  1118,  1117,    -1,   426,    -1,   181,
      -1,   605,    -1,    -1,    16,  1140,  1533,  1120,  1121,    -1,
    1122,    -1,  1121,   654,  1122,    -1,  1342,  1123,    -1,    -1,
     403,   196,  1124,    -1,    13,    -1,    75,  1125,   237,  1127,
      -1,    13,    -1,    -1,   652,  1126,  1129,   653,    -1,    13,
      -1,    -1,   652,  1128,  1130,   653,    -1,    -1,  1497,    -1,
    1129,   654,  1497,    -1,    -1,  1131,    -1,  1130,   654,  1131,
      -1,  1497,    -1,   415,    -1,    37,  1494,    -1,    -1,    65,
    1533,  1134,  1341,  1135,    -1,    -1,  1136,    -1,  1137,    -1,
    1137,  1136,    -1,   426,    -1,   185,    -1,   328,    -1,   181,
      -1,    60,    -1,   196,   601,    -1,    -1,   380,  1140,  1533,
    1139,  1341,    -1,    -1,   367,    -1,   282,    -1,    -1,   448,
    1533,  1142,  1144,    -1,   448,   603,   714,  1143,    -1,  1500,
     573,  1500,    -1,  1143,   654,  1500,   573,  1500,    -1,  1145,
      -1,  1144,   654,  1145,    -1,  1490,   573,  1490,    -1,    -1,
      51,   238,  1147,  1148,   252,  1152,    -1,  1149,    -1,  1151,
      -1,  1150,    -1,  1149,   654,  1150,    -1,  1490,  1161,    -1,
    1490,  1159,  1161,    -1,  1497,    -1,   132,    -1,    -1,   281,
     238,   249,    51,  1154,  1155,    -1,  1158,    -1,  1156,    -1,
    1157,    -1,  1156,   654,  1157,    -1,  1490,  1161,  1164,    -1,
    1490,  1159,  1161,  1164,    -1,    -1,   399,   875,  1160,   652,
    1069,   653,    -1,    -1,  1162,  1163,    -1,    -1,  1025,   652,
    1280,   653,    -1,    -1,   234,   269,    -1,  1166,    -1,   484,
    1169,    -1,   652,  1167,   653,  1596,    -1,   484,  1171,    -1,
     652,  1167,   653,    -1,   484,  1259,    -1,   652,  1168,   653,
      -1,    -1,  1171,  1170,  1593,    -1,    -1,    -1,  1172,  1176,
    1180,  1173,  1174,  1179,    -1,  1301,  1307,    -1,  1330,    -1,
    1175,    -1,  1330,  1175,    -1,  1175,  1330,    -1,   198,  1239,
    1290,  1295,  1292,  1301,  1307,  1321,    -1,   198,   151,  1290,
    1307,    -1,    -1,  1177,    -1,  1177,  1178,    -1,  1178,    -1,
    1610,    -1,   522,    -1,   520,    -1,    -1,   196,   600,    -1,
     285,   252,   494,   339,    -1,  1180,   654,  1181,    -1,  1181,
      -1,   647,    -1,  1182,  1484,  1183,    -1,  1182,  1188,  1183,
    1184,    -1,    -1,    -1,    -1,    20,  1497,    -1,    20,  1494,
      -1,  1497,    -1,  1494,    -1,    -1,   652,   653,    -1,   652,
    1315,   653,    -1,    -1,   652,   653,    -1,   652,  1315,   653,
      -1,    -1,   652,   653,    -1,  1188,  1192,  1188,    -1,  1188,
     638,  1188,    -1,  1188,  1193,  1188,    -1,   363,  1188,    -1,
    1189,   255,   580,    -1,  1189,   255,  1194,   580,    -1,  1189,
     255,   184,    -1,  1189,   255,  1194,   184,    -1,  1189,   255,
     596,    -1,  1189,   255,  1194,   596,    -1,  1189,    -1,  1189,
     255,   368,    -1,  1189,   255,  1194,   368,    -1,  1189,   167,
    1190,    -1,  1189,  1196,  1190,    -1,  1189,  1196,  1197,   652,
    1605,   653,    -1,  1190,    -1,  1191,   252,   652,  1605,   653,
      -1,  1191,  1194,   252,   652,  1605,   653,    -1,  1191,   252,
     652,  1188,   653,    -1,  1191,   252,   652,  1188,   654,  1232,
     653,    -1,  1191,  1194,   252,   652,  1188,   653,    -1,  1191,
    1194,   252,   652,  1188,   654,  1232,   653,    -1,  1191,    34,
    1191,    18,  1190,    -1,  1191,  1194,    34,  1191,    18,  1190,
      -1,  1191,   511,   275,  1191,    -1,  1191,   275,  1202,  1294,
      -1,  1191,  1194,   275,  1202,  1294,    -1,  1191,   439,  1191,
      -1,  1191,  1194,   439,  1191,    -1,  1191,    -1,  1191,   643,
    1191,    -1,  1191,   644,  1191,    -1,  1191,   495,  1191,    -1,
    1191,   496,  1191,    -1,  1191,   646,  1191,    -1,  1191,   645,
    1191,    -1,  1191,   646,   248,  1188,  1284,    -1,  1191,   645,
     248,  1188,  1284,    -1,  1191,   647,  1191,    -1,  1191,   648,
    1191,    -1,  1191,   649,  1191,    -1,  1191,   147,  1191,    -1,
    1191,   342,  1191,    -1,  1191,   650,  1191,    -1,  1202,    -1,
     387,    -1,   384,    -1,    18,    -1,    17,    -1,   363,    -1,
     362,    -1,   655,    -1,   362,    -1,   166,    -1,   202,    -1,
     214,    -1,   267,    -1,   294,    -1,   356,    -1,    13,    -1,
      19,    -1,    -1,    20,  1199,    -1,   250,    -1,   598,   250,
      -1,   148,    -1,   432,    -1,   192,    -1,   130,   977,    -1,
     971,  1003,    -1,   972,    -1,   122,    -1,   569,   983,    -1,
     119,   983,    -1,  1188,   654,  1188,  1198,    -1,  1200,    -1,
    1201,   654,  1200,    -1,  1486,    -1,  1203,    -1,  1204,    -1,
    1207,    -1,  1205,    -1,  1202,    73,  1499,    -1,  1480,    -1,
    1478,    -1,  1219,    -1,  1215,    -1,  1202,   386,  1202,    -1,
     646,  1202,    -1,   645,  1202,    -1,   651,  1202,    -1,  1195,
    1202,    -1,   652,  1605,   653,    -1,   652,  1188,   653,    -1,
     652,  1188,   654,  1232,   653,    -1,   475,   652,  1188,   654,
    1232,   653,    -1,   178,   652,  1605,   653,    -1,   656,  1497,
    1188,   657,    -1,   316,  1233,    10,   652,  1191,  1209,   653,
      -1,    36,  1202,    -1,    56,   652,  1188,    20,  1229,   653,
      -1,    55,  1235,  1237,  1236,   160,    -1,   101,   652,  1188,
     654,  1229,   653,    -1,   101,   652,  1188,   607,   992,   653,
      -1,   132,   652,  1486,   653,    -1,   611,   652,  1487,   653,
      -1,   248,  1188,  1284,   646,  1188,    -1,    62,   652,  1232,
     653,    -1,    62,   652,  1232,   607,   992,   653,    -1,   109,
    1187,    -1,   110,  1187,    -1,   122,   652,  1188,   653,    -1,
     127,   652,  1188,   653,    -1,   228,   652,  1188,   653,    -1,
     245,   652,  1188,   654,  1188,   654,  1188,   654,  1188,   653,
      -1,   248,   652,  1188,   654,  1188,   653,    -1,   248,   652,
    1188,   654,  1188,   654,  1232,   653,    -1,   271,   652,  1188,
     654,  1188,   653,    -1,   336,   652,  1188,   653,    -1,   343,
     652,  1188,   653,    -1,   468,   652,  1188,   654,  1188,   653,
      -1,   482,   652,  1188,   653,    -1,   569,   652,  1188,   653,
      -1,   566,   652,  1188,   653,    -1,   566,   652,  1188,   654,
    1188,   653,    -1,   579,   652,  1188,   653,    -1,   579,   652,
     268,  1188,   198,  1188,   653,    -1,   579,   652,   574,  1188,
     198,  1188,   653,    -1,   579,   652,    47,  1188,   198,  1188,
     653,    -1,   579,   652,   268,   198,  1188,   653,    -1,   579,
     652,   574,   198,  1188,   653,    -1,   579,   652,    47,   198,
    1188,   653,    -1,   579,   652,  1188,   198,  1188,   653,    -1,
     603,   652,   653,    -1,   640,   652,  1188,   653,    -1,     8,
     652,  1188,   654,  1188,   653,    -1,     8,   652,  1188,   654,
     248,  1188,  1284,   653,    -1,   107,  1187,    -1,   114,  1186,
      -1,   120,   652,  1188,   654,   248,  1188,  1284,   653,    -1,
     121,   652,  1188,   654,   248,  1188,  1284,   653,    -1,   183,
     652,  1284,   198,  1188,   653,    -1,   207,   652,  1286,   654,
    1188,   653,    -1,   364,  1186,    -1,   410,   652,  1191,   252,
    1188,   653,    -1,   541,   652,  1188,   654,  1188,   653,    -1,
     541,   652,  1188,   654,   248,  1188,  1284,   653,    -1,   545,
     652,  1188,   654,  1188,   654,  1188,   653,    -1,   545,   652,
    1188,   654,  1188,   653,    -1,   545,   652,  1188,   198,  1188,
     196,  1188,   653,    -1,   545,   652,  1188,   198,  1188,   653,
      -1,   551,  1186,    -1,   567,   652,  1285,   654,  1188,   654,
    1188,   653,    -1,   568,   652,  1285,   654,  1188,   654,  1188,
     653,    -1,   608,  1187,    -1,   610,  1186,    -1,   609,  1186,
      -1,    76,   652,  1188,   654,  1201,   653,    -1,    79,   652,
    1188,   654,  1232,   653,    -1,    77,   652,  1188,   653,    -1,
      78,   652,  1201,   653,    -1,    80,   652,  1188,   654,  1188,
      20,  1229,   653,    -1,    22,   652,  1188,   653,    -1,    61,
     652,  1188,   653,    -1,    71,   652,  1232,   653,    -1,    74,
     652,  1188,   653,    -1,   115,   652,   653,    -1,   233,   652,
    1188,   654,  1188,   654,  1188,   653,    -1,   266,   652,  1232,
     653,    -1,   332,   652,  1188,   653,    -1,   342,   652,  1188,
     654,  1188,   653,    -1,   374,   652,  1188,   653,    -1,   402,
     652,  1188,   653,    -1,   424,   652,  1188,   653,    -1,   452,
     652,  1188,   654,  1188,   653,    -1,   453,   652,  1188,   654,
    1188,   654,  1188,   653,    -1,   466,   652,  1188,   653,    -1,
     476,   652,   653,    -1,   581,   652,  1188,   654,  1188,   653,
      -1,   624,   652,  1188,   653,    -1,   624,   652,  1188,   654,
    1188,   653,    -1,   625,   652,  1188,  1015,   653,    -1,   625,
     652,  1188,    20,    62,  1005,  1015,   653,    -1,   625,   652,
    1188,    20,    36,  1005,   653,    -1,   625,   652,  1188,   654,
    1314,   654,  1314,   654,  1314,   653,    -1,  1206,    -1,    97,
     652,  1188,   654,  1188,   653,    -1,   205,   652,  1232,   653,
      -1,   279,   652,  1232,   653,    -1,   344,   652,  1232,   653,
      -1,   345,   652,  1232,   653,    -1,   346,   652,  1232,   653,
      -1,   407,   652,  1188,   654,  1188,   653,    -1,   408,   652,
    1232,   653,    -1,    -1,  1493,   652,  1208,  1212,   653,    -1,
    1497,   660,  1497,   652,  1231,   653,    -1,  1210,  1211,    -1,
     252,    45,   339,    -1,    -1,   252,   352,   264,   339,    -1,
      -1,   629,   425,   180,    -1,    -1,  1213,    -1,  1214,    -1,
    1213,   654,  1214,    -1,  1182,  1188,  1183,  1184,    -1,    30,
     652,  1227,   653,    -1,    30,   652,   146,  1227,   653,    -1,
      39,   652,  1227,   653,    -1,    40,   652,  1227,   653,    -1,
      42,   652,  1227,   653,    -1,   102,   652,  1289,   647,   653,
      -1,   102,   652,  1227,   653,    -1,    -1,    -1,   102,   652,
     146,  1216,  1232,  1217,   653,    -1,   338,   652,  1227,   653,
      -1,   338,   652,   146,  1227,   653,    -1,   321,   652,  1227,
     653,    -1,   321,   652,   146,  1227,   653,    -1,   535,   652,
    1227,   653,    -1,   616,   652,  1227,   653,    -1,   534,   652,
    1227,   653,    -1,   618,   652,  1227,   653,    -1,   546,   652,
    1227,   653,    -1,   546,   652,   146,  1227,   653,    -1,    -1,
     213,   652,  1222,  1218,  1232,  1224,  1223,   653,    -1,    -1,
     659,  1220,  1221,    -1,  1499,   493,  1188,    -1,  1499,    -1,
     659,  1520,  1499,  1049,    -1,    -1,   146,    -1,    -1,   486,
    1477,    -1,    -1,    -1,   385,    49,  1225,  1226,    -1,  1226,
     654,  1485,  1305,    -1,  1485,  1305,    -1,    -1,  1289,  1228,
    1188,    -1,    36,   983,    -1,    62,   983,  1003,    -1,   354,
     983,    -1,   250,    -1,   500,    -1,   500,   250,    -1,   598,
      -1,   598,   250,    -1,   122,    -1,   569,   983,    -1,   119,
     983,    -1,   130,   977,    -1,    -1,   148,  1230,   984,    -1,
      -1,  1232,    -1,  1188,    -1,  1232,   654,  1188,    -1,  1234,
      -1,   652,  1234,   653,    -1,  1486,    -1,  1234,   654,  1486,
      -1,    -1,  1188,    -1,    -1,   156,  1188,    -1,   626,  1188,
     565,  1188,    -1,  1237,   626,  1188,   565,  1188,    -1,  1253,
      -1,  1242,    -1,  1241,    -1,  1238,    -1,   656,  1497,  1238,
     657,    -1,  1240,    -1,  1241,   654,  1240,    -1,  1238,  1250,
    1238,    -1,    -1,  1238,  1250,  1238,   375,  1243,  1188,    -1,
      -1,  1238,  1250,  1238,   607,  1244,   652,  1283,   653,    -1,
    1238,   352,  1249,  1253,    -1,    -1,  1238,   271,  1269,   259,
    1238,   375,  1245,  1188,    -1,    -1,  1238,   271,  1269,   259,
    1253,  1246,   607,   652,  1283,   653,    -1,  1238,   352,   271,
    1269,   259,  1253,    -1,    -1,  1238,   468,  1269,   259,  1238,
     375,  1247,  1188,    -1,    -1,  1238,   468,  1269,   259,  1253,
    1248,   607,   652,  1283,   653,    -1,  1238,   352,   468,  1269,
     259,  1253,    -1,   259,    -1,   242,   259,    -1,   538,    -1,
    1249,    -1,   105,   259,    -1,    -1,  1252,    -1,   399,   652,
    1283,   653,   875,    -1,    -1,  1254,  1490,  1251,  1288,  1278,
      -1,  1268,  1267,  1264,    -1,   652,  1267,  1255,   653,  1288,
      -1,  1262,  1597,    -1,    -1,    -1,  1255,   594,  1601,  1256,
    1602,  1257,  1597,    -1,  1259,    -1,    -1,    -1,  1260,  1608,
    1180,  1261,   942,  1179,    -1,    -1,  1267,  1263,  1241,    -1,
      -1,    -1,  1265,  1176,  1180,  1266,   942,    -1,    -1,   484,
      -1,    -1,   388,    -1,    -1,   196,   259,    -1,   196,   385,
      49,    -1,   196,   212,    49,    -1,   194,    -1,   234,    -1,
      -1,  1271,  1025,  1270,  1273,   652,  1282,   653,    -1,    -1,
     606,  1025,  1270,  1274,   652,  1280,   653,    -1,  1272,    -1,
    1275,  1272,    -1,    -1,    -1,  1277,  1275,    -1,    -1,  1279,
    1276,    -1,    -1,  1282,    -1,  1497,    -1,   415,    -1,  1281,
      -1,  1282,   654,  1281,    -1,  1497,    -1,  1283,   654,  1497,
      -1,  1285,    -1,   123,    -1,   124,    -1,   125,    -1,   126,
      -1,   225,    -1,   226,    -1,   227,    -1,   334,    -1,   335,
      -1,   481,    -1,   639,    -1,   127,    -1,   624,    -1,   228,
      -1,   336,    -1,   343,    -1,   424,    -1,   482,    -1,   332,
      -1,   640,    -1,   122,    -1,   569,    -1,   119,    -1,   566,
      -1,    -1,    20,    -1,   166,    -1,    -1,  1287,  1497,    -1,
      -1,    13,    -1,    -1,    -1,   627,  1291,  1188,    -1,    -1,
      -1,   218,  1293,  1188,    -1,   171,  1202,    -1,    -1,    -1,
     212,    49,  1296,  1297,    -1,  1296,   654,  1485,  1305,    -1,
    1485,  1305,    -1,    -1,   630,    -1,   631,    -1,   385,    49,
    1299,    -1,  1299,   654,  1300,    -1,  1300,    -1,  1487,  1305,
      -1,    -1,  1302,    -1,    -1,   385,    49,  1303,  1304,    -1,
    1304,   654,  1485,  1305,    -1,  1485,  1305,    -1,    -1,    21,
      -1,   137,    -1,    -1,  1308,    -1,    -1,  1308,    -1,   276,
    1309,    -1,   276,  1309,   473,   176,  1311,    -1,   276,   473,
     176,  1311,    -1,  1310,    -1,  1310,   654,  1310,    -1,  1310,
     373,  1310,    -1,  1497,    -1,  1478,    -1,   585,    -1,   290,
      -1,   369,    -1,  1310,    -1,    -1,   276,  1310,    -1,   276,
     473,   176,    -1,   276,  1310,   473,   176,    -1,   369,    -1,
     645,   369,    -1,   645,   290,    -1,   369,    -1,   220,    -1,
     290,    -1,   585,    -1,   129,    -1,   191,    -1,   369,    -1,
     220,    -1,   290,    -1,   585,    -1,  1318,    -1,   369,    -1,
     585,    -1,   290,    -1,   129,    -1,   191,    -1,   369,    -1,
     585,    -1,   220,    -1,   290,    -1,  1318,    -1,  1319,    -1,
     129,    -1,   191,    -1,  1314,    -1,   132,    -1,    -1,    -1,
     417,  1497,  1322,   652,  1323,   653,    -1,    -1,  1324,    -1,
    1324,   654,  1325,    -1,  1325,    -1,  1182,  1188,  1183,    -1,
      -1,  1327,  1328,    -1,  1328,   654,  1329,    -1,  1329,    -1,
     659,  1499,    -1,  1499,    -1,    -1,   249,  1331,  1332,    -1,
      -1,    -1,   389,  1496,  1333,   994,  1334,  1461,  1464,    -1,
     152,  1496,    -1,  1326,    -1,    -1,   149,  1336,  1232,    -1,
      -1,   150,  1347,  1533,  1346,  1338,  1341,  1095,    -1,    -1,
     150,   238,  1346,  1497,   375,  1490,  1339,    -1,   150,   115,
    1346,  1497,    -1,   150,   201,  1346,  1497,   660,  1497,    -1,
     150,   201,  1346,  1497,    -1,   150,   417,  1346,   715,    -1,
     150,   603,   714,  1569,    -1,   150,   469,   714,  1553,    -1,
      -1,   150,   620,  1346,  1340,  1341,  1095,    -1,   150,   173,
    1346,   715,    -1,   150,   578,  1346,   715,    -1,   150,   553,
     849,   860,   861,    -1,   150,   286,   212,   850,   860,   861,
      -1,   150,   490,  1346,  1499,    -1,  1342,    -1,  1341,   654,
    1342,    -1,  1490,    -1,  1490,  1251,    -1,  1345,    -1,  1344,
     654,  1345,    -1,  1491,    -1,    -1,   233,   178,    -1,    -1,
     559,    -1,    -1,    -1,   245,  1349,  1354,  1089,  1356,  1350,
    1358,  1374,    -1,    -1,    -1,   453,  1352,  1355,  1356,  1353,
    1358,    -1,    -1,   293,    -1,   134,    -1,   222,    -1,  1383,
      -1,   134,    -1,   249,  1357,    -1,  1357,    -1,  1343,    -1,
    1361,    -1,   652,   653,  1361,    -1,   652,  1360,   653,  1361,
      -1,    -1,   492,  1359,  1365,    -1,  1360,   654,  1483,    -1,
    1483,    -1,   611,  1364,    -1,   612,  1364,    -1,    -1,   920,
    1362,  1593,    -1,    -1,   652,   920,   653,  1363,  1596,    -1,
    1364,   654,  1369,    -1,  1369,    -1,  1365,   654,  1366,    -1,
    1366,    -1,  1487,  1367,  1373,    -1,   166,    -1,   493,    -1,
      -1,  1367,    -1,    -1,   652,  1370,  1371,   653,    -1,    -1,
    1372,    -1,  1372,   654,  1373,    -1,  1373,    -1,  1188,    -1,
     132,    -1,    -1,    -1,   375,   153,  1375,   262,   600,  1381,
      -1,    -1,    -1,   600,  1377,  1383,  1089,  1239,   492,  1379,
    1378,  1290,  1301,  1312,    -1,  1379,   654,  1380,    -1,  1380,
      -1,  1487,  1367,  1373,    -1,  1381,   654,  1382,    -1,  1382,
      -1,  1487,  1367,  1373,    -1,    -1,   293,    -1,    -1,   136,
    1385,  1395,  1386,    -1,    -1,    -1,   198,  1490,  1251,  1387,
    1290,  1301,  1312,  1388,  1391,    -1,    -1,  1392,  1389,   198,
    1239,  1290,    -1,    -1,   198,  1344,  1390,   607,  1239,  1290,
      -1,    -1,   463,  1180,    -1,  1393,    -1,  1392,   654,  1393,
      -1,  1497,  1394,    -1,  1497,   660,  1497,  1394,    -1,    -1,
     660,   647,    -1,    -1,  1396,  1395,    -1,   426,    -1,   293,
      -1,   234,    -1,    -1,   581,  1399,  1398,  1342,    -1,    -1,
     556,    -1,    -1,  1401,    -1,  1402,    -1,  1401,   654,  1402,
      -1,   103,    -1,   329,    -1,    44,   253,    -1,    98,   550,
      -1,   393,   186,    -1,   254,    -1,   549,    -1,   512,    -1,
      13,    -1,    -1,   196,   425,   369,    -1,    -1,   497,  1405,
    1406,    -1,   116,  1417,    -1,  1413,   552,  1412,  1417,    -1,
    1413,   577,  1412,  1417,    -1,   172,  1412,  1417,    -1,   556,
     533,  1412,  1417,    -1,   379,   552,  1412,  1417,    -1,   405,
      -1,   405,   510,  1494,    -1,   405,   510,  1417,    -1,   164,
     939,  1409,    -1,   164,    13,  1409,    -1,  1413,    75,  1414,
    1490,  1412,  1417,    -1,  1410,   287,    -1,   502,   224,    -1,
      -1,    37,   172,  1415,  1416,  1407,  1306,    -1,    -1,   441,
     686,   172,  1415,  1416,  1408,  1306,    -1,  1027,  1414,  1490,
    1412,  1290,    -1,  1411,   163,    -1,    25,    -1,   100,    -1,
     416,    -1,   102,   652,   647,   653,   623,    -1,   102,   652,
     647,   653,   169,    -1,   623,  1306,    -1,   169,  1306,    -1,
     421,    -1,   420,  1400,  1403,  1306,    -1,  1519,   533,  1417,
      -1,  1413,   419,    -1,  1519,   615,  1417,    -1,   991,  1417,
      -1,    74,  1417,    -1,   211,    -1,   211,   196,  1501,    -1,
     104,   115,   930,  1497,    -1,   104,   556,  1490,    -1,   104,
     620,  1490,    -1,   312,   533,    -1,    13,   503,   533,    -1,
     502,   533,    -1,   502,   687,   533,    -1,    69,    -1,   604,
      -1,   555,    -1,   239,    -1,   104,   417,   715,    -1,   104,
     201,   715,    -1,   104,   578,   715,    -1,   417,   533,  1417,
      -1,   201,   533,  1417,    -1,   417,    72,   715,    -1,   201,
      72,   715,    -1,   104,   173,   715,    -1,  1422,   196,  1188,
      -1,   533,    -1,   347,    -1,   287,    -1,   312,    -1,    36,
      -1,    -1,   537,    -1,    -1,  1414,  1497,    -1,    -1,   199,
      -1,   198,    -1,   252,    -1,    -1,   252,  1494,    -1,    -1,
     198,  1316,    -1,    -1,   275,  1494,    -1,   627,  1188,    -1,
      -1,  1422,  1490,  1419,  1424,    -1,    -1,  1422,  1423,  1420,
    1421,    -1,  1165,    -1,  1348,    -1,  1351,    -1,  1376,    -1,
    1384,    -1,   137,    -1,   138,    -1,    -1,   181,    -1,   400,
      -1,    -1,  1477,    -1,  1497,    -1,    -1,   193,  1140,  1426,
    1427,    -1,    -1,    -1,  1533,  1428,  1433,  1429,  1430,    -1,
    1431,    -1,    -1,   629,   430,   285,  1434,    -1,  1431,   654,
    1432,    -1,  1432,    -1,   168,   287,    -1,   164,   287,    -1,
     203,   287,    -1,   505,   287,    -1,    36,   287,    -1,   440,
     287,   686,    -1,   425,    51,    -1,   224,    -1,   416,    -1,
     287,    -1,   533,    -1,   502,   686,    -1,    69,    -1,   604,
      -1,   555,    -1,   239,    -1,   312,    -1,   139,    -1,   458,
      -1,    -1,  1341,    -1,    -1,    18,   143,    63,    -1,    -1,
     456,  1436,  1437,    -1,  1437,   654,  1438,    -1,  1438,    -1,
      -1,   502,  1439,   686,  1440,    -1,   312,    -1,   425,    51,
      -1,    -1,    13,    -1,    -1,   423,  1442,  1443,    -1,  1410,
     287,  1444,    -1,   573,  1494,    -1,    32,  1188,    -1,    -1,
     263,  1446,  1447,  1448,  1449,    -1,    -1,   216,    -1,   509,
      -1,    -1,    91,    -1,   425,    -1,   425,   229,    -1,  1188,
      -1,   603,  1500,    -1,   498,    -1,   606,  1497,    -1,    -1,
      -1,    -1,    -1,   281,  1457,  1453,  1459,  1458,   240,  1496,
    1454,  1460,   249,   556,  1490,  1251,  1455,   994,  1456,  1467,
    1461,  1464,  1468,  1470,  1473,    -1,   118,    -1,   637,    -1,
      -1,   282,    -1,    -1,    89,    -1,   293,    -1,    -1,   453,
      -1,   234,    -1,    -1,    75,  1462,    -1,  1462,  1463,    -1,
    1463,    -1,   561,    49,  1477,    -1,   383,   159,    49,  1477,
      -1,   159,    49,  1477,    -1,   170,    49,  1477,    -1,    -1,
     278,  1465,    -1,  1465,  1466,    -1,  1466,    -1,   561,    49,
    1477,    -1,   527,    49,  1477,    -1,    -1,   473,   231,    49,
    1477,    -1,    -1,   234,   369,  1469,    -1,   278,    -1,   473,
      -1,    -1,   652,  1471,   653,    -1,   652,   653,    -1,  1471,
     654,  1472,    -1,  1472,    -1,  1487,    -1,   659,  1499,    -1,
      -1,   492,  1474,    -1,  1474,   654,  1475,    -1,  1475,    -1,
    1487,  1367,  1182,  1373,  1183,    -1,   562,    -1,   353,    -1,
     588,   562,    -1,  1476,  1495,    -1,  1495,    -1,   220,    -1,
     221,    -1,    38,    -1,   395,    -1,  1480,    -1,   646,  1481,
      -1,   645,  1481,    -1,  1476,    -1,  1481,    -1,  1482,    -1,
     368,    -1,   184,    -1,   580,    -1,   220,    -1,   221,    -1,
      38,    -1,   588,   990,    -1,   588,    38,    -1,   369,    -1,
     290,    -1,   585,    -1,   129,    -1,   191,    -1,   122,   562,
      -1,   569,   562,    -1,   566,   562,    -1,  1487,    -1,  1484,
      -1,  1497,   660,   647,    -1,  1497,   660,  1497,   660,   647,
      -1,  1188,    -1,  1497,    -1,  1488,    -1,  1497,    -1,  1488,
      -1,  1497,   660,  1497,    -1,   660,  1497,   660,  1497,    -1,
    1497,   660,  1497,   660,  1497,    -1,  1497,    -1,  1497,   660,
    1497,   660,  1497,    -1,  1497,   660,  1497,    -1,   660,  1497,
      -1,  1497,    -1,  1497,   660,  1497,    -1,   660,  1497,    -1,
    1497,  1394,    -1,  1497,   660,  1497,  1394,    -1,  1497,    -1,
     230,    -1,   232,    -1,   562,    -1,   562,    -1,   562,    -1,
    1493,    -1,  1502,    -1,  1493,    -1,  1503,    -1,  1497,    -1,
    1494,    -1,   274,    -1,  1499,    -1,  1499,   659,  1499,    -1,
     109,  1187,    -1,  1500,    -1,  1554,    -1,  1503,    -1,    22,
      -1,    31,    -1,    33,    -1,    50,    -1,    51,    -1,    61,
      -1,    64,    -1,    63,    -1,    70,    -1,    76,    -1,    77,
      -1,    78,    -1,    79,    -1,    80,    -1,    83,    -1,    85,
      -1,    97,    -1,   128,    -1,   149,    -1,   160,    -1,   176,
      -1,   177,    -1,   193,    -1,   215,    -1,   219,    -1,   223,
      -1,   247,    -1,   264,    -1,   365,    -1,   379,    -1,   382,
      -1,   381,    -1,   391,    -1,   396,    -1,   409,    -1,   412,
      -1,   447,    -1,   450,    -1,   456,    -1,   459,    -1,   470,
      -1,   478,    -1,   483,    -1,   490,    -1,   498,    -1,   500,
      -1,   508,    -1,   502,    -1,   503,    -1,   510,    -1,   529,
      -1,   536,    -1,   581,    -1,   592,    -1,   593,    -1,   633,
      -1,   636,    -1,   601,    -1,     5,    -1,     8,    -1,     7,
      -1,     9,    -1,    10,    -1,    11,    -1,    12,    -1,    15,
      -1,    19,    -1,    24,    -1,    25,    -1,    27,    -1,    26,
      -1,    28,    -1,    29,    -1,    30,    -1,    37,    -1,    41,
      -1,    44,    -1,    46,    -1,    45,    -1,    48,    -1,    54,
      -1,    57,    -1,    58,    -1,    60,    -1,    66,    -1,    69,
      -1,    68,    -1,    67,    -1,    71,    -1,    72,    -1,    74,
      -1,    82,    -1,    75,    -1,    84,    -1,    86,    -1,    87,
      -1,    88,    -1,    89,    -1,    91,    -1,    92,    -1,    94,
      -1,    96,    -1,    95,    -1,    98,    -1,   100,    -1,   111,
      -1,   103,    -1,   106,    -1,   108,    -1,   113,    -1,   118,
      -1,   117,    -1,   119,    -1,   122,    -1,   127,    -1,   133,
      -1,   135,    -1,   139,    -1,   141,    -1,   142,    -1,   143,
      -1,   144,    -1,   145,    -1,   152,    -1,   153,    -1,   154,
      -1,   161,    -1,   165,    -1,   164,    -1,   163,    -1,   168,
      -1,   169,    -1,   171,    -1,   173,    -1,   172,    -1,   174,
      -1,   175,    -1,   180,    -1,   181,    -1,   182,    -1,   186,
      -1,   185,    -1,   197,    -1,   158,    -1,   199,    -1,   188,
      -1,   189,    -1,   190,    -1,   203,    -1,   204,    -1,   206,
      -1,   205,    -1,   207,    -1,   211,    -1,   209,    -1,   217,
      -1,   216,    -1,   224,    -1,   228,    -1,   229,    -1,   231,
      -1,   235,    -1,   239,    -1,   251,    -1,   236,    -1,   237,
      -1,   241,    -1,   253,    -1,   254,    -1,   256,    -1,   257,
      -1,   246,    -1,   261,    -1,   266,    -1,   265,    -1,   269,
      -1,   272,    -1,   273,    -1,   279,    -1,   280,    -1,   282,
      -1,   284,    -1,   286,    -1,   287,    -1,   319,    -1,   312,
      -1,   315,    -1,   296,    -1,   297,    -1,   301,    -1,   298,
      -1,   299,    -1,   313,    -1,   314,    -1,   300,    -1,   302,
      -1,   295,    -1,   310,    -1,   304,    -1,   303,    -1,   305,
      -1,   306,    -1,   307,    -1,   308,    -1,   309,    -1,   317,
      -1,   318,    -1,   320,    -1,   322,    -1,   323,    -1,   328,
      -1,   329,    -1,   330,    -1,   331,    -1,   332,    -1,   333,
      -1,   336,    -1,   337,    -1,   341,    -1,   339,    -1,   343,
      -1,   344,    -1,   345,    -1,   346,    -1,   347,    -1,   348,
      -1,   350,    -1,   349,    -1,   351,    -1,   354,    -1,   355,
      -1,   359,    -1,   358,    -1,   366,    -1,   360,    -1,   361,
      -1,   370,    -1,   372,    -1,   373,    -1,   374,    -1,   376,
      -1,   378,    -1,   377,    -1,   392,    -1,   393,    -1,   398,
      -1,   401,    -1,   400,    -1,   402,    -1,   403,    -1,   404,
      -1,   406,    -1,   405,    -1,   407,    -1,   408,    -1,   413,
      -1,   414,    -1,   416,    -1,   418,    -1,   419,    -1,   420,
      -1,   421,    -1,   422,    -1,   424,    -1,   425,    -1,   426,
      -1,   429,    -1,   433,    -1,   434,    -1,   436,    -1,   435,
      -1,   437,    -1,   440,    -1,   441,    -1,   442,    -1,   443,
      -1,   444,    -1,   446,    -1,   449,    -1,   451,    -1,   454,
      -1,   458,    -1,   461,    -1,   462,    -1,   464,    -1,   466,
      -1,   469,    -1,   471,    -1,   472,    -1,   473,    -1,   476,
      -1,   474,    -1,   475,    -1,   477,    -1,   479,    -1,   480,
      -1,   482,    -1,   488,    -1,   487,    -1,   489,    -1,   501,
      -1,   494,    -1,   504,    -1,   505,    -1,   507,    -1,   509,
      -1,   511,    -1,   512,    -1,   520,    -1,   519,    -1,   522,
      -1,   525,    -1,   528,    -1,   533,    -1,   537,    -1,   539,
      -1,   540,    -1,   541,    -1,   542,    -1,   544,    -1,   543,
      -1,   547,    -1,   548,    -1,   549,    -1,   550,    -1,   558,
      -1,   555,    -1,   552,    -1,   557,    -1,   553,    -1,   559,
      -1,   560,    -1,   563,    -1,   564,    -1,   575,    -1,   576,
      -1,   577,    -1,   566,    -1,   567,    -1,   568,    -1,   569,
      -1,   582,    -1,   583,    -1,   584,    -1,   201,    -1,   586,
      -1,   587,    -1,   590,    -1,   589,    -1,   596,    -1,   599,
      -1,   603,    -1,   604,    -1,   605,    -1,   615,    -1,   620,
      -1,   621,    -1,   612,    -1,   623,    -1,   622,    -1,   624,
      -1,   625,    -1,   632,    -1,   635,    -1,   637,    -1,   640,
      -1,   619,    -1,    -1,   492,  1505,  1506,    -1,    -1,  1522,
    1507,  1512,    -1,    -1,   575,  1508,  1524,    -1,    -1,  1518,
    1509,  1510,    -1,    -1,  1521,  1511,  1512,    -1,   575,  1524,
      -1,    -1,   654,  1513,    -1,    -1,  1514,  1516,    -1,    -1,
    1513,   654,  1515,  1516,    -1,    -1,  1518,  1517,  1521,    -1,
    1522,    -1,   209,    -1,   282,    -1,   489,    -1,    -1,   209,
      -1,   282,    -1,   489,    -1,    -1,   209,   660,    -1,   282,
     660,    -1,   489,   660,    -1,  1523,  1367,  1530,    -1,  1523,
    1367,  1530,    -1,   659,  1499,  1367,  1188,    -1,   659,   659,
    1520,  1523,  1367,  1530,    -1,   991,   996,    -1,   349,  1367,
    1188,    -1,   349,   993,   998,    -1,   469,  1499,    -1,   402,
    1367,  1529,    -1,   402,   196,  1500,  1367,  1529,    -1,  1497,
      -1,  1497,   660,  1497,    -1,   132,   660,  1497,    -1,  1525,
      -1,  1526,    -1,  1525,   654,  1526,    -1,  1526,   654,  1525,
      -1,  1527,    -1,   256,   273,  1528,    -1,   430,   377,    -1,
     430,   634,    -1,   430,   586,    -1,   430,    84,    -1,   451,
     430,    -1,   487,    -1,   562,    -1,   402,   652,   562,   653,
      -1,   374,   652,   562,   653,    -1,  1188,    -1,   132,    -1,
     375,    -1,    13,    -1,    36,    -1,    -1,   285,  1533,  1532,
    1534,    -1,   556,    -1,   552,    -1,  1535,    -1,  1534,   654,
    1535,    -1,  1490,  1288,  1536,    -1,   430,    -1,   634,    -1,
     634,    89,    -1,   293,   634,    -1,   430,   282,    -1,    -1,
     597,  1538,  1533,    -1,   215,  1490,   379,  1288,    -1,   215,
    1492,    70,    -1,    -1,   215,  1492,   430,  1540,  1541,  1290,
    1307,    -1,  1542,    -1,  1497,  1543,    -1,   189,    -1,   359,
      -1,   189,    -1,   359,    -1,   414,    -1,   265,    -1,    -1,
    1545,  1544,   652,  1372,   653,    -1,   166,    -1,   202,    -1,
     267,    -1,   214,    -1,   294,    -1,   467,   714,  1547,    -1,
    1557,   375,  1556,  1568,   198,  1571,    -1,  1557,   375,   201,
    1568,   198,  1571,    -1,  1557,   375,   417,  1568,   198,  1571,
      -1,    13,  1558,   654,   210,   382,   198,  1571,    -1,   422,
     375,  1500,   198,  1569,    -1,  1548,   198,  1571,    -1,     7,
     382,   196,  1555,    -1,  1555,    -1,   210,   714,  1550,    -1,
    1557,   375,  1556,  1568,   573,  1570,  1578,  1579,    -1,  1557,
     375,   201,  1568,   573,  1570,  1578,  1579,    -1,  1557,   375,
     417,  1568,   573,  1570,  1578,  1579,    -1,   422,   375,  1500,
     573,  1570,  1580,    -1,  1555,   573,  1570,  1552,    -1,    -1,
     629,     7,  1501,    -1,    -1,   629,     7,   382,    -1,  1555,
      -1,  1553,   654,  1555,    -1,   110,  1187,    -1,  1499,    -1,
    1554,    -1,    -1,   556,    -1,  1559,    -1,    13,  1558,    -1,
      -1,   416,    -1,  1560,    -1,  1559,   654,  1560,    -1,    -1,
     484,  1561,  1575,    -1,    -1,   245,  1562,  1575,    -1,    -1,
     600,  1563,  1575,    -1,    -1,   438,  1564,  1575,    -1,   136,
      -1,   602,    -1,   238,    -1,    14,    -1,   104,    -1,   150,
      -1,   177,    -1,   446,    -1,   498,    -1,   418,    -1,   188,
      -1,   210,   382,    -1,   497,   116,    -1,   547,    -1,   104,
     559,   552,    -1,   285,   552,    -1,   454,   502,    -1,   454,
      68,    -1,   104,   620,    -1,   497,   620,    -1,   104,   472,
      -1,    14,   472,    -1,   104,   603,    -1,   173,    -1,   578,
      -1,   104,   553,    -1,    -1,    18,    -1,  1567,  1565,  1566,
      -1,  1567,    -1,   542,   562,    -1,   257,   562,    -1,    66,
     562,    -1,   647,    -1,  1497,   660,   647,    -1,   647,   660,
     647,    -1,  1490,    -1,  1500,    -1,  1569,   654,  1500,    -1,
    1574,    -1,  1570,   654,  1574,    -1,  1501,    -1,  1571,   654,
    1501,    -1,   619,    -1,   629,    -1,   607,    -1,    20,    -1,
    1500,   231,    49,   562,    -1,  1500,   231,    49,   402,   562,
      -1,  1500,   231,  1572,  1499,    -1,  1500,   231,  1572,  1499,
    1573,  1494,    -1,  1501,    -1,    -1,   652,  1576,   653,    -1,
    1576,   654,  1577,    -1,  1577,    -1,  1497,    -1,    -1,   455,
    1566,    -1,   455,   526,    -1,   455,   635,    -1,   455,   361,
      -1,    -1,   629,  1581,    -1,    -1,   629,   210,   382,    -1,
    1581,  1582,    -1,  1582,    -1,   210,   382,    -1,   318,  1314,
      -1,   322,  1314,    -1,   317,  1314,    -1,   323,  1313,    -1,
      -1,    33,  1584,  1585,    -1,    -1,   632,    -1,    -1,    18,
     365,    58,    -1,    18,    58,    -1,    -1,   445,    -1,   365,
     445,    -1,    -1,   478,    -1,    85,  1585,  1586,  1587,    -1,
     470,  1585,  1586,  1587,    -1,   470,  1585,   573,  1588,  1497,
      -1,   478,  1497,    -1,   445,   478,  1497,    -1,    -1,  1594,
      -1,    -1,   594,  1601,  1595,  1166,    -1,    -1,  1594,    -1,
    1598,    -1,    -1,  1598,    -1,    -1,  1599,  1600,    -1,  1302,
    1306,    -1,  1308,    -1,    -1,   146,    -1,    13,    -1,   484,
    1258,    -1,   652,  1168,   653,    -1,  1602,  1597,    -1,    -1,
    1603,   594,  1601,  1604,  1602,  1597,    -1,  1606,  1603,  1607,
      -1,    -1,    -1,    -1,  1609,    -1,  1609,  1610,    -1,  1610,
      -1,   538,    -1,   222,    -1,   146,    -1,   523,    -1,   518,
      -1,   519,    -1,   521,    -1,    13,    -1,  1616,  1612,    -1,
    1615,  1613,    -1,  1617,  1614,  1621,    -1,  1621,    -1,  1629,
      -1,  1640,    -1,  1634,    -1,   701,    -1,  1621,    -1,  1629,
      -1,  1640,    -1,  1634,    -1,  1633,    -1,   701,    -1,  1615,
      -1,  1616,    -1,    -1,   133,   166,  1501,    -1,  1618,    -1,
    1618,  1619,    -1,  1619,    -1,   387,   453,    -1,    12,   166,
     587,    -1,    12,   166,   330,    -1,    12,   166,   560,    -1,
      -1,   524,   483,   133,    -1,   524,   483,   251,    -1,    -1,
    1620,   620,  1490,  1622,  1623,    20,  1625,    -1,    -1,   652,
    1624,   653,    -1,  1497,    -1,  1624,   654,  1497,    -1,    -1,
    1626,  1627,  1628,    -1,   484,  1169,    -1,   652,  1167,   653,
    1596,    -1,    -1,   629,    65,   382,    -1,   629,    54,    65,
     382,    -1,   629,   282,    65,   382,    -1,    -1,    -1,    -1,
     578,  1182,   715,   820,   821,   375,  1182,  1630,  1490,   196,
    1182,  1631,   155,   475,  1632,   770,    -1,    11,  1182,   201,
    1497,   464,   943,   510,  1494,    -1,  1182,   201,  1497,   464,
     943,   510,  1494,    -1,    -1,    -1,    -1,    -1,    -1,  1182,
     201,   715,   652,  1635,   726,   653,  1636,   464,  1637,   988,
    1638,   717,  1639,   770,    -1,    -1,    -1,    -1,    -1,   417,
    1182,   715,  1641,   652,  1642,   730,   653,  1643,   717,  1644,
     770,    -1,   636,  1647,  1646,  1648,    -1,   636,   160,  1646,
    1650,    -1,   636,   412,  1646,    -1,   636,    85,  1646,  1649,
      -1,   636,   470,  1646,    -1,   636,   434,    -1,  1477,    -1,
    1477,   654,  1477,    -1,  1477,   654,  1477,   654,  1314,    -1,
      33,    -1,   529,    -1,    -1,   259,    -1,   461,    -1,    -1,
     376,   404,    -1,    -1,    -1,   548,  1651,  1652,    -1,    -1,
     196,   333,    -1,   247,   406,  1497,   510,  1494,    -1,   247,
     510,  1494,    -1,   593,   406,  1497,    -1,   593,   510,  1494,
      -1,   642,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1930,  1930,  1942,  1941,  1966,  1973,  1975,  1979,  1980,
    1985,  1986,  1987,  1988,  1989,  1990,  1991,  1992,  1993,  1994,
    1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,  2004,
    2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,  2013,  2014,
    2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,
    2025,  2026,  2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,
    2035,  2036,  2037,  2038,  2039,  2043,  2052,  2053,  2057,  2066,
    2072,  2082,  2081,  2091,  2093,  2097,  2098,  2102,  2115,  2114,
    2134,  2133,  2142,  2143,  2147,  2151,  2155,  2159,  2163,  2167,
    2172,  2176,  2180,  2184,  2188,  2192,  2197,  2201,  2206,  2237,
    2242,  2245,  2247,  2248,  2252,  2258,  2262,  2278,  2282,  2288,
    2298,  2308,  2321,  2325,  2329,  2345,  2344,  2385,  2390,  2384,
    2397,  2402,  2395,  2409,  2414,  2407,  2420,  2419,  2432,  2431,
    2439,  2443,  2447,  2451,  2455,  2462,  2475,  2476,  2480,  2484,
    2488,  2492,  2496,  2500,  2504,  2512,  2511,  2542,  2541,  2548,
    2555,  2556,  2562,  2568,  2578,  2584,  2590,  2592,  2599,  2600,
    2604,  2610,  2619,  2620,  2628,  2628,  2684,  2685,  2686,  2687,
    2688,  2689,  2690,  2691,  2692,  2693,  2694,  2695,  2696,  2701,
    2715,  2731,  2749,  2750,  2754,  2755,  2760,  2762,  2764,  2766,
    2768,  2770,  2772,  2778,  2779,  2780,  2784,  2788,  2796,  2795,
    2808,  2810,  2813,  2815,  2819,  2823,  2830,  2832,  2836,  2837,
    2842,  2862,  2890,  2892,  2896,  2897,  2901,  2928,  2929,  2930,
    2931,  2935,  2936,  2940,  2941,  2946,  2949,  2976,  2975,  3039,
    3055,  3054,  3110,  3136,  3136,  3159,  3160,  3165,  3167,  3172,
    3194,  3205,  3209,  3231,  3232,  3236,  3240,  3249,  3255,  3261,
    3270,  3284,  3307,  3313,  3314,  3320,  3323,  3327,  3335,  3355,
    3357,  3375,  3381,  3383,  3385,  3387,  3389,  3391,  3393,  3395,
    3397,  3399,  3401,  3403,  3408,  3423,  3439,  3440,  3445,  3451,
    3460,  3466,  3475,  3483,  3492,  3501,  3503,  3512,  3517,  3523,
    3532,  3540,  3542,  3544,  3546,  3548,  3550,  3552,  3554,  3556,
    3558,  3560,  3562,  3564,  3569,  3587,  3608,  3609,  3613,  3614,
    3615,  3616,  3617,  3618,  3619,  3620,  3621,  3622,  3623,  3624,
    3625,  3630,  3629,  3636,  3636,  3691,  3690,  3719,  3719,  3735,
    3788,  3831,  3852,  3851,  3873,  3892,  3894,  3895,  3899,  3919,
    3942,  3944,  3960,  3942,  3979,  3981,  3982,  3986,  3987,  3992,
    3998,  3991,  4019,  4018,  4034,  4035,  4039,  4040,  4045,  4049,
    4044,  4070,  4074,  4069,  4093,  4103,  4108,  4107,  4142,  4143,
    4148,  4147,  4179,  4179,  4194,  4193,  4230,  4242,  4244,  4241,
    4271,  4270,  4291,  4293,  4298,  4300,  4302,  4319,  4324,  4330,
    4337,  4338,  4346,  4352,  4361,  4367,  4373,  4374,  4378,  4378,
    4383,  4384,  4385,  4389,  4390,  4391,  4395,  4399,  4400,  4401,
    4405,  4406,  4407,  4408,  4409,  4410,  4411,  4412,  4416,  4420,
    4421,  4422,  4426,  4427,  4428,  4429,  4430,  4434,  4438,  4439,
    4440,  4444,  4445,  4446,  4447,  4448,  4449,  4450,  4454,  4458,
    4459,  4460,  4464,  4465,  4466,  4471,  4479,  4487,  4495,  4507,
    4519,  4524,  4529,  4537,  4545,  4553,  4561,  4569,  4577,  4585,
    4598,  4611,  4624,  4626,  4630,  4635,  4648,  4649,  4701,  4700,
    4703,  4709,  4709,  4710,  4724,  4725,  4729,  4731,  4730,  4734,
    4733,  4739,  4776,  4777,  4782,  4781,  4800,  4819,  4818,  4835,
    4839,  4847,  4846,  4849,  4851,  4853,  4855,  4860,  4861,  4866,
    4867,  4871,  4872,  4876,  4895,  4905,  4916,  4925,  4926,  4942,
    4944,  4943,  4948,  4946,  4957,  4958,  4962,  4980,  4996,  4997,
    5013,  5028,  5050,  5051,  5056,  5055,  5079,  5089,  5111,  5110,
    5128,  5127,  5147,  5169,  5173,  5202,  5214,  5215,  5220,  5231,
    5219,  5256,  5257,  5261,  5274,  5295,  5308,  5334,  5335,  5340,
    5339,  5376,  5381,  5382,  5386,  5387,  5391,  5393,  5399,  5405,
    5407,  5409,  5411,  5413,  5415,  5425,  5440,  5424,  5454,  5455,
    5459,  5460,  5464,  5465,  5469,  5470,  5474,  5475,  5479,  5480,
    5484,  5489,  5493,  5500,  5502,  5506,  5507,  5511,  5512,  5513,
    5517,  5522,  5527,  5532,  5537,  5542,  5547,  5552,  5567,  5573,
    5588,  5593,  5608,  5614,  5632,  5637,  5642,  5647,  5652,  5657,
    5663,  5662,  5688,  5689,  5690,  5695,  5700,  5705,  5707,  5709,
    5711,  5717,  5722,  5727,  5733,  5739,  5745,  5754,  5772,  5789,
    5812,  5826,  5827,  5828,  5829,  5830,  5831,  5832,  5836,  5837,
    5838,  5842,  5843,  5847,  5848,  5849,  5850,  5855,  5862,  5863,
    5867,  5868,  5872,  5873,  5881,  5880,  5889,  5887,  5897,  5895,
    5905,  5903,  5911,  5932,  5938,  5940,  5944,  5948,  5949,  5953,
    5958,  5957,  5983,  5984,  5993,  5995,  6000,  6003,  6007,  6014,
    6015,  6019,  6020,  6024,  6030,  6036,  6040,  6056,  6072,  6073,
    6074,  6075,  6080,  6084,  6089,  6094,  6098,  6103,  6108,  6114,
    6119,  6125,  6129,  6134,  6139,  6157,  6159,  6161,  6174,  6176,
    6181,  6186,  6198,  6203,  6208,  6213,  6215,  6217,  6219,  6221,
    6223,  6225,  6227,  6230,  6229,  6234,  6233,  6237,  6239,  6248,
    6249,  6250,  6255,  6256,  6257,  6258,  6259,  6263,  6267,  6268,
    6272,  6273,  6277,  6278,  6279,  6280,  6281,  6285,  6286,  6287,
    6288,  6289,  6293,  6298,  6300,  6306,  6307,  6309,  6314,  6323,
    6324,  6328,  6329,  6333,  6334,  6335,  6339,  6340,  6341,  6342,
    6345,  6346,  6350,  6351,  6355,  6356,  6360,  6361,  6365,  6366,
    6367,  6368,  6375,  6376,  6382,  6388,  6394,  6400,  6401,  6414,
    6420,  6426,  6432,  6441,  6462,  6468,  6473,  6474,  6478,  6479,
    6483,  6491,  6495,  6496,  6500,  6501,  6505,  6514,  6518,  6519,
    6523,  6531,  6532,  6536,  6537,  6541,  6542,  6547,  6548,  6552,
    6559,  6568,  6573,  6581,  6582,  6583,  6584,  6585,  6586,  6591,
    6599,  6600,  6605,  6604,  6617,  6618,  6622,  6625,  6626,  6627,
    6628,  6632,  6640,  6647,  6648,  6652,  6662,  6663,  6667,  6668,
    6671,  6673,  6677,  6689,  6690,  6694,  6701,  6714,  6715,  6717,
    6719,  6725,  6730,  6736,  6742,  6749,  6759,  6760,  6761,  6762,
    6763,  6767,  6771,  6772,  6776,  6777,  6781,  6782,  6786,  6787,
    6788,  6792,  6793,  6797,  6801,  6814,  6826,  6827,  6831,  6832,
    6836,  6837,  6841,  6842,  6846,  6847,  6851,  6852,  6856,  6857,
    6861,  6862,  6866,  6868,  6869,  6875,  6881,  6887,  6895,  6896,
    6900,  6904,  6905,  6918,  6919,  6920,  6924,  6925,  6929,  6935,
    6949,  6950,  6954,  6966,  6967,  6971,  6972,  6980,  6997,  6979,
    7017,  7016,  7030,  7042,  7041,  7060,  7059,  7078,  7077,  7096,
    7090,  7110,  7109,  7142,  7147,  7152,  7157,  7162,  7172,  7173,
    7174,  7175,  7179,  7180,  7192,  7193,  7197,  7198,  7201,  7203,
    7211,  7219,  7221,  7223,  7224,  7232,  7233,  7237,  7246,  7244,
    7257,  7270,  7269,  7282,  7280,  7293,  7300,  7310,  7311,  7338,
    7345,  7349,  7354,  7353,  7369,  7371,  7376,  7384,  7383,  7399,
    7403,  7402,  7414,  7415,  7419,  7434,  7435,  7439,  7448,  7452,
    7457,  7463,  7462,  7474,  7485,  7473,  7501,  7510,  7519,  7529,
    7538,  7544,  7550,  7559,  7568,  7587,  7607,  7617,  7621,  7626,
    7627,  7630,  7632,  7633,  7634,  7635,  7638,  7643,  7654,  7659,
    7670,  7671,  7675,  7676,  7680,  7680,  7683,  7685,  7689,  7690,
    7694,  7695,  7703,  7704,  7705,  7709,  7710,  7715,  7723,  7724,
    7725,  7726,  7731,  7730,  7740,  7739,  7746,  7753,  7763,  7780,
    7783,  7790,  7794,  7801,  7805,  7809,  7816,  7816,  7822,  7823,
    7827,  7828,  7829,  7833,  7834,  7847,  7854,  7855,  7860,  7859,
    7871,  7872,  7873,  7878,  7877,  7898,  7899,  7903,  7904,  7908,
    7909,  7910,  7915,  7914,  7935,  7936,  7940,  7945,  7946,  7953,
    7955,  7959,  7961,  7960,  7972,  7974,  7973,  7986,  7987,  7992,
    8001,  8002,  8003,  8007,  8013,  8022,  8031,  8030,  8056,  8057,
    8061,  8062,  8066,  8067,  8068,  8069,  8070,  8071,  8076,  8075,
    8096,  8097,  8098,  8103,  8102,  8108,  8115,  8120,  8128,  8129,
    8133,  8147,  8146,  8159,  8160,  8164,  8165,  8169,  8179,  8189,
    8190,  8195,  8194,  8205,  8206,  8210,  8211,  8215,  8225,  8236,
    8235,  8243,  8243,  8252,  8253,  8258,  8259,  8268,  8277,  8278,
    8282,  8287,  8292,  8297,  8302,  8301,  8321,  8329,  8321,  8336,
    8337,  8338,  8339,  8340,  8344,  8351,  8358,  8360,  8371,  8372,
    8376,  8377,  8405,  8435,  8437,  8443,  8453,  8454,  8455,  8469,
    8474,  8499,  8505,  8511,  8512,  8513,  8514,  8515,  8519,  8520,
    8521,  8525,  8526,  8527,  8531,  8532,  8537,  8588,  8595,  8638,
    8644,  8650,  8656,  8662,  8668,  8674,  8680,  8684,  8690,  8696,
    8702,  8708,  8714,  8718,  8724,  8733,  8739,  8747,  8753,  8763,
    8769,  8778,  8788,  8794,  8804,  8810,  8819,  8823,  8829,  8835,
    8841,  8847,  8853,  8859,  8865,  8871,  8877,  8883,  8889,  8895,
    8901,  8907,  8911,  8912,  8916,  8917,  8921,  8922,  8926,  8927,
    8931,  8932,  8933,  8934,  8935,  8936,  8940,  8941,  8946,  8952,
    8956,  8963,  8970,  8977,  8984,  8991,  8996,  9002,  9009,  9016,
    9024,  9035,  9057,  9064,  9072,  9073,  9074,  9075,  9076,  9077,
    9088,  9089,  9090,  9091,  9092,  9098,  9102,  9108,  9114,  9120,
    9126,  9128,  9135,  9142,  9148,  9191,  9200,  9207,  9215,  9221,
    9228,  9234,  9248,  9255,  9271,  9277,  9283,  9291,  9299,  9305,
    9311,  9317,  9323,  9337,  9348,  9354,  9360,  9366,  9372,  9378,
    9384,  9390,  9396,  9402,  9408,  9414,  9420,  9426,  9432,  9438,
    9444,  9452,  9473,  9480,  9486,  9493,  9500,  9507,  9514,  9520,
    9526,  9533,  9539,  9546,  9552,  9558,  9564,  9570,  9576,  9594,
    9600,  9606,  9613,  9620,  9628,  9635,  9642,  9649,  9656,  9673,
    9679,  9685,  9691,  9697,  9704,  9710,  9716,  9722,  9728,  9734,
    9745,  9751,  9757,  9763,  9769,  9777,  9783,  9794,  9800,  9806,
    9814,  9824,  9830,  9846,  9852,  9859,  9866,  9873,  9880,  9887,
    9891,  9911,  9910,  9982, 10023, 10025, 10030, 10031, 10035, 10036,
   10040, 10041, 10045, 10052, 10060, 10086, 10092, 10098, 10104, 10110,
   10116, 10125, 10132, 10134, 10131, 10141, 10152, 10158, 10164, 10170,
   10176, 10182, 10188, 10194, 10200, 10207, 10206, 10226, 10225, 10240,
   10250, 10258, 10274, 10275, 10280, 10285, 10288, 10291, 10290, 10307,
   10309, 10315, 10314, 10331, 10333, 10335, 10337, 10339, 10341, 10343,
   10345, 10347, 10349, 10355, 10361, 10364, 10363, 10369, 10370, 10374,
   10381, 10389, 10390, 10394, 10401, 10409, 10410, 10414, 10415, 10419,
   10427, 10438, 10439, 10451, 10462, 10463, 10469, 10470, 10490, 10494,
   10492, 10510, 10508, 10519, 10529, 10527, 10545, 10544, 10554, 10565,
   10563, 10582, 10581, 10592, 10604, 10605, 10606, 10610, 10611, 10619,
   10620, 10624, 10639, 10639, 10654, 10694, 10770, 10781, 10786, 10778,
   10805, 10825, 10833, 10825, 10842, 10841, 10864, 10881, 10864, 10888,
   10892, 10918, 10919, 10924, 10927, 10928, 10929, 10933, 10934, 10939,
   10938, 10944, 10943, 10951, 10952, 10955, 10957, 10957, 10961, 10961,
   10966, 10967, 10971, 10973, 10978, 10979, 10983, 10994, 11007, 11008,
   11009, 11010, 11011, 11012, 11013, 11014, 11015, 11016, 11017, 11018,
   11022, 11023, 11024, 11025, 11026, 11027, 11028, 11029, 11030, 11034,
   11035, 11036, 11037, 11040, 11042, 11043, 11047, 11048, 11056, 11058,
   11062, 11064, 11063, 11077, 11080, 11079, 11094, 11100, 11114, 11116,
   11120, 11122, 11127, 11128, 11148, 11173, 11177, 11178, 11182, 11194,
   11196, 11201, 11200, 11235, 11237, 11242, 11243, 11244, 11249, 11256,
   11260, 11261, 11265, 11269, 11273, 11280, 11287, 11294, 11304, 11337,
   11341, 11347, 11353, 11362, 11370, 11374, 11381, 11382, 11386, 11387,
   11388, 11392, 11393, 11394, 11395, 11396, 11397, 11401, 11402, 11403,
   11404, 11405, 11409, 11410, 11411, 11412, 11413, 11417, 11418, 11419,
   11420, 11421, 11425, 11430, 11431, 11435, 11436, 11439, 11442, 11441,
   11472, 11473, 11477, 11478, 11482, 11492, 11492, 11502, 11503, 11507,
   11526, 11559, 11558, 11571, 11579, 11570, 11581, 11593, 11605, 11604,
   11622, 11621, 11632, 11632, 11648, 11655, 11677, 11697, 11709, 11713,
   11718, 11717, 11727, 11733, 11740, 11745, 11750, 11760, 11761, 11765,
   11776, 11789, 11790, 11794, 11806, 11810, 11818, 11819, 11827, 11835,
   11826, 11845, 11852, 11844, 11862, 11870, 11871, 11879, 11883, 11884,
   11895, 11896, 11900, 11909, 11910, 11911, 11913, 11912, 11923, 11924,
   11928, 11929, 11931, 11930, 11934, 11933, 11939, 11940, 11944, 11945,
   11949, 11959, 11960, 11964, 11965, 11970, 11969, 11983, 11984, 11988,
   11993, 12001, 12002, 12010, 12012, 12012, 12020, 12028, 12019, 12050,
   12051, 12055, 12063, 12064, 12068, 12078, 12079, 12086, 12085, 12101,
   12112, 12100, 12115, 12114, 12126, 12125, 12138, 12140, 12144, 12145,
   12149, 12162, 12178, 12179, 12183, 12184, 12188, 12189, 12190, 12195,
   12194, 12215, 12217, 12220, 12222, 12225, 12226, 12229, 12233, 12237,
   12241, 12245, 12249, 12253, 12257, 12261, 12269, 12272, 12282, 12281,
   12297, 12304, 12312, 12320, 12328, 12336, 12344, 12351, 12358, 12364,
   12366, 12368, 12377, 12381, 12386, 12385, 12391, 12390, 12395, 12404,
   12411, 12416, 12421, 12426, 12428, 12430, 12432, 12434, 12436, 12443,
   12451, 12453, 12461, 12468, 12475, 12482, 12488, 12494, 12503, 12511,
   12515, 12520, 12527, 12532, 12539, 12546, 12553, 12560, 12567, 12574,
   12580, 12587, 12594, 12599, 12604, 12609, 12619, 12621, 12623, 12628,
   12629, 12632, 12634, 12638, 12639, 12643, 12644, 12648, 12649, 12653,
   12654, 12658, 12659, 12662, 12664, 12671, 12682, 12681, 12697, 12696,
   12706, 12707, 12708, 12709, 12710, 12714, 12715, 12719, 12720, 12721,
   12725, 12726, 12727, 12742, 12741, 12754, 12763, 12753, 12765, 12769,
   12770, 12784, 12785, 12790, 12792, 12794, 12796, 12798, 12800, 12811,
   12813, 12815, 12817, 12823, 12825, 12836, 12838, 12840, 12842, 12844,
   12846, 12848, 12853, 12854, 12858, 12859, 12863, 12862, 12872, 12873,
   12877, 12877, 12880, 12881, 12885, 12886, 12891, 12890, 12901, 12905,
   12909, 12922, 12921, 12936, 12937, 12938, 12941, 12942, 12943, 12944,
   12952, 12956, 12965, 12971, 12983, 12994, 13004, 13014, 12982, 13022,
   13023, 13027, 13028, 13032, 13033, 13041, 13045, 13046, 13047, 13050,
   13052, 13056, 13057, 13061, 13066, 13073, 13078, 13085, 13087, 13091,
   13092, 13096, 13101, 13109, 13110, 13113, 13115, 13123, 13125, 13129,
   13130, 13131, 13135, 13137, 13142, 13143, 13152, 13153, 13157, 13158,
   13162, 13175, 13198, 13210, 13221, 13240, 13248, 13260, 13268, 13283,
   13303, 13304, 13305, 13313, 13314, 13315, 13316, 13323, 13329, 13335,
   13341, 13347, 13353, 13382, 13413, 13423, 13433, 13439, 13448, 13460,
   13466, 13472, 13488, 13489, 13493, 13502, 13517, 13521, 13567, 13571,
   13588, 13592, 13670, 13694, 13724, 13725, 13741, 13751, 13755, 13761,
   13767, 13777, 13783, 13792, 13802, 13803, 13831, 13845, 13859, 13874,
   13875, 13885, 13886, 13896, 13897, 13898, 13902, 13917, 13949, 13959,
   13959, 13963, 13964, 13965, 13966, 13967, 13968, 13969, 13970, 13971,
   13972, 13973, 13974, 13975, 13976, 13977, 13978, 13979, 13980, 13981,
   13982, 13983, 13984, 13985, 13986, 13987, 13988, 13989, 13990, 13991,
   13992, 13993, 13994, 13995, 13996, 13997, 13998, 13999, 14000, 14001,
   14002, 14003, 14004, 14005, 14006, 14007, 14008, 14009, 14010, 14011,
   14012, 14013, 14014, 14015, 14016, 14017, 14018, 14019, 14020, 14021,
   14031, 14032, 14033, 14034, 14035, 14036, 14037, 14038, 14039, 14040,
   14041, 14042, 14043, 14044, 14045, 14046, 14047, 14048, 14049, 14050,
   14051, 14052, 14053, 14054, 14055, 14056, 14057, 14058, 14059, 14060,
   14061, 14062, 14063, 14064, 14065, 14066, 14067, 14068, 14069, 14070,
   14071, 14072, 14073, 14074, 14075, 14076, 14077, 14078, 14079, 14080,
   14085, 14086, 14087, 14088, 14089, 14090, 14091, 14092, 14093, 14094,
   14095, 14096, 14097, 14098, 14099, 14100, 14101, 14102, 14103, 14104,
   14105, 14106, 14107, 14108, 14109, 14110, 14111, 14112, 14113, 14114,
   14115, 14116, 14117, 14118, 14119, 14120, 14121, 14122, 14123, 14124,
   14125, 14126, 14127, 14128, 14129, 14130, 14131, 14132, 14133, 14134,
   14135, 14136, 14137, 14138, 14139, 14140, 14141, 14142, 14143, 14144,
   14145, 14146, 14147, 14148, 14149, 14150, 14151, 14152, 14153, 14154,
   14155, 14156, 14157, 14158, 14159, 14160, 14161, 14162, 14163, 14164,
   14165, 14166, 14167, 14168, 14169, 14170, 14171, 14172, 14173, 14174,
   14175, 14176, 14177, 14178, 14179, 14180, 14181, 14182, 14183, 14184,
   14185, 14186, 14187, 14188, 14189, 14190, 14191, 14192, 14193, 14194,
   14195, 14196, 14197, 14198, 14199, 14200, 14201, 14202, 14203, 14204,
   14205, 14206, 14207, 14208, 14209, 14210, 14211, 14212, 14213, 14214,
   14215, 14216, 14217, 14218, 14219, 14220, 14221, 14222, 14223, 14224,
   14225, 14226, 14227, 14228, 14229, 14230, 14231, 14232, 14233, 14234,
   14235, 14236, 14237, 14238, 14239, 14240, 14241, 14242, 14243, 14244,
   14245, 14246, 14247, 14248, 14249, 14250, 14251, 14252, 14253, 14254,
   14255, 14256, 14257, 14258, 14259, 14260, 14261, 14262, 14263, 14264,
   14265, 14266, 14267, 14268, 14269, 14270, 14271, 14272, 14273, 14274,
   14275, 14276, 14277, 14278, 14279, 14280, 14281, 14282, 14283, 14284,
   14285, 14286, 14287, 14288, 14289, 14290, 14291, 14292, 14293, 14294,
   14295, 14296, 14297, 14298, 14299, 14300, 14301, 14302, 14303, 14304,
   14305, 14306, 14307, 14308, 14309, 14310, 14311, 14312, 14313, 14314,
   14315, 14316, 14317, 14318, 14319, 14320, 14321, 14322, 14323, 14324,
   14325, 14326, 14327, 14328, 14329, 14330, 14331, 14332, 14333, 14334,
   14335, 14336, 14337, 14338, 14339, 14340, 14341, 14342, 14343, 14355,
   14354, 14373, 14372, 14379, 14378, 14388, 14387, 14398, 14397, 14403,
   14411, 14413, 14418, 14418, 14427, 14426, 14440, 14439, 14444, 14448,
   14449, 14450, 14454, 14455, 14456, 14457, 14461, 14462, 14463, 14464,
   14469, 14493, 14519, 14530, 14542, 14555, 14570, 14589, 14595, 14620,
   14633, 14659, 14702, 14716, 14717, 14718, 14719, 14723, 14740, 14757,
   14758, 14762, 14763, 14764, 14765, 14769, 14770, 14787, 14798, 14799,
   14800, 14806, 14812, 14824, 14823, 14839, 14840, 14844, 14845, 14849,
   14864, 14865, 14866, 14871, 14872, 14877, 14876, 14896, 14908, 14921,
   14920, 14954, 14955, 14959, 14960, 14964, 14965, 14966, 14967, 14969,
   14968, 14981, 14982, 14983, 14984, 14985, 14991, 14996, 15002, 15013,
   15024, 15028, 15035, 15044, 15046, 15051, 15056, 15063, 15075, 15087,
   15094, 15106, 15107, 15110, 15111, 15114, 15119, 15127, 15138, 15153,
   15156, 15158, 15162, 15163, 15170, 15172, 15176, 15177, 15182, 15181,
   15185, 15184, 15188, 15187, 15191, 15190, 15193, 15194, 15195, 15196,
   15197, 15198, 15199, 15200, 15201, 15202, 15203, 15204, 15205, 15206,
   15207, 15208, 15209, 15210, 15211, 15212, 15213, 15214, 15215, 15216,
   15217, 15218, 15222, 15223, 15227, 15228, 15232, 15242, 15252, 15265,
   15280, 15293, 15306, 15318, 15323, 15331, 15336, 15344, 15349, 15356,
   15356, 15357, 15357, 15360, 15389, 15394, 15400, 15406, 15412, 15416,
   15420, 15421, 15425, 15452, 15454, 15458, 15462, 15466, 15473, 15474,
   15478, 15479, 15483, 15484, 15488, 15489, 15495, 15501, 15507, 15517,
   15516, 15526, 15527, 15532, 15533, 15534, 15539, 15540, 15541, 15545,
   15546, 15550, 15562, 15571, 15581, 15590, 15604, 15605, 15610, 15609,
   15625, 15626, 15627, 15631, 15632, 15636, 15636, 15658, 15659, 15663,
   15664, 15665, 15669, 15673, 15680, 15683, 15681, 15697, 15704, 15725,
   15742, 15744, 15748, 15749, 15753, 15754, 15762, 15763, 15764, 15765,
   15771, 15777, 15787, 15789, 15791, 15796, 15797, 15798, 15799, 15800,
   15804, 15805, 15806, 15807, 15808, 15809, 15819, 15820, 15825, 15838,
   15851, 15853, 15855, 15860, 15865, 15867, 15869, 15875, 15876, 15878,
   15884, 15883, 15900, 15901, 15905, 15910, 15918, 15918, 15942, 15943,
   15948, 15949, 15951, 15953, 15971, 15977, 15982, 15964, 16043, 16060,
   16084, 16115, 16119, 16128, 16151, 16080, 16214, 16238, 16247, 16254,
   16213, 16274, 16278, 16282, 16286, 16290, 16294, 16301, 16308, 16315,
   16325, 16326, 16330, 16331, 16332, 16336, 16337, 16342, 16344, 16343,
   16349, 16350, 16354, 16361, 16371, 16377, 16388
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADMIN_SYM", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM",
  "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM",
  "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLIENT_STATS_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_ADD_SYM", "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM",
  "COLUMN_DELETE_SYM", "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM",
  "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM",
  "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM",
  "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURRENT_ROLE",
  "CURRENT_POS_SYM", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXAMINED_SYM", "EXECUTE_SYM",
  "EXISTS", "EXIT_SYM", "EXPANSION_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM",
  "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM",
  "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM",
  "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM", "FROM",
  "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM",
  "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT", "GET_SYM",
  "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM",
  "GT_SYM", "HANDLER_SYM", "HARD_SYM", "HASH_SYM", "HAVING", "HELP_SYM",
  "HEX_NUM", "HEX_STRING", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "ID_SYM", "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM",
  "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM",
  "LAST_SYM", "LAST_VALUE", "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT",
  "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM",
  "LINES", "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM",
  "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB",
  "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_GTID_POS_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM",
  "MATCH", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM",
  "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "ONLINE_SYM",
  "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PAGE_CHECKSUM_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM", "PARTIAL",
  "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM", "PASSWORD",
  "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNED_SQLSTATE_SYM", "RETURNING_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVERSE_SYM", "REVOKE", "RIGHT", "ROLE_SYM", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "ROW_COUNT_SYM", "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM",
  "SCHEMA_NAME_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM",
  "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM",
  "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM",
  "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM", "SHIFT_LEFT",
  "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM", "SIGNED_SYM",
  "SIMPLE_SYM", "SLAVE", "SLAVES", "SLAVE_POS_SYM", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM",
  "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM",
  "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "SSL_SYM", "STARTING",
  "STARTS_SYM", "START_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN",
  "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_STATS_SYM",
  "TABLE_SYM", "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY",
  "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM",
  "THEN_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM",
  "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM",
  "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM",
  "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM",
  "WHERE", "WHILE_SYM", "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM",
  "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM",
  "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION",
  "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('",
  "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept",
  "query", "$@1", "opt_end_of_input", "verb_clause", "statement",
  "deallocate", "deallocate_or_drop", "prepare", "prepare_src", "execute",
  "$@2", "execute_using", "execute_var_list", "execute_var_ident", "help",
  "$@3", "change", "$@4", "master_defs", "master_def",
  "ignore_server_id_list", "ignore_server_id", "master_file_def",
  "optional_connection_name", "connection_name", "create", "$@5", "$@6",
  "$@7", "$@8", "$@9", "$@10", "$@11", "$@12", "$@13", "server_def",
  "server_options_list", "server_option", "event_tail", "$@14",
  "ev_schedule_time", "$@15", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@16", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@17", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@18", "$@19", "sp_cursor_stmt", "$@20",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "opt_value", "sp_hcond", "signal_stmt", "signal_value",
  "opt_signal_value", "opt_set_signal_information",
  "signal_information_item_list", "signal_allowed_expr",
  "signal_condition_information_item_name", "resignal_stmt",
  "get_diagnostics", "which_area", "diagnostics_information",
  "statement_information", "statement_information_item",
  "simple_target_specification", "statement_information_item_name",
  "condition_number", "condition_information",
  "condition_information_item", "condition_information_item_name",
  "sp_decl_idents", "sp_opt_default", "sp_proc_stmt", "sp_proc_stmt_if",
  "$@21", "sp_proc_stmt_statement", "$@22", "sp_proc_stmt_return", "$@23",
  "sp_proc_stmt_unlabeled", "$@24", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@25", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@26", "$@27", "$@28", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@29", "$@30", "searched_case_stmt", "$@31",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@32", "$@33", "searched_when_clause", "$@34",
  "$@35", "else_clause_opt", "sp_labeled_control", "$@36", "sp_opt_label",
  "sp_labeled_block", "$@37", "sp_unlabeled_block", "$@38",
  "sp_block_content", "$@39", "sp_unlabeled_control", "$@40", "$@41",
  "$@42", "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@43", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@44", "$@45", "create_like", "opt_create_select", "$@46", "$@47",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@48",
  "have_partitioning", "partition_entry", "$@49", "partition",
  "part_type_def", "$@50", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@51",
  "$@52", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@53", "part_name", "opt_part_values", "$@54", "$@55", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@56", "$@57",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@58", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@59", "$@60", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@61", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "$@62", "$@63", "$@64", "$@65", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@66",
  "field_def", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "virtual_column_func", "type", "$@67", "$@68",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "hex_num_or_string",
  "charset", "charset_name", "charset_name_or_default",
  "opt_load_data_charset", "old_or_new_charset_name",
  "old_or_new_charset_name_or_default", "collation_name", "opt_collate",
  "collation_name_or_default", "opt_default", "ascii", "unicode",
  "opt_binary", "opt_bin_mod", "ws_nweights", "$@69", "ws_level_flag_desc",
  "ws_level_flag_reverse", "ws_level_flags", "ws_level_number",
  "ws_level_list_item", "ws_level_list", "ws_level_range",
  "ws_level_list_or_range", "opt_ws_levels", "opt_primary", "references",
  "opt_ref_list", "ref_list", "opt_match_clause", "opt_on_update_delete",
  "delete_option", "normal_key_type", "constraint_key_type",
  "key_or_index", "opt_key_or_index", "keys_or_index", "opt_unique",
  "fulltext", "spatial", "init_key_options", "key_alg",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "key_using_alg", "all_key_opt", "normal_key_opt", "spatial_key_opt",
  "fulltext_key_opt", "btree_or_rtree", "key_list", "key_part",
  "opt_ident", "opt_if_not_exists_ident", "opt_component", "string_list",
  "alter", "$@70", "$@71", "$@72", "$@73", "$@74", "$@75", "$@76", "$@77",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@78", "$@79", "$@80",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@81", "add_part_extra", "reorg_partition_rule", "$@82",
  "reorg_parts_rule", "$@83", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@84", "$@85", "$@86",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "alter_options", "$@87",
  "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "$@88", "$@89", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "$@90",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@91", "opt_checksum_type", "repair",
  "$@92", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@93", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@94", "persistent_index_stat_spec",
  "$@95", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check", "$@96", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@97",
  "opt_no_write_to_binlog", "rename", "$@98", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@99",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@100",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@101", "cache_keys_spec",
  "$@102", "cache_key_list_or_empty", "opt_ignore_leaves", "select",
  "select_init", "select_paren", "select_paren_derived", "select_init2",
  "$@103", "select_part2", "$@104", "$@105", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "opt_default_time_precision",
  "opt_time_precision", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "opt_dyncol_type", "dyncol_type", "dyncall_create_element",
  "dyncall_create_list", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@106", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@107", "$@108", "$@109",
  "variable", "$@110", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "$@111", "gorder_list",
  "in_sum_expr", "$@112", "cast_type", "$@113", "opt_expr_list",
  "expr_list", "ident_list_arg", "ident_list", "opt_expr", "opt_else",
  "when_list", "table_ref", "join_table_list", "esc_table_ref",
  "derived_table_list", "join_table", "$@114", "$@115", "$@116", "$@117",
  "$@118", "$@119", "inner_join", "normal_join", "opt_use_partition",
  "use_partition", "table_factor", "$@120", "select_derived_union",
  "$@121", "$@122", "select_init2_derived", "select_part2_derived",
  "$@123", "$@124", "select_derived", "$@125", "select_derived2", "$@126",
  "$@127", "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@128",
  "$@129", "index_hints_list", "opt_index_hints_list", "$@130",
  "opt_key_definition", "$@131", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@132", "having_clause", "$@133", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@134", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_option",
  "delete_limit_clause", "int_num", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "choice", "procedure_clause", "$@135", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@136",
  "select_var_list", "select_var_ident", "into", "$@137",
  "into_destination", "$@138", "$@139", "do", "$@140", "drop", "$@141",
  "$@142", "$@143", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists", "opt_temporary", "insert", "$@144",
  "$@145", "replace", "$@146", "$@147", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@148", "fields", "insert_values", "$@149", "$@150", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@151", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@152", "update", "$@153", "$@154", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@155", "single_multi", "$@156", "$@157", "$@158", "$@159",
  "opt_select_expressions", "table_wild_list", "table_wild_one",
  "opt_wild", "opt_delete_options", "opt_delete_option", "truncate",
  "$@160", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@161", "show_param",
  "$@162", "$@163", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@164", "$@165", "explainable_command",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "$@166", "flush_options", "$@167", "$@168",
  "opt_with_read_lock", "flush_options_list", "flush_option",
  "opt_table_list", "optional_flush_tables_arguments", "reset", "$@169",
  "reset_options", "reset_option", "$@170", "slave_reset_options", "purge",
  "$@171", "purge_options", "purge_option", "kill", "$@172", "kill_type",
  "kill_option", "kill_expr", "shutdown", "use", "load", "$@173", "$@174",
  "$@175", "$@176", "data_or_xml", "opt_local", "load_data_lock",
  "opt_duplicate", "opt_field_term", "field_term_list", "field_term",
  "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user", "user_or_role", "keyword", "keyword_sp", "set",
  "$@177", "start_option_value_list", "$@178", "$@179", "$@180",
  "start_option_value_list_following_option_type", "$@181",
  "option_value_list_continued", "option_value_list", "$@182", "$@183",
  "option_value", "$@184", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@185",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@186", "handler", "$@187", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@188",
  "handler_rkey_mode", "revoke", "revoke_command", "admin_option_for_role",
  "grant", "grant_command", "opt_with_admin", "opt_with_admin_option",
  "role_list", "current_role", "grant_role", "opt_table",
  "grant_privileges", "opt_privileges", "object_privilege_list",
  "object_privilege", "$@189", "$@190", "$@191", "$@192", "opt_and",
  "require_list", "require_list_element", "grant_ident", "user_list",
  "grant_list", "user_and_role_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@193", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@194",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@195",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@196", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@197",
  "view_list_opt", "view_list", "view_select", "$@198", "view_select_aux",
  "view_check_option", "trigger_tail", "$@199", "$@200", "$@201",
  "udf_tail", "sf_tail", "$@202", "$@203", "$@204", "$@205", "$@206",
  "sp_tail", "$@207", "$@208", "$@209", "$@210", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@211", "opt_migrate", "install", "uninstall", "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   124,    38,    45,    43,    42,    47,    37,
      94,   126,    40,    41,    44,    33,   123,   125,    59,    64,
      46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   662,   663,   664,   663,   663,   665,   665,   666,   666,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   667,   667,   667,   667,   667,   667,   667,
     667,   667,   667,   667,   667,   668,   669,   669,   670,   671,
     671,   673,   672,   674,   674,   675,   675,   676,   678,   677,
     680,   679,   681,   681,   682,   682,   682,   682,   682,   682,
     682,   682,   682,   682,   682,   682,   682,   682,   682,   682,
     682,   683,   683,   683,   684,   685,   685,   685,   685,   685,
     685,   685,   686,   686,   687,   689,   688,   690,   691,   688,
     692,   693,   688,   694,   695,   688,   696,   688,   697,   688,
     688,   688,   688,   688,   688,   698,   699,   699,   700,   700,
     700,   700,   700,   700,   700,   702,   701,   704,   703,   703,
     705,   705,   705,   705,   706,   706,   707,   707,   708,   708,
     709,   709,   710,   710,   712,   711,   713,   713,   713,   713,
     713,   713,   713,   713,   713,   713,   713,   713,   713,   714,
     715,   715,   716,   716,   717,   717,   718,   718,   718,   718,
     718,   718,   718,   719,   719,   719,   720,   720,   722,   721,
     723,   723,   724,   724,   725,   725,   726,   726,   727,   727,
     728,   729,   730,   730,   731,   731,   732,   733,   733,   733,
     733,   734,   734,   735,   735,   736,   736,   738,   737,   737,
     739,   737,   737,   741,   740,   742,   742,   743,   743,   744,
     745,   745,   746,   747,   747,   748,   748,   748,   748,   748,
     749,   750,   750,   751,   751,   752,   752,   753,   753,   754,
     754,   754,   755,   755,   755,   755,   755,   755,   755,   755,
     755,   755,   755,   755,   756,   757,   758,   758,   759,   759,
     760,   760,   761,   762,   762,   763,   763,   764,   765,   765,
     766,   767,   767,   767,   767,   767,   767,   767,   767,   767,
     767,   767,   767,   767,   768,   768,   769,   769,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     770,   772,   771,   774,   773,   776,   775,   778,   777,   779,
     780,   781,   783,   782,   784,   785,   785,   785,   786,   786,
     788,   789,   790,   787,   791,   791,   791,   792,   792,   794,
     795,   793,   797,   796,   798,   798,   799,   799,   801,   802,
     800,   804,   805,   803,   806,   806,   808,   807,   809,   809,
     811,   810,   813,   812,   815,   814,   816,   817,   818,   816,
     819,   816,   820,   820,   821,   821,   821,   822,   823,   824,
     825,   825,   826,   826,   827,   828,   829,   829,   831,   830,
     832,   832,   832,   833,   833,   833,   834,   835,   835,   835,
     836,   836,   836,   836,   836,   836,   836,   836,   837,   838,
     838,   838,   839,   839,   839,   839,   839,   840,   841,   841,
     841,   842,   842,   842,   842,   842,   842,   842,   843,   844,
     844,   844,   845,   845,   845,   846,   847,   848,   849,   850,
     851,   851,   851,   852,   853,   854,   855,   856,   857,   858,
     859,   860,   861,   861,   862,   862,   863,   863,   865,   864,
     864,   866,   864,   864,   867,   867,   868,   869,   868,   870,
     868,   871,   872,   872,   874,   873,   875,   877,   876,   878,
     879,   880,   879,   879,   879,   879,   879,   881,   881,   882,
     882,   883,   883,   884,   885,   886,   887,   888,   888,   889,
     890,   889,   891,   889,   892,   892,   893,   894,   895,   895,
     896,   896,   897,   897,   899,   898,   900,   901,   902,   901,
     903,   901,   904,   904,   905,   905,   906,   906,   908,   909,
     907,   910,   910,   911,   911,   912,   912,   913,   913,   915,
     914,   916,   917,   917,   918,   918,   919,   919,   919,   919,
     919,   919,   919,   919,   919,   921,   922,   920,   923,   923,
     924,   924,   925,   925,   926,   926,   927,   927,   928,   928,
     929,   930,   930,   931,   931,   932,   932,   933,   933,   933,
     934,   934,   934,   934,   934,   934,   934,   934,   934,   934,
     934,   934,   934,   934,   934,   934,   934,   934,   934,   934,
     935,   934,   934,   934,   934,   934,   934,   934,   934,   934,
     934,   934,   934,   934,   934,   934,   934,   936,   937,   938,
     939,   940,   940,   940,   940,   940,   940,   940,   941,   941,
     941,   942,   942,   943,   943,   943,   943,   944,   945,   945,
     946,   946,   947,   947,   949,   948,   950,   948,   951,   948,
     952,   948,   948,   948,   953,   953,   954,   955,   955,   956,
     958,   957,   959,   959,   960,   960,   961,   961,   961,   962,
     962,   963,   963,   964,   964,   964,   965,   966,   967,   967,
     967,   967,   967,   967,   967,   967,   967,   967,   967,   967,
     967,   967,   967,   967,   967,   967,   967,   967,   967,   967,
     967,   967,   967,   967,   967,   967,   967,   967,   967,   967,
     967,   967,   967,   968,   967,   969,   967,   967,   967,   970,
     970,   970,   970,   970,   970,   970,   970,   971,   972,   972,
     973,   973,   974,   974,   974,   974,   974,   975,   975,   975,
     975,   975,   976,   976,   976,   977,   977,   977,   978,   979,
     979,   980,   980,   981,   981,   981,   982,   982,   982,   982,
     983,   983,   984,   984,   985,   985,   986,   986,   987,   987,
     987,   987,   987,   987,   987,   987,   987,   987,   987,   987,
     987,   987,   987,   988,   989,   989,   990,   990,   991,   991,
     992,   992,   993,   993,   994,   994,   995,   995,   996,   996,
     997,   998,   998,   999,   999,  1000,  1000,  1001,  1001,  1001,
    1002,  1002,  1002,  1003,  1003,  1003,  1003,  1003,  1003,  1003,
    1004,  1004,  1006,  1005,  1007,  1007,  1008,  1009,  1009,  1009,
    1009,  1010,  1011,  1012,  1012,  1013,  1014,  1014,  1015,  1015,
    1016,  1016,  1017,  1018,  1018,  1019,  1019,  1020,  1020,  1020,
    1020,  1021,  1021,  1021,  1021,  1021,  1022,  1022,  1022,  1022,
    1022,  1023,  1024,  1024,  1025,  1025,  1026,  1026,  1027,  1027,
    1027,  1028,  1028,  1029,  1030,  1031,  1032,  1032,  1033,  1033,
    1034,  1034,  1035,  1035,  1036,  1036,  1037,  1037,  1038,  1038,
    1039,  1039,  1040,  1040,  1040,  1040,  1040,  1040,  1041,  1041,
    1042,  1043,  1043,  1044,  1044,  1044,  1045,  1045,  1046,  1046,
    1047,  1047,  1048,  1049,  1049,  1050,  1050,  1052,  1053,  1051,
    1054,  1051,  1051,  1055,  1051,  1056,  1051,  1057,  1051,  1058,
    1051,  1059,  1051,  1051,  1051,  1051,  1051,  1051,  1060,  1060,
    1060,  1060,  1061,  1061,  1062,  1062,  1063,  1063,  1064,  1064,
    1064,  1064,  1064,  1064,  1064,  1064,  1064,  1064,  1065,  1064,
    1064,  1066,  1064,  1067,  1064,  1064,  1064,  1064,  1064,  1068,
    1069,  1069,  1071,  1070,  1072,  1072,  1072,  1074,  1073,  1075,
    1076,  1075,  1077,  1077,  1078,  1079,  1079,  1080,  1081,  1081,
    1081,  1082,  1081,  1083,  1084,  1081,  1081,  1081,  1081,  1081,
    1081,  1081,  1081,  1081,  1081,  1081,  1081,  1081,  1081,  1081,
    1081,  1085,  1085,  1085,  1085,  1085,  1086,  1086,  1087,  1087,
    1088,  1088,  1089,  1089,  1091,  1090,  1092,  1092,  1093,  1093,
    1094,  1094,  1095,  1095,  1095,  1096,  1096,  1096,  1097,  1097,
    1097,  1097,  1099,  1098,  1100,  1098,  1098,  1098,  1101,  1102,
    1102,  1103,  1103,  1104,  1104,  1104,  1106,  1105,  1107,  1107,
    1108,  1108,  1108,  1109,  1109,  1109,  1110,  1110,  1112,  1111,
    1113,  1113,  1113,  1115,  1114,  1116,  1116,  1117,  1117,  1118,
    1118,  1118,  1120,  1119,  1121,  1121,  1122,  1123,  1123,  1124,
    1124,  1125,  1126,  1125,  1127,  1128,  1127,  1129,  1129,  1129,
    1130,  1130,  1130,  1131,  1131,  1132,  1134,  1133,  1135,  1135,
    1136,  1136,  1137,  1137,  1137,  1137,  1137,  1137,  1139,  1138,
    1140,  1140,  1140,  1142,  1141,  1141,  1143,  1143,  1144,  1144,
    1145,  1147,  1146,  1148,  1148,  1149,  1149,  1150,  1151,  1152,
    1152,  1154,  1153,  1155,  1155,  1156,  1156,  1157,  1158,  1160,
    1159,  1162,  1161,  1163,  1163,  1164,  1164,  1165,  1166,  1166,
    1167,  1167,  1168,  1168,  1170,  1169,  1172,  1173,  1171,  1174,
    1174,  1174,  1174,  1174,  1175,  1175,  1176,  1176,  1177,  1177,
    1178,  1178,  1178,  1179,  1179,  1179,  1180,  1180,  1180,  1181,
    1181,  1182,  1183,  1184,  1184,  1184,  1184,  1184,  1185,  1185,
    1185,  1186,  1186,  1186,  1187,  1187,  1188,  1188,  1188,  1188,
    1188,  1188,  1188,  1188,  1188,  1188,  1188,  1189,  1189,  1189,
    1189,  1189,  1189,  1190,  1190,  1190,  1190,  1190,  1190,  1190,
    1190,  1190,  1190,  1190,  1190,  1190,  1190,  1191,  1191,  1191,
    1191,  1191,  1191,  1191,  1191,  1191,  1191,  1191,  1191,  1191,
    1191,  1191,  1192,  1192,  1193,  1193,  1194,  1194,  1195,  1195,
    1196,  1196,  1196,  1196,  1196,  1196,  1197,  1197,  1198,  1198,
    1199,  1199,  1199,  1199,  1199,  1199,  1199,  1199,  1199,  1199,
    1199,  1200,  1201,  1201,  1202,  1202,  1202,  1202,  1202,  1202,
    1202,  1202,  1202,  1202,  1202,  1202,  1202,  1202,  1202,  1202,
    1202,  1202,  1202,  1202,  1202,  1202,  1202,  1202,  1202,  1202,
    1202,  1202,  1202,  1202,  1203,  1203,  1203,  1203,  1203,  1203,
    1203,  1203,  1203,  1203,  1203,  1203,  1203,  1203,  1203,  1203,
    1203,  1203,  1203,  1203,  1203,  1203,  1203,  1203,  1203,  1203,
    1203,  1203,  1204,  1204,  1204,  1204,  1204,  1204,  1204,  1204,
    1204,  1204,  1204,  1204,  1204,  1204,  1204,  1204,  1204,  1204,
    1204,  1204,  1204,  1204,  1204,  1204,  1204,  1204,  1204,  1205,
    1205,  1205,  1205,  1205,  1205,  1205,  1205,  1205,  1205,  1205,
    1205,  1205,  1205,  1205,  1205,  1205,  1205,  1205,  1205,  1205,
    1205,  1205,  1205,  1206,  1206,  1206,  1206,  1206,  1206,  1206,
    1206,  1208,  1207,  1207,  1209,  1209,  1210,  1210,  1211,  1211,
    1212,  1212,  1213,  1213,  1214,  1215,  1215,  1215,  1215,  1215,
    1215,  1215,  1216,  1217,  1215,  1215,  1215,  1215,  1215,  1215,
    1215,  1215,  1215,  1215,  1215,  1218,  1215,  1220,  1219,  1221,
    1221,  1221,  1222,  1222,  1223,  1223,  1224,  1225,  1224,  1226,
    1226,  1228,  1227,  1229,  1229,  1229,  1229,  1229,  1229,  1229,
    1229,  1229,  1229,  1229,  1229,  1230,  1229,  1231,  1231,  1232,
    1232,  1233,  1233,  1234,  1234,  1235,  1235,  1236,  1236,  1237,
    1237,  1238,  1238,  1239,  1240,  1240,  1241,  1241,  1242,  1243,
    1242,  1244,  1242,  1242,  1245,  1242,  1246,  1242,  1242,  1247,
    1242,  1248,  1242,  1242,  1249,  1249,  1249,  1250,  1250,  1251,
    1251,  1252,  1254,  1253,  1253,  1253,  1255,  1256,  1257,  1255,
    1258,  1260,  1261,  1259,  1263,  1262,  1265,  1266,  1264,  1267,
    1268,  1269,  1269,  1270,  1270,  1270,  1270,  1271,  1271,  1273,
    1272,  1274,  1272,  1275,  1275,  1276,  1277,  1276,  1279,  1278,
    1280,  1280,  1281,  1281,  1282,  1282,  1283,  1283,  1284,  1284,
    1284,  1284,  1284,  1284,  1284,  1284,  1284,  1284,  1284,  1284,
    1285,  1285,  1285,  1285,  1285,  1285,  1285,  1285,  1285,  1286,
    1286,  1286,  1286,  1287,  1287,  1287,  1288,  1288,  1289,  1289,
    1290,  1291,  1290,  1292,  1293,  1292,  1294,  1294,  1295,  1295,
    1296,  1296,  1297,  1297,  1297,  1298,  1299,  1299,  1300,  1301,
    1301,  1303,  1302,  1304,  1304,  1305,  1305,  1305,  1306,  1306,
    1307,  1307,  1308,  1308,  1308,  1309,  1309,  1309,  1310,  1310,
    1310,  1310,  1310,  1311,  1312,  1312,  1312,  1312,  1313,  1313,
    1313,  1314,  1314,  1314,  1314,  1314,  1314,  1315,  1315,  1315,
    1315,  1315,  1316,  1316,  1316,  1316,  1316,  1317,  1317,  1317,
    1317,  1317,  1318,  1319,  1319,  1320,  1320,  1321,  1322,  1321,
    1323,  1323,  1324,  1324,  1325,  1327,  1326,  1328,  1328,  1329,
    1329,  1331,  1330,  1333,  1334,  1332,  1332,  1332,  1336,  1335,
    1338,  1337,  1339,  1337,  1337,  1337,  1337,  1337,  1337,  1337,
    1340,  1337,  1337,  1337,  1337,  1337,  1337,  1341,  1341,  1342,
    1343,  1344,  1344,  1345,  1346,  1346,  1347,  1347,  1349,  1350,
    1348,  1352,  1353,  1351,  1354,  1354,  1354,  1354,  1355,  1355,
    1356,  1356,  1357,  1358,  1358,  1358,  1359,  1358,  1360,  1360,
    1361,  1361,  1362,  1361,  1363,  1361,  1364,  1364,  1365,  1365,
    1366,  1367,  1367,  1368,  1368,  1370,  1369,  1371,  1371,  1372,
    1372,  1373,  1373,  1374,  1375,  1374,  1377,  1378,  1376,  1379,
    1379,  1380,  1381,  1381,  1382,  1383,  1383,  1385,  1384,  1387,
    1388,  1386,  1389,  1386,  1390,  1386,  1391,  1391,  1392,  1392,
    1393,  1393,  1394,  1394,  1395,  1395,  1396,  1396,  1396,  1398,
    1397,  1399,  1399,  1400,  1400,  1401,  1401,  1402,  1402,  1402,
    1402,  1402,  1402,  1402,  1402,  1402,  1403,  1403,  1405,  1404,
    1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,
    1406,  1406,  1406,  1406,  1407,  1406,  1408,  1406,  1406,  1406,
    1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,
    1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,
    1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,  1406,
    1406,  1406,  1406,  1406,  1406,  1406,  1409,  1409,  1409,  1410,
    1410,  1411,  1411,  1412,  1412,  1413,  1413,  1414,  1414,  1415,
    1415,  1416,  1416,  1417,  1417,  1417,  1419,  1418,  1420,  1418,
    1421,  1421,  1421,  1421,  1421,  1422,  1422,  1423,  1423,  1423,
    1424,  1424,  1424,  1426,  1425,  1428,  1429,  1427,  1427,  1430,
    1430,  1431,  1431,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1433,  1433,  1434,  1434,  1436,  1435,  1437,  1437,
    1439,  1438,  1438,  1438,  1440,  1440,  1442,  1441,  1443,  1444,
    1444,  1446,  1445,  1447,  1447,  1447,  1448,  1448,  1448,  1448,
    1449,  1449,  1450,  1451,  1453,  1454,  1455,  1456,  1452,  1457,
    1457,  1458,  1458,  1459,  1459,  1459,  1460,  1460,  1460,  1461,
    1461,  1462,  1462,  1463,  1463,  1463,  1463,  1464,  1464,  1465,
    1465,  1466,  1466,  1467,  1467,  1468,  1468,  1469,  1469,  1470,
    1470,  1470,  1471,  1471,  1472,  1472,  1473,  1473,  1474,  1474,
    1475,  1476,  1476,  1476,  1476,  1477,  1477,  1477,  1477,  1478,
    1479,  1479,  1479,  1480,  1480,  1480,  1480,  1480,  1480,  1480,
    1480,  1480,  1480,  1480,  1481,  1481,  1481,  1481,  1481,  1482,
    1482,  1482,  1483,  1483,  1484,  1484,  1485,  1486,  1486,  1487,
    1487,  1488,  1488,  1488,  1489,  1489,  1489,  1489,  1490,  1490,
    1490,  1491,  1491,  1492,  1493,  1493,  1494,  1495,  1496,  1497,
    1497,  1498,  1498,  1499,  1499,  1499,  1500,  1500,  1500,  1501,
    1501,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,
    1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,
    1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,
    1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,
    1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,
    1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,
    1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1503,  1505,
    1504,  1507,  1506,  1508,  1506,  1509,  1506,  1511,  1510,  1510,
    1512,  1512,  1514,  1513,  1515,  1513,  1517,  1516,  1516,  1518,
    1518,  1518,  1519,  1519,  1519,  1519,  1520,  1520,  1520,  1520,
    1521,  1522,  1522,  1522,  1522,  1522,  1522,  1522,  1522,  1522,
    1523,  1523,  1523,  1524,  1524,  1524,  1524,  1525,  1526,  1527,
    1527,  1528,  1528,  1528,  1528,  1529,  1529,  1529,  1530,  1530,
    1530,  1530,  1530,  1532,  1531,  1533,  1533,  1534,  1534,  1535,
    1536,  1536,  1536,  1536,  1536,  1538,  1537,  1539,  1539,  1540,
    1539,  1541,  1541,  1542,  1542,  1543,  1543,  1543,  1543,  1544,
    1543,  1545,  1545,  1545,  1545,  1545,  1546,  1547,  1547,  1547,
    1547,  1547,  1547,  1548,  1548,  1549,  1550,  1550,  1550,  1550,
    1550,  1551,  1551,  1552,  1552,  1553,  1553,  1554,  1555,  1555,
    1556,  1556,  1557,  1557,  1558,  1558,  1559,  1559,  1561,  1560,
    1562,  1560,  1563,  1560,  1564,  1560,  1560,  1560,  1560,  1560,
    1560,  1560,  1560,  1560,  1560,  1560,  1560,  1560,  1560,  1560,
    1560,  1560,  1560,  1560,  1560,  1560,  1560,  1560,  1560,  1560,
    1560,  1560,  1565,  1565,  1566,  1566,  1567,  1567,  1567,  1568,
    1568,  1568,  1568,  1569,  1569,  1570,  1570,  1571,  1571,  1572,
    1572,  1573,  1573,  1574,  1574,  1574,  1574,  1574,  1575,  1575,
    1576,  1576,  1577,  1578,  1578,  1578,  1578,  1578,  1579,  1579,
    1580,  1580,  1581,  1581,  1582,  1582,  1582,  1582,  1582,  1584,
    1583,  1585,  1585,  1586,  1586,  1586,  1587,  1587,  1587,  1588,
    1588,  1589,  1590,  1590,  1591,  1592,  1593,  1593,  1595,  1594,
    1596,  1596,  1596,  1597,  1597,  1599,  1598,  1600,  1600,  1601,
    1601,  1601,  1602,  1602,  1603,  1604,  1603,  1605,  1606,  1607,
    1608,  1608,  1609,  1609,  1610,  1610,  1610,  1610,  1610,  1610,
    1610,  1610,  1611,  1611,  1611,  1612,  1612,  1612,  1612,  1612,
    1613,  1613,  1613,  1613,  1613,  1613,  1614,  1614,  1615,  1616,
    1617,  1617,  1617,  1618,  1619,  1619,  1619,  1620,  1620,  1620,
    1622,  1621,  1623,  1623,  1624,  1624,  1626,  1625,  1627,  1627,
    1628,  1628,  1628,  1628,  1630,  1631,  1632,  1629,  1633,  1633,
    1635,  1636,  1637,  1638,  1639,  1634,  1641,  1642,  1643,  1644,
    1640,  1645,  1645,  1645,  1645,  1645,  1645,  1646,  1646,  1646,
    1647,  1647,  1648,  1648,  1648,  1649,  1649,  1650,  1651,  1650,
    1652,  1652,  1653,  1653,  1654,  1654,  1655
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     4,     1,
       2,     0,     4,     0,     2,     3,     1,     2,     0,     3,
       0,     6,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       1,     0,     1,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     0,     1,     1,     0,     7,     0,     0,    15,
       0,     0,    15,     0,     0,    15,     0,     6,     0,     3,
       4,     5,     4,     3,     2,    10,     1,     3,     2,     2,
       2,     2,     2,     2,     2,     0,    13,     0,     6,     2,
       0,     1,     3,     1,     0,     2,     0,     2,     0,     1,
       3,     4,     0,     2,     0,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     0,     2,     0,     2,     2,     2,     2,     2,
       3,     3,     1,     1,     1,     2,     3,     3,     0,     4,
       0,     3,     0,     1,     3,     1,     0,     1,     3,     1,
       0,     3,     0,     1,     3,     1,     4,     0,     1,     1,
       1,     0,     3,     2,     3,     0,     3,     0,     5,     5,
       0,     7,     5,     0,     2,     1,     1,     1,     3,     1,
       1,     1,     3,     0,     1,     1,     1,     1,     2,     1,
       3,     1,     1,     0,     1,     0,     2,     3,     5,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     4,     0,     1,     1,     3,
       1,     3,     3,     1,     2,     1,     1,     1,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     5,     0,     2,     0,     3,     0,     2,     2,
       2,     2,     0,     6,     2,     0,     2,     1,     1,     3,
       0,     0,     0,     7,     0,     2,     2,     1,     1,     0,
       0,     8,     0,     6,     1,     2,     1,     2,     0,     0,
       6,     0,     0,     6,     0,     2,     0,     5,     0,     1,
       0,     5,     0,     2,     0,     5,     4,     0,     0,     8,
       0,     7,     1,     1,     1,     1,     1,     2,     4,     5,
       0,     4,     4,     4,     3,     3,     2,     2,     0,     2,
       1,     2,     3,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     1,     1,     1,     2,     2,     2,     1,     1,
       1,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     4,     0,     1,     1,     1,     1,     1,     0,     7,
       3,     0,     5,     1,     2,     4,     0,     0,     5,     0,
       7,     1,     0,     1,     0,     4,     0,     0,     3,     5,
       5,     0,     4,     2,     2,     2,     2,     0,     1,     0,
       1,     1,     3,     1,     4,     5,     5,     0,     2,     0,
       0,     7,     0,     9,     1,     3,     1,     1,     0,     2,
       0,     3,     1,     3,     0,     6,     1,     0,     0,     5,
       0,     4,     1,     1,     1,     3,     1,     3,     0,     0,
       5,     1,     3,     1,     1,     0,     3,     1,     3,     0,
       4,     1,     0,     1,     2,     1,     3,     4,     3,     3,
       3,     3,     4,     4,     3,     0,     0,     6,     0,     1,
       0,     1,     1,     2,     1,     1,     0,     1,     1,     2,
       1,     0,     3,     0,     1,     1,     2,     1,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       0,     6,     1,     1,     3,     4,     4,     2,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     4,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     2,     2,     0,     8,     0,     9,     0,     9,
       0,     9,     8,     2,     0,     1,     4,     0,     1,     2,
       0,     3,     2,     8,     0,     2,     0,     1,     1,     0,
       1,     2,     1,     1,     2,     2,     4,     3,     3,     3,
       3,     1,     2,     1,     1,     3,     2,     3,     2,     2,
       1,     3,     3,     2,     3,     1,     2,     2,     2,     1,
       2,     1,     1,     1,     2,     3,     2,     3,     2,     2,
       3,     3,     3,     0,     6,     0,     6,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     2,     1,     2,     3,     2,     1,     1,     1,
       1,     1,     1,     1,     2,     0,     1,     1,     5,     0,
       1,     2,     1,     1,     1,     1,     3,     3,     3,     3,
       0,     1,     0,     1,     0,     1,     2,     1,     1,     2,
       2,     4,     1,     3,     2,     1,     2,     2,     2,     3,
       3,     3,     3,     2,     2,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     0,     2,     1,     1,     1,     1,
       1,     0,     2,     1,     1,     0,     1,     1,     2,     2,
       1,     2,     2,     0,     1,     1,     1,     3,     1,     3,
       0,     1,     0,     4,     1,     1,     1,     0,     1,     2,
       1,     1,     2,     1,     3,     3,     1,     1,     0,     2,
       0,     1,     5,     0,     3,     3,     1,     0,     2,     2,
       2,     0,     3,     3,     6,     6,     1,     1,     2,     2,
       2,     1,     2,     2,     1,     1,     0,     1,     1,     1,
       1,     0,     1,     1,     1,     0,     1,     2,     0,     1,
       0,     1,     0,     1,     1,     2,     1,     2,     1,     2,
       2,     2,     3,     2,     3,     3,     3,     3,     1,     1,
       1,     1,     3,     1,     1,     1,     4,     2,     1,     4,
       0,     1,     2,     0,     2,     1,     3,     0,     0,     7,
       0,     5,     7,     0,     5,     0,     5,     0,     5,     0,
       4,     0,    10,     3,     4,     3,     3,     7,     0,     3,
       1,     4,     0,     3,     0,     2,     0,     1,     0,     2,
       2,     2,     2,     1,     1,     1,     4,     4,     0,     6,
       4,     0,     5,     0,     6,     4,     3,     1,     7,     2,
       1,     1,     0,     6,     0,     3,     2,     0,     5,     0,
       0,     6,     1,     3,     1,     1,     3,     3,     3,     2,
       4,     0,     7,     0,     0,     8,     5,     5,     3,     4,
       2,     2,     6,     5,     3,     5,     1,     1,     1,     1,
       1,     0,     1,     1,     2,     2,     3,     3,     3,     3,
       0,     1,     0,     1,     0,     2,     0,     1,     2,     1,
       1,     1,     0,     1,     1,     0,     2,     1,     0,     1,
       1,     1,     0,     6,     0,     5,     4,     4,     3,     0,
       1,     1,     3,     3,     2,     2,     0,     2,     1,     3,
       0,     1,     1,     0,     2,     4,     1,     3,     0,     5,
       0,     1,     1,     0,     6,     0,     1,     1,     2,     1,
       1,     1,     0,     5,     1,     3,     2,     0,     3,     1,
       4,     1,     0,     4,     1,     0,     4,     0,     1,     3,
       0,     1,     3,     1,     1,     2,     0,     5,     0,     1,
       1,     2,     1,     1,     1,     1,     1,     2,     0,     5,
       0,     1,     1,     0,     4,     4,     3,     5,     1,     3,
       3,     0,     6,     1,     1,     1,     3,     2,     3,     1,
       1,     0,     6,     1,     1,     1,     3,     3,     4,     0,
       6,     0,     2,     0,     4,     0,     2,     1,     2,     4,
       2,     3,     2,     3,     0,     3,     0,     0,     6,     2,
       1,     1,     2,     2,     8,     4,     0,     1,     2,     1,
       1,     1,     1,     0,     2,     4,     3,     1,     1,     3,
       4,     0,     0,     0,     2,     2,     1,     1,     0,     2,
       3,     0,     2,     3,     0,     2,     3,     3,     3,     2,
       3,     4,     3,     4,     3,     4,     1,     3,     4,     3,
       3,     6,     1,     5,     6,     5,     7,     6,     8,     5,
       6,     4,     4,     5,     3,     4,     1,     3,     3,     3,
       3,     3,     3,     5,     5,     3,     3,     3,     3,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     2,
       1,     2,     1,     1,     1,     2,     2,     1,     1,     2,
       2,     4,     1,     3,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     3,     2,     2,     2,     2,     3,
       3,     5,     6,     4,     4,     7,     2,     6,     5,     6,
       6,     4,     4,     5,     4,     6,     2,     2,     4,     4,
       4,    10,     6,     8,     6,     4,     4,     6,     4,     4,
       4,     6,     4,     7,     7,     7,     6,     6,     6,     6,
       3,     4,     6,     8,     2,     2,     8,     8,     6,     6,
       2,     6,     6,     8,     8,     6,     8,     6,     2,     8,
       8,     2,     2,     2,     6,     6,     4,     4,     8,     4,
       4,     4,     4,     3,     8,     4,     4,     6,     4,     4,
       4,     6,     8,     4,     3,     6,     4,     6,     5,     8,
       7,    10,     1,     6,     4,     4,     4,     4,     4,     6,
       4,     0,     5,     6,     2,     3,     0,     4,     0,     3,
       0,     1,     1,     3,     4,     4,     5,     4,     4,     4,
       5,     4,     0,     0,     7,     4,     5,     4,     5,     4,
       4,     4,     4,     4,     5,     0,     8,     0,     3,     3,
       1,     4,     0,     1,     0,     2,     0,     0,     4,     4,
       2,     0,     3,     2,     3,     2,     1,     1,     2,     1,
       2,     1,     2,     2,     2,     0,     3,     0,     1,     1,
       3,     1,     3,     1,     3,     0,     1,     0,     2,     4,
       5,     1,     1,     1,     1,     4,     1,     3,     3,     0,
       6,     0,     8,     4,     0,     8,     0,    10,     6,     0,
       8,     0,    10,     6,     1,     2,     1,     1,     2,     0,
       1,     5,     0,     5,     3,     5,     2,     0,     0,     7,
       1,     0,     0,     6,     0,     3,     0,     0,     5,     0,
       1,     0,     1,     0,     2,     3,     3,     1,     1,     0,
       7,     0,     7,     1,     2,     0,     0,     2,     0,     2,
       0,     1,     1,     1,     1,     3,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     0,     2,     0,     1,
       0,     0,     3,     0,     0,     3,     2,     0,     0,     4,
       4,     2,     0,     1,     1,     3,     3,     1,     2,     0,
       1,     0,     4,     4,     2,     0,     1,     1,     0,     1,
       0,     1,     2,     5,     4,     1,     3,     3,     1,     1,
       1,     1,     1,     1,     0,     2,     3,     4,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     0,     6,
       0,     1,     3,     1,     3,     0,     2,     3,     1,     2,
       1,     0,     3,     0,     0,     7,     2,     1,     0,     3,
       0,     7,     0,     7,     4,     6,     4,     4,     4,     4,
       0,     6,     4,     4,     5,     6,     4,     1,     3,     1,
       2,     1,     3,     1,     0,     2,     0,     1,     0,     0,
       8,     0,     0,     6,     0,     1,     1,     1,     1,     1,
       2,     1,     1,     1,     3,     4,     0,     3,     3,     1,
       2,     2,     0,     3,     0,     5,     3,     1,     3,     1,
       3,     1,     1,     0,     1,     0,     4,     0,     1,     3,
       1,     1,     1,     0,     0,     6,     0,     0,    11,     3,
       1,     3,     3,     1,     3,     0,     1,     0,     4,     0,
       0,     9,     0,     5,     0,     6,     0,     2,     1,     3,
       2,     4,     0,     2,     0,     2,     1,     1,     1,     0,
       4,     0,     1,     0,     1,     1,     3,     1,     1,     2,
       2,     2,     1,     1,     1,     1,     0,     3,     0,     3,
       2,     4,     4,     3,     4,     4,     1,     3,     3,     3,
       3,     6,     2,     2,     0,     6,     0,     7,     5,     2,
       1,     1,     1,     5,     5,     2,     2,     1,     4,     3,
       2,     3,     2,     2,     1,     3,     4,     3,     3,     2,
       3,     2,     3,     1,     1,     1,     1,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     1,     1,     1,     1,
       1,     0,     1,     0,     2,     0,     1,     1,     1,     0,
       2,     0,     2,     0,     2,     2,     0,     4,     0,     4,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       0,     1,     1,     0,     4,     0,     0,     5,     1,     0,
       4,     3,     1,     2,     2,     2,     2,     2,     3,     2,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     0,     3,     0,     3,     3,     1,
       0,     4,     1,     2,     0,     1,     0,     3,     3,     2,
       2,     0,     5,     0,     1,     1,     0,     1,     1,     2,
       1,     2,     1,     2,     0,     0,     0,     0,    22,     1,
       1,     0,     1,     0,     1,     1,     0,     1,     1,     0,
       2,     2,     1,     3,     4,     3,     3,     0,     2,     2,
       1,     3,     3,     0,     4,     0,     3,     1,     1,     0,
       3,     2,     3,     1,     1,     2,     0,     2,     3,     1,
       5,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     2,
       2,     2,     1,     1,     3,     5,     1,     1,     1,     1,
       1,     3,     4,     5,     1,     5,     3,     2,     1,     3,
       2,     2,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     2,
       0,     2,     0,     2,     0,     4,     0,     3,     1,     1,
       1,     1,     0,     1,     1,     1,     0,     2,     2,     2,
       3,     3,     4,     6,     2,     3,     3,     2,     3,     5,
       1,     3,     3,     1,     1,     3,     3,     1,     3,     2,
       2,     2,     2,     2,     1,     1,     4,     4,     1,     1,
       1,     1,     1,     0,     4,     1,     1,     1,     3,     3,
       1,     1,     2,     2,     2,     0,     3,     4,     3,     0,
       7,     1,     2,     1,     1,     1,     1,     1,     1,     0,
       5,     1,     1,     1,     1,     1,     3,     6,     6,     6,
       7,     5,     3,     4,     1,     3,     8,     8,     8,     6,
       4,     0,     3,     0,     3,     1,     3,     2,     1,     1,
       0,     1,     1,     2,     0,     1,     1,     3,     0,     3,
       0,     3,     0,     3,     0,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       3,     2,     2,     2,     2,     2,     2,     2,     2,     1,
       1,     2,     0,     1,     3,     1,     2,     2,     2,     1,
       3,     3,     1,     1,     3,     1,     3,     1,     3,     1,
       1,     1,     1,     4,     5,     4,     6,     1,     0,     3,
       3,     1,     1,     0,     2,     2,     2,     2,     0,     2,
       0,     3,     2,     1,     2,     2,     2,     2,     2,     0,
       3,     0,     1,     0,     3,     2,     0,     1,     2,     0,
       1,     4,     4,     5,     2,     3,     0,     1,     0,     4,
       0,     1,     1,     0,     1,     0,     2,     2,     1,     0,
       1,     1,     2,     3,     2,     0,     6,     3,     0,     0,
       0,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
       1,     2,     1,     2,     3,     3,     3,     0,     3,     3,
       0,     7,     0,     3,     1,     3,     0,     3,     2,     4,
       0,     3,     4,     4,     0,     0,     0,    16,     8,     7,
       0,     0,     0,     0,     0,    15,     0,     0,     0,     0,
      12,     4,     4,     3,     4,     3,     2,     1,     3,     5,
       1,     1,     0,     1,     1,     0,     2,     0,     0,     3,
       0,     2,     5,     3,     3,     3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   927,  1130,  2679,     0,     0,     0,     0,     0,     0,
    2681,   128,    66,  1787,  1915,  1916,  1698,  1726,     2,     0,
    1130,   276,   179,     0,    78,  1728,     0,  1971,     0,     0,
    1130,     0,   487,     0,  1966,     0,     0,  1130,  1731,  1956,
     253,   179,  2681,     0,  1176,  2469,  1828,  1982,     0,     0,
       0,  1811,     0,  2545,  1776,     0,     0,  2816,     0,     0,
       3,     8,    19,     0,    41,    24,    29,    14,    18,    13,
      54,    48,    26,    39,    38,    10,    57,    58,    16,    45,
      11,    12,    15,    37,    44,    33,    40,    52,  1167,    22,
      23,    30,    46,    62,    20,    59,    55,    21,  1917,    25,
      47,    42,    34,    56,    63,    35,    53,    36,    61,    28,
      49,    27,     9,    17,    50,    51,    43,    64,    31,    60,
      32,     0,   956,     0,     0,     0,     0,     0,     0,  1034,
     939,  2746,  2747,  2748,  1132,  1131,     0,  2681,  2086,  1115,
    1141,  2160,  2162,  2161,  2163,  2164,  2165,  2166,  2167,  2168,
    2102,  2169,  2170,  2172,  2171,  2173,  2174,  2175,  2103,  2104,
    2176,  2177,  2178,  2180,  2179,  2181,  2105,  2106,  2182,  2183,
    2184,  2185,  2107,  2109,  2108,  2186,  2189,  2188,  2187,  2110,
    2190,  2191,  2192,  2194,  2111,  2112,  2113,  2114,  2115,  2193,
    2116,  2195,  2117,  2196,  2197,  2198,  2199,  2200,  2201,  2202,
    2204,  2203,  2118,  2205,  2206,  2208,  2209,  2210,  2207,  2211,
    2213,  2212,  2214,  2215,  2216,  2119,  2217,  2218,  2219,  2220,
    2221,  2222,  2223,  2224,  2120,  2225,  2226,  2227,  2245,  2121,
    2228,  2231,  2230,  2229,  2232,  2233,  2234,  2236,  2235,  2237,
    2238,  2122,  2123,  2239,  2240,  2241,  2243,  2242,  2247,  2248,
    2249,  2124,  2244,  2246,  2446,  2250,  2251,  2253,  2252,  2254,
    2256,  2255,  2125,  2258,  2257,  2126,  2127,  2259,  2260,  2261,
    2084,  2262,  2085,  2263,  2266,  2267,  2264,  2268,  2273,  2128,
    2265,  2269,  2270,  2271,  2272,  2274,  2129,  2276,  2275,  2277,
    2278,  2279,  2280,  2281,  2282,  2283,  2284,  2285,  2298,  2289,
    2290,  2292,  2293,  2296,  2291,  2297,  2301,  2300,  2302,  2303,
    2304,  2305,  2306,  2299,  2287,  2294,  2295,  2288,  2307,  2308,
    2286,  2309,  2310,  2311,  2312,  2313,  2314,  2315,  2316,  2317,
    2318,  2319,  2321,  2320,  2322,  2323,  2324,  2325,  2326,  2327,
    2329,  2328,  2330,  2331,  2332,  2334,  2333,  2336,  2337,  2130,
    2335,  2338,  2339,  2340,  2341,  2342,  2344,  2343,  2131,  2133,
    2132,  2134,  2345,  2346,  2135,  2347,  2349,  2348,  2350,  2351,
    2352,  2354,  2353,  2355,  2356,  2136,  2137,  2357,  2358,  2359,
    2360,  2361,  2362,  2363,  2364,  2365,  2366,  2367,  2368,  2369,
    2370,  2372,  2371,  2373,  2374,  2375,  2376,  2377,  2378,  2379,
    2138,  2380,  2139,  2381,  2382,  2140,  2383,  2141,  2384,  2385,
    2386,  2387,  2388,  2142,  2389,  2390,  2391,  2393,  2394,  2392,
    2395,  2143,  2396,  2397,  2398,  2144,  2400,  2399,  2401,  2145,
    2403,  2146,  2147,  2402,  2149,  2150,  2404,  2405,  2406,  2148,
    2407,  2151,  2408,  2409,  2411,  2410,  2412,  2413,  2414,  2152,
    2415,  2153,  2416,  2417,  2418,  2419,  2420,  2422,  2421,  2423,
    2424,  2425,  2426,  2429,  2431,  2428,  2430,  2427,  2432,  2433,
    2434,  2435,  2439,  2440,  2441,  2442,  2436,  2437,  2438,  2154,
    2443,  2444,  2445,  2447,  2448,  2450,  2449,  2155,  2156,  2451,
    2452,  2159,  2453,  2454,  2455,  2459,  2456,  2468,  2457,  2458,
    2461,  2460,  2462,  2463,  2464,  2157,  2465,  2158,  2466,  2467,
     198,  2089,   181,  2090,  2101,   112,  2536,  2535,  1078,  1116,
    2682,  2683,   581,   883,     0,   179,     0,   884,     0,   580,
     882,   179,  2748,   134,     0,   577,   578,     0,     0,     0,
    1804,     0,  1724,  1724,  1724,  1724,     0,  1724,   179,  1724,
       0,  1727,  1724,   179,  1724,     0,    71,  1923,   277,     0,
       0,     0,     0,     0,  2083,     0,  1734,     0,     0,  1973,
    1989,     0,  1990,  1984,  2533,     0,  1201,     0,     0,     0,
       0,   179,  1133,     0,  1785,     0,   243,   252,   254,   255,
     251,     0,  2683,  2694,  1168,  1174,  1186,     0,  1895,   255,
       0,   112,  1059,     0,   112,  1812,  1809,     0,     0,     0,
    1785,  1983,  2800,     0,     0,     0,  2796,     0,  2801,     0,
    1176,     0,     0,     1,     5,     0,     0,  2240,  2349,  1908,
    1906,  2078,     0,   930,   957,     0,   935,     0,   933,  2095,
    2094,  2093,     0,   946,   945,   943,     0,   448,     0,  1036,
       0,  2757,   937,  1092,  2680,     0,   200,     0,     0,   113,
     114,     0,     0,     0,  2686,     0,     0,     0,     0,     0,
     133,     0,     0,     0,   129,  1201,  1201,  2748,  2750,  2752,
     581,   579,   581,   581,   581,  1808,  1807,  1806,     0,  1804,
    2161,  2102,  2175,     0,  2051,     0,     0,     0,  1485,     0,
    2107,     0,  2190,  2192,  2111,  2112,  2113,  2114,  2115,  2118,
       0,     0,  1214,  1214,  1214,  1211,     0,     0,     0,  2215,
    2216,  2057,     0,     0,     0,  2047,  2058,  2253,  2254,     0,
    2049,  2050,  2260,     0,     0,     0,  2275,     0,  2280,  2055,
       0,     0,  2316,  2318,     0,     0,  2322,  2323,  2324,  2325,
    2032,  1269,     0,  1211,  2046,  2054,  2341,  2039,  2350,  2355,
    2356,     0,  2365,     0,     0,  2387,     0,  2394,  2392,  2398,
       0,     0,  2419,     0,     0,  1211,  2031,  2439,  2440,  2441,
    2442,     0,  2048,  2154,  2056,     0,  2453,  1214,  1211,  1211,
       0,     0,     0,  2462,  2463,  2467,     0,     0,     0,  2718,
    1268,     0,  1447,     0,  1479,  1226,  1232,  1246,     0,  1261,
    1295,  1296,  1298,  1402,  1297,  1303,  1302,  1699,  2043,  1301,
    1300,  2044,  2045,  1294,  2068,  2089,  2067,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1891,     0,     0,  1710,
    1724,    73,     0,     0,  2594,  2609,  2610,  1214,  2606,  2611,
    2235,  2123,  2247,     0,  2608,  2600,     0,  2360,  2364,  2604,
    2379,  2382,  2598,     0,  2146,  2423,  2630,  2602,  2607,  2588,
    2575,  2589,     0,     0,  2592,  2596,  2080,  1593,  2548,  2549,
       0,    79,  1736,  1737,  1735,  1032,     0,  2813,  1974,  1975,
    1976,     0,  1993,     0,  1128,     0,     0,   497,   488,     0,
    1890,  1889,     0,  1967,  2695,     0,     0,  1083,  1739,  1786,
       0,  1738,  1962,     0,  1960,  1957,  1959,   244,     0,     0,
     274,  2162,  2594,  2364,  2566,     0,  2574,     0,  2689,  2686,
    2696,  2731,  2726,  2725,  2728,  2729,  1192,  2730,  1191,  2727,
    2724,  1201,  1187,  1189,  1190,   799,     0,     0,  2489,  2490,
    2329,  2350,  2388,  2491,  2436,     0,     0,  2510,  2470,  2475,
    2471,     0,     0,  1850,     0,   799,  1873,  1903,  1851,     0,
       0,  1903,     0,  1628,  1893,  1896,     0,  2493,  1864,   880,
     879,  1876,   878,  2494,  1889,     0,  1836,  1852,     0,  1813,
    1857,   112,  2495,     0,  1892,  1875,     0,  1874,  1628,  1903,
       0,  1829,     0,     0,     0,     0,     0,   250,  1066,  1066,
       0,     0,  1058,  1060,  1061,  1066,  1066,     0,  2814,  2815,
    2546,  1032,  2038,  2036,  2037,  2087,  2797,  2035,  2805,  2807,
    2793,  2795,  2802,  1170,     0,  2700,     6,    65,     0,  1920,
    2755,  2756,  2754,   815,     0,  1214,  2096,  2099,  2749,  2100,
     182,   944,     0,   449,   182,     0,     0,     0,     0,     0,
     450,   451,   387,     0,  1040,  1041,  1035,  1037,  1039,   941,
       0,     0,   940,  2757,     0,     0,  1143,  1145,  1144,  1161,
     202,   199,   180,    80,  1080,  1717,  1719,  1118,  2685,     0,
       0,  2687,  2691,  1267,  1266,     0,   126,   132,     0,  2581,
    2585,     0,     0,  2099,  2657,   130,  2645,  2753,  1201,  1201,
    1201,  2745,     0,  2733,  2740,  2741,  2744,  2743,  2742,  2739,
       0,  2732,  2735,  2736,  2738,  2737,  2757,  2751,     0,     0,
       0,     0,     0,  1788,  1792,  1798,  1802,  1805,     0,     0,
    1598,  1316,  1598,  1598,  1598,  1486,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1598,
       0,  1354,  1326,  1327,     0,  1355,     0,     0,     0,  2059,
       0,     0,     0,  2718,     0,     0,     0,  1452,     0,     0,
       0,  2718,     0,     0,     0,     0,     0,     0,  1481,  1483,
    2067,  1598,     0,     0,  1598,     0,     0,     0,     0,     0,
    1219,  1360,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1598,  1598,     0,     0,  1598,
    1368,  2061,     0,     0,     0,  2060,     0,     0,     0,  2053,
     796,   797,  2033,  2052,     0,  1371,  1373,  1372,     0,  1598,
    1598,     0,     0,     0,  1306,  1305,  1307,     0,     0,     0,
       0,     0,     0,  1265,  1264,  1263,  1262,     0,     0,     0,
    1270,     0,  1271,  1272,     0,  1273,  1274,  1275,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1308,     0,     0,
       0,  2034,  1411,     0,  1725,  1704,  1712,  1706,     0,  1891,
    1707,  1709,  1716,   462,     0,  1713,  2643,  1708,     0,  1700,
       0,    72,     0,  1945,  1950,     0,     0,     0,  1940,  1948,
    1942,  1949,  1941,     0,     0,  1951,   112,     0,  1943,  1947,
    1946,  1924,  1928,  1932,  1925,     0,     0,   275,   278,   280,
       0,   283,  2595,  2593,  2627,  2626,  2631,     0,  2628,  2624,
    2587,  2617,  2658,  2621,     0,  2658,  2623,  2622,  2658,  2618,
    2625,  2658,     0,  2590,     0,  1594,  1595,     0,  2547,     0,
    2079,  1033,     0,     0,  1977,  1978,     0,  1151,  1994,  1995,
    1991,  1593,  2534,  2537,     0,   686,  1202,   498,     0,     0,
     507,     0,     0,    68,    69,     0,  1135,     0,  1134,  1138,
       0,     0,     0,  1742,  1732,  1741,  1519,  1963,   112,     0,
     242,   267,   262,   270,   264,   266,   265,   271,   272,   273,
     268,   263,   269,   256,     0,     0,  2593,     0,     0,  2590,
    2690,     0,  2692,  2709,  1175,  2697,  1198,  1177,  1197,     0,
    1188,   798,     0,   801,   803,  1761,  1762,   802,   811,     0,
     800,     0,     0,  2507,     0,  2496,     0,   807,   809,   808,
    2504,   806,     0,     0,  2480,     0,     0,  1899,     0,     0,
    1863,     0,   581,     0,     0,     0,     0,     0,     0,  1830,
       0,     0,   630,     0,  1856,  1629,  1897,  1898,  1903,     0,
       0,  1903,     0,  1869,  1893,  1903,     0,  1903,  1825,     0,
       0,  1817,  1822,  1818,     0,  1824,  1823,  1826,  1814,  1815,
       0,  1843,  1871,     0,  1893,  1855,  1862,     0,  1842,  1849,
       0,  1860,  1893,  1893,     0,  1903,  1903,  1054,  1070,  1052,
    1064,  1065,     0,     0,  1057,  1056,  1810,  1522,     0,     0,
    2794,  2808,  2792,  2803,  2804,  2791,  1171,  2701,  1169,  2702,
       0,     7,     4,  1910,  1911,  1912,  1913,  1914,  1909,  1907,
    1921,  1922,   816,   815,   572,   575,   574,     0,     0,  2098,
       0,   936,     0,  1891,   934,     0,     0,  1891,   398,  1891,
     452,   928,  1038,   948,     0,     0,   938,  1093,  1094,  1097,
       0,     0,   486,  1161,  1147,  1163,     0,   203,   205,     0,
    1082,  1081,     0,  1079,  1126,  1125,  1123,     0,  1124,  1122,
    1117,  1119,  1120,  2684,  2688,   582,   815,  1891,     0,     0,
     131,     0,   390,     0,     0,     0,     0,     0,   581,     0,
       0,  2734,   115,   885,   885,   885,  1794,  1721,  1519,  1723,
    2078,     0,     0,     0,  1800,     0,     0,  1599,  1598,     0,
    1461,     0,     0,     0,     0,  1487,     0,     0,     0,     0,
       0,     0,     0,     0,  1292,     0,     0,     0,     0,     0,
    1432,     0,  1461,  1215,  1673,  1674,  1658,  1659,  1657,  1660,
    1212,     0,  1661,  1672,  1383,     0,     0,     0,     0,     0,
       0,  1569,  1570,  1571,  1572,  1580,  1573,  1574,  1575,  1582,
    1587,  1576,  1577,  1583,  1584,  1585,  1578,  1586,  1581,  1579,
    1588,     0,  1568,     0,  1591,  1589,  1592,  1590,     0,  1453,
    1445,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1598,     0,     0,     0,  1598,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1394,     0,     0,     0,     0,
       0,  1598,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1350,     0,  2070,  2069,     0,     0,     0,   848,
       0,  1310,     0,  1309,  1531,     0,  2703,  2719,     0,  2496,
    1448,  1450,     0,  1217,  1216,  1218,  1229,  1222,  1227,  1220,
    1224,     0,  1276,  2168,  1230,     0,     0,  1258,  2718,  1607,
    1259,  1244,  1249,  1250,     0,  1247,  1248,     0,  1252,     0,
    1251,  1255,  1256,  1257,  1260,     0,     0,     0,     0,  1299,
    1304,  1480,  1201,  2071,     0,     0,   462,   465,   464,  1714,
     463,  1763,     0,  1042,     0,     0,    74,    76,  1937,  1934,
    1933,  1935,  1939,   112,  1944,  1936,     0,  1952,  2215,  2439,
    2442,   287,     0,   260,   259,   261,   284,     0,     0,  2620,
       0,  2601,     0,  2605,  2599,  2603,  2583,     0,     0,  2591,
       0,  2629,  2612,  2616,  2615,  2613,     0,  2614,  2619,  2597,
    1597,  2248,  2333,     0,  1600,  2551,  1729,  2812,  1979,  2453,
    1980,  1972,     0,  1992,     0,     0,     0,  1129,   687,     0,
    1201,   496,   495,   494,   493,     0,   509,   491,     0,    70,
       0,     0,  1968,     0,     0,     0,     0,  1085,  1740,     0,
       0,  1720,  1520,  1964,  1958,     0,     0,     0,     0,     0,
    2647,  2572,     0,     0,     0,  2693,  2711,  2710,  2698,  1201,
    1619,  1202,  1202,  2067,  2512,     0,  2506,  2505,     0,     0,
       0,  2525,  2508,     0,     0,  2474,  2513,  2514,  2517,     0,
       0,     0,     0,     0,  2511,  2436,  2476,  2477,     0,  2482,
    2472,  2531,  2532,  2529,  2530,  2528,  2501,  1870,     0,  1901,
    1904,  1905,     0,     0,  1884,  1878,  1877,  1867,  1879,  1868,
    1888,  1887,  1886,  1840,  1839,  1641,  1642,  2391,  1640,  1632,
    1635,  1639,  1638,  1833,  1894,  1883,  1881,  1865,  1903,  1838,
    1837,  1882,  1880,  1819,  1820,  1821,     0,  1628,     0,  1899,
    1872,  1903,  1893,     0,  1903,  1903,  1885,  1859,  1861,  1055,
    1072,  1071,  1067,  1068,  1073,  1063,  1062,  1540,  1539,     0,
    1494,     0,  1496,  1493,  1492,  1491,     0,  1539,  2798,  2806,
    2810,     0,  1628,  2708,  2706,   573,  1763,  1763,     0,  2097,
       0,     0,     0,     0,     0,     0,     0,   183,   192,     0,
       0,   396,   397,  1763,   395,   438,   439,   442,   443,   444,
       0,     0,     0,     0,     0,     0,     0,     0,   136,   445,
    1763,  1763,   392,   418,   419,   422,   423,   424,   425,   426,
     388,     0,   393,   815,     0,   950,   952,  2758,  2759,  2760,
       0,     0,  1096,  1150,  1142,  1149,  1146,  1161,  1159,  1148,
     875,   874,     0,  1162,   201,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    81,    82,   100,
    1718,  1127,  1121,   127,   815,  1763,  1763,  1763,  1763,   394,
     427,   428,   431,   432,   433,   434,   437,   435,   436,     0,
    2586,     0,     0,  1891,     0,  2649,  2650,     0,  2646,     0,
    2786,     0,     0,     0,   181,   583,   886,     0,     0,     0,
       0,     0,  1789,     0,  2081,  1799,  1522,  1803,  1802,     0,
    1379,     0,  1425,     0,  1427,  1428,  1429,     0,     0,     0,
       0,     0,  1380,     0,  1324,  1381,  1382,     0,  1376,     0,
    1377,     0,     0,     0,     0,     0,     0,     0,  1431,     0,
    1213,     0,     0,  1328,  1329,  1321,  1313,     0,  1404,     0,
       0,  1330,     0,     0,     0,     0,  1385,     0,  1405,  1482,
       0,  1484,  2071,     0,  1437,  1386,  1335,     0,  1435,     0,
    1336,  1406,  1407,  1408,  1388,  1389,     0,  1410,     0,  1390,
       0,     0,  1393,     0,     0,  1338,  1441,  1439,     0,     0,
       0,     0,  1443,  1340,     0,     0,     0,  1339,     0,     0,
       0,     0,     0,     0,     0,  1342,     0,  1322,  1440,  1442,
    1396,     0,     0,     0,     0,     0,  1351,     0,  2712,  1530,
    2720,  1531,     0,     0,  2714,  2704,  2709,  2717,  1314,     0,
       0,  2072,  1223,  1228,  1221,  1225,  2718,     0,     0,     0,
       0,  1242,  1241,     0,     0,     0,  2718,  1607,  1245,     0,
       0,  1421,  1422,  1477,     0,  1705,  1702,  1715,  1764,     0,
    2644,  1044,  1043,  1711,  1042,    77,     0,  1938,  1931,  1953,
    1926,     0,   279,   288,   281,   285,   286,   282,  2662,     0,
    2661,     0,     0,  2580,  2639,  2642,  2078,     0,     0,     0,
    2561,  2555,  2562,  2564,  2558,  2563,  2565,  2556,  2557,  2552,
    2559,  1601,  1630,     0,  1981,  1152,  1154,  1155,  1153,  1161,
       0,     0,  2540,  2541,  2539,  2538,   499,     0,   508,     0,
     520,     0,   499,  1970,  1969,     0,  1136,  1139,  1140,  1090,
    1089,  1091,  1084,  1086,  1087,   565,  1746,     0,     0,     0,
    1752,  1733,  1743,     0,  1965,  1961,     0,   257,  2573,     0,
       0,     0,     0,     0,     0,     0,  1196,  1522,  1691,  1193,
    1181,  1630,  1620,  1180,  1203,  1199,     0,   814,   813,   812,
     810,     0,     0,     0,     0,  2519,  2520,     0,     0,  2497,
    2498,  2499,     0,  2502,  2479,  2480,     0,  2481,     0,  1900,
       0,  1844,     0,  1866,     0,     0,     0,     0,  1835,     0,
    1858,  1816,  1901,  1834,  1600,  1893,  1831,  1832,  1070,     0,
    1053,  1539,  1522,     0,     0,  1514,  1541,     0,  1541,  1516,
    1517,  1522,     0,  1522,  1519,  1536,     0,     0,  2809,  1621,
    2707,     0,     0,   932,   186,   189,   187,     0,   188,     0,
       0,   447,   446,     0,  1891,   440,   140,   139,   141,   142,
    1655,  1656,  1652,  1653,  1651,  1654,   144,   143,   138,   947,
       0,     0,     0,  1891,   420,   399,   400,   403,   404,   405,
    1030,  1763,  1030,     0,  1763,  1763,  1030,  1763,     0,     0,
    1763,  1763,     0,     0,  1763,     0,     0,  1030,     0,  1763,
       0,  1017,     0,     0,  1763,  1763,  1763,  1763,  1763,  1030,
       0,     0,  1763,  1763,   486,  1763,     0,     0,  1048,     0,
       0,  1763,  1763,  1763,  1763,     0,     0,  1763,  1763,     0,
    1763,   964,  1016,   585,   612,   613,   929,   963,   965,   977,
     482,     0,   995,  1019,  1020,  1018,     0,     0,     0,     0,
     150,  2762,  1095,     0,     0,  1560,   204,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1891,   429,  2582,     0,     0,  1763,   389,
     406,   407,   410,   411,   412,   413,   414,   417,   415,   416,
       0,  2653,  2655,     0,     0,   383,   382,     0,   145,  2780,
       0,     0,   667,   116,   473,   482,   584,   587,     0,     0,
     887,     0,     0,     0,  1722,  1802,  1522,  1600,  2079,  1600,
       0,  1801,     0,     0,  1426,  1462,     0,  1488,     0,  1318,
     770,   770,   770,  1471,   755,  1475,  1466,   770,  1467,   770,
    1469,     0,     0,     0,  1278,  1293,     0,     0,     0,     0,
       0,  1433,  1430,     0,     0,     0,     0,  1456,     0,     0,
       0,  1323,     0,  1416,  1438,  1436,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1444,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   837,   843,   846,   847,   849,   841,     0,  1398,
    1311,  1201,  2721,  2723,  1172,     0,  2713,  2715,   923,  1449,
       0,  1239,  1235,     0,  1233,  1606,  1254,  1253,     0,     0,
       0,  1243,  1202,  1412,  1201,     0,  1478,  2073,  1703,   461,
     629,  1701,    75,  1929,     0,     0,  2659,     0,  2670,     0,
       0,     0,     0,     0,     0,     0,     0,  2550,  1631,  1773,
       0,  1161,  1165,  2088,  1985,  2543,  2544,  2542,     0,   500,
     501,   503,  1202,   517,   497,     0,   489,   492,     0,     0,
    1088,  1186,     0,  1765,  1750,  1757,  1751,     0,     0,     0,
    1749,  2063,  2062,  2069,  2696,     0,  1566,     0,     0,  2571,
    2648,     0,     0,     0,  2699,  1600,  1600,  1685,     0,     0,
    1178,  1183,  1179,  1182,     0,  1200,  1207,  1206,  2064,  2071,
    2509,     0,     0,     0,     0,  2524,  2518,  2515,  2516,     0,
    2478,  2500,  2484,  2483,  2486,  2488,  1665,  1666,  1664,  1662,
    1663,  1902,  1628,  1854,  1853,  1643,  1634,     0,  1637,  1636,
    1827,  1846,  1848,  1903,  1069,     0,  1076,  1074,     0,  2703,
    1534,     0,  1518,  1515,  1542,     0,  1541,  1541,  1522,     0,
    1498,  1777,  1780,     0,  1497,  1593,  1524,  1186,  2799,  2811,
       0,   628,   627,   191,   190,   196,   197,  1669,  1670,  1667,
    1668,   453,   466,  1671,   467,   441,   137,   454,   455,   421,
       0,   401,  1031,   920,   581,   999,     0,   668,   581,   871,
     876,   876,   581,     0,     0,  1130,     0,     0,  1724,     0,
       0,  1130,     0,     0,     0,  1763,     0,  1010,   959,     0,
    1724,     0,  1724,  1724,  1011,     0,     0,   960,  1763,     0,
       0,     0,     0,     0,  1724,  1130,     0,     0,     0,   484,
       0,  1130,   979,  1051,  1050,  1049,     0,  1130,  1130,     0,
       0,     0,     0,   618,   619,   617,     0,     0,     0,   610,
     586,   815,   961,   483,   962,   667,     0,  1045,   664,   670,
    2074,     0,     0,   160,     0,     0,   949,     0,   153,   151,
     162,     0,     0,  1099,     0,  1098,     0,  1563,     0,  1564,
    1561,  1562,   101,    88,    84,   105,   106,    86,    87,    91,
      90,    92,    93,    96,    97,    94,    89,    95,    85,   109,
     111,   110,    98,   107,   108,    83,   460,   459,   458,   457,
     430,     0,     0,     0,  1891,   408,  2654,  2652,  2651,     0,
       0,  2787,   386,   384,   385,     0,     0,   206,   645,   646,
     644,   643,     0,   474,     0,     0,     0,   647,   648,   650,
     651,  1996,   481,   815,   588,   913,   915,   914,   901,   900,
     117,   120,   123,     0,  1600,  1619,  2082,  1793,     0,  1352,
    1489,     0,     0,   771,  1463,   823,  1473,     0,  1474,   757,
     756,   772,  1465,  1468,  1472,  1470,  1317,  1325,  1374,     0,
    1291,  1375,     0,  1403,  1320,  1319,     0,     0,     0,  1358,
    1359,     0,  1454,     0,     0,  1332,     0,  1334,     0,     0,
    1418,  1387,  1409,  1361,  1391,     0,  1337,  1312,     0,  1362,
       0,  1367,  1365,     0,  1341,     0,     0,  1348,     0,  1346,
       0,  1347,     0,  1349,  1395,  1397,     0,     0,   848,   834,
     835,   836,     0,   838,   840,   842,     0,     0,  1532,  2722,
    1173,     0,     0,  1451,  1231,     0,  1240,  1237,     0,  1234,
    1203,  1423,  1413,     0,  1927,   296,   291,   299,   293,   295,
     294,   300,   301,   302,   303,   297,   292,   298,   290,   289,
    2660,     0,  2579,  2584,  2641,  2640,  2663,  2663,  2663,     0,
    1602,     0,  1730,  1156,  1161,  1165,     0,  1157,  1996,   504,
       0,     0,     0,   524,     0,   522,   490,  1137,  1201,  1747,
    1759,     0,  1767,     0,     0,  1744,  1754,     0,     0,     0,
    1753,   486,     0,   258,     0,  2568,  2569,  2567,  1630,  1608,
       0,     0,  1697,     0,  1692,  1194,     0,  1205,  1204,     0,
    2527,  2526,  2522,  2521,  2523,  2503,     0,     0,  1845,  1633,
    1628,  1841,     0,     0,  2709,  1593,  1526,  1522,  1495,  1522,
       0,     0,  1503,  1522,  1499,  1501,     0,  1600,     0,  1558,
    1201,  2066,  1622,  1625,   402,   669,   921,  1130,     0,     0,
       0,   876,   663,   581,   920,   885,   877,   581,   581,   997,
    1026,  1027,     0,     0,   596,   593,     0,   605,   980,   971,
     981,   992,   994,     0,   595,   620,     0,     0,   608,  1724,
       0,  1008,     0,     0,   590,     0,     0,   639,   640,   638,
     614,   621,  1028,  1029,   591,   592,     0,     0,  1615,  1617,
    1625,   598,   597,  1676,  1675,   607,     0,   594,     0,  1014,
     987,     0,   636,   634,   631,   633,   632,   637,   635,   609,
     600,   599,   602,   601,   604,   603,   606,   622,   976,     0,
    1030,  1030,   996,     0,  2077,     0,  1047,   998,     0,   652,
     665,   653,     0,     0,   626,   625,   623,   624,   161,   149,
       0,     0,   951,   953,     0,     0,   954,  2764,     0,  2766,
    1101,  1102,     0,     0,  1164,     0,     0,   102,   104,     0,
     391,   456,   409,  2656,     0,   217,  1201,     0,     0,   207,
     209,   210,     0,     0,   471,   468,   667,  1998,  1997,   470,
     568,   589,     0,     0,     0,  1802,  1795,  1644,     0,  1490,
       0,     0,     0,     0,   817,   828,   826,   820,     0,   824,
     825,  1464,     0,     0,   773,  1476,   737,   770,  1288,   755,
    1282,  1284,  1280,     0,   738,  1283,   770,     0,   823,  1287,
    1279,     0,  1434,     0,     0,  1457,     0,     0,     0,     0,
       0,     0,     0,  1315,     0,  1414,     0,     0,     0,     0,
       0,     0,  1345,  1343,  1344,   832,  1400,     0,   845,   839,
     837,   844,     0,  1630,  2703,   924,  1236,     0,  1424,     0,
       0,     0,  2668,  2668,  2668,  1772,  1771,     0,  1770,  1774,
    1158,  1166,     0,   502,   505,     0,     0,     0,   521,     0,
     566,     0,     0,     0,  1768,  1756,  2700,  1745,  1748,  2071,
    1521,  1567,  2570,  1185,     0,  1603,  1696,  1693,     0,  1686,
    1688,  1690,     0,  2065,  2485,  2487,  1847,  1075,  1077,  1527,
    1525,  1535,     0,  1491,  1522,  1522,     0,  1491,     0,     0,
    1779,  1619,  1781,  1523,  1555,  1537,     0,  1626,  1627,  1624,
     982,     0,   581,   872,   873,   885,   922,     0,   885,   885,
       0,     0,   970,  1001,  1118,     0,   975,   811,   615,     0,
     966,  1009,  1042,     0,   616,  1003,   968,     0,  1618,   485,
     967,   989,   973,  1952,  1000,  1046,   853,   751,   700,   691,
     770,   694,   693,   770,   705,   755,   753,   723,   755,   755,
     730,   729,   747,   733,   713,   823,   823,   712,   750,   823,
     734,   732,   736,     0,   738,   755,   743,   731,   735,   752,
     728,   725,   749,   770,   770,   770,   709,   748,   823,     0,
     741,   770,   671,   774,   711,   823,   830,     0,     0,   770,
     772,  2076,   147,   152,   163,   164,   942,  2763,     0,  2761,
       0,  1107,     0,  1160,  1565,    99,     0,     0,     0,   220,
     218,   219,     0,   213,   215,   210,  2774,     0,  2781,     0,
       0,  2779,   475,  2700,   583,   649,   569,     0,     0,     0,
       0,     0,  1790,  1353,   768,   766,   769,   767,   819,   818,
     822,     0,   821,   830,     0,     0,  1290,  1285,   739,  1289,
    1281,  1286,  1378,  1356,  1357,     0,  1455,  1446,  1384,     0,
    1333,  1415,     0,     0,  1392,  1363,  1366,  1364,  1369,  1370,
       0,  1399,     0,  1193,  1193,   641,  2716,  1238,  1954,  2671,
       0,     0,  2667,  2665,     0,  2666,  2664,  2632,     0,  2577,
    2578,  2576,  2560,     0,     0,     0,  1201,   510,     0,   527,
     526,   523,  1630,  1758,  1760,  1766,  1755,     0,  1604,  1619,
     804,  1689,     0,  1195,     0,  1504,     0,  1508,  1513,  1509,
       0,  1500,     0,  1644,  1559,     0,  1630,  1625,   984,     0,
       0,     0,     0,     0,     0,  1013,     0,     0,   972,   993,
    1015,  1007,  1006,     0,     0,  1130,  1616,   988,   990,  1085,
       0,     0,   857,   699,   692,   710,   708,   759,   754,     0,
     759,   759,   719,   737,   714,     0,   823,   727,   718,   739,
     742,   744,   746,   759,     0,   823,   707,   706,   716,   703,
     759,   782,     0,     0,     0,     0,   778,     0,   851,     0,
     785,     0,   672,   775,   777,     0,     0,     0,   740,   823,
     696,   831,   830,   698,   823,   830,   759,   759,     0,   154,
     955,   323,  2765,  1176,     0,  2770,     0,  1108,  1104,  1105,
    1100,   103,   135,  2778,  2788,   217,     0,     0,   158,     0,
     208,   811,   211,   472,   482,     0,   477,     0,  1625,   918,
       0,     0,  2391,  1645,  1796,   829,   827,     0,  1458,  1625,
       0,  1417,  1419,   833,     0,  1533,   642,     0,  1930,  2638,
    2637,  2636,  2633,     0,     0,     0,     0,     0,     0,  2669,
    2673,  1769,     0,     0,     0,   518,     0,   514,   516,     0,
     552,   567,  1612,  1625,     0,  1630,     0,  1694,  1687,  1528,
       0,     0,     0,     0,     0,  1778,  1547,  1548,     0,     0,
    1553,  1557,  1538,  1623,     0,     0,   983,   666,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1012,  2040,
    1045,   486,  1004,   969,     0,   974,   611,     0,   856,     0,
     861,   763,   764,   765,   720,   760,   762,     0,   722,   690,
     715,   745,   721,     0,   717,   704,   788,   787,  1208,   780,
     795,   675,     0,     0,   786,     0,   776,   784,   779,     0,
     695,   697,   701,   702,   688,   689,  2075,     0,   156,   349,
       0,   335,   321,     0,     0,     0,   325,   165,   168,   166,
       0,   167,   173,     0,   174,   175,   176,   177,   178,   169,
     347,   348,   172,   170,   171,     0,  2091,     0,  2092,  2768,
       0,     0,  2767,  1103,     0,  1110,   184,   214,     0,     0,
     150,   159,  2782,   793,  1996,     0,  2696,   888,     0,   917,
       0,   890,   892,  1646,     0,  1201,  1791,   758,     0,  1460,
    1331,  1401,     0,  2634,  2674,  2677,  2675,  2676,  1648,     0,
    2678,  2672,     0,  1519,  1202,     0,   511,   512,     0,   530,
       0,  1763,  1763,     0,     0,  1763,  1763,  1763,  1763,   545,
     553,   555,     0,  1613,  1614,     0,  1609,  1611,  1605,  1677,
     805,  1999,  2703,  1505,     0,  1510,     0,  1502,  1543,  1543,
    1554,   986,     0,     0,     0,   654,     0,     0,  2042,  2041,
    1002,   978,  1045,     0,   854,     0,   858,   859,   860,     0,
     852,   761,     0,   925,     0,     0,   794,  1208,   783,  1201,
     792,   791,   789,   790,   155,     0,   148,     0,     0,   334,
     337,     0,     0,   340,   330,   329,   331,     0,   324,   323,
     323,   377,   328,   374,   373,   366,  2700,     0,     0,     0,
    1109,  1114,     0,  1111,  1113,  2789,   216,  1201,   162,     0,
     469,   479,   478,     0,  1763,   118,   889,   909,   908,   894,
       0,  1625,     0,     0,   121,   891,   911,   898,   124,   893,
     910,   896,  1647,  1797,  1625,  1955,  1650,  1649,  1775,  1783,
       0,  1986,     0,   519,   518,   515,     0,   528,     0,     0,
    1763,  1763,     0,     0,     0,     0,     0,   525,   554,  1763,
    1625,     0,  1184,     0,  2007,  1529,     0,     0,     0,  1551,
    1549,   985,     0,   660,   888,   656,   658,  1005,     0,   855,
       0,     0,   823,     0,   823,  1209,     0,   781,     0,   157,
     350,   361,   364,   356,   336,     0,     0,     0,   326,   323,
       0,   310,   308,   309,   315,   316,   317,   318,   319,   320,
     311,   314,   312,   313,   323,     0,   225,     0,     0,  2769,
       0,  2771,     0,  1106,     0,   194,   193,   185,     0,   323,
    2775,     0,  2783,  2700,   903,     0,  1021,   895,     0,   916,
     919,     0,  1021,   899,  1021,   897,  1459,     0,     0,   804,
     506,   513,   538,   531,   534,     0,   564,   558,     0,     0,
     560,   561,   559,   556,   549,     0,   547,     0,  1610,  1678,
       0,     0,     0,     0,  2000,  2002,     0,  1695,  1507,  1512,
       0,  1544,     0,     0,     0,   662,   888,   655,   890,   892,
       0,   867,     0,   866,     0,   863,   862,   724,   926,   726,
    1210,   676,     0,     0,   323,   357,     0,   332,     0,     0,
       0,     0,   223,   380,     0,   221,   368,   368,  2772,  2773,
    1112,   195,  2790,     0,   164,   184,   480,   902,   119,  1023,
    1022,   907,   906,   904,   905,   912,   122,   125,  1782,  1784,
    1987,   538,     0,   536,     0,   532,   529,   533,   562,   563,
       0,   546,     0,   557,     0,     0,     0,     0,     0,  2001,
       0,     0,  2008,  2010,  1546,  1545,  1560,     0,   661,   657,
     659,   991,   869,   870,   868,     0,     0,   678,   677,   679,
     358,   364,   354,   362,   323,     0,     0,   322,   341,   376,
     224,     0,   378,     0,   323,     0,   367,   369,   371,     0,
     146,  2784,  1025,  1024,  2013,   535,     0,   543,   539,   541,
     544,   552,   551,   548,  1201,  2005,  2006,     0,  2003,     0,
       0,  2009,     0,     0,     0,     0,     0,   683,   673,   680,
     682,     0,   355,     0,     0,   353,   333,   338,   323,     0,
     323,   236,   235,     0,   227,   304,   375,     0,   226,  2776,
     323,     0,  1999,   537,     0,     0,   550,     0,     0,  1681,
    1683,  2004,  2012,  2011,  1552,  1550,   865,   864,   685,   684,
     681,   359,     0,   323,     0,   323,     0,   323,     0,     0,
       0,     0,     0,   222,   323,  2785,     0,  2007,   542,   540,
    1202,  1679,  1201,     0,   351,   323,   339,   344,   381,     0,
     230,   305,   306,     0,   233,  2777,     0,  2015,  1684,  1682,
     323,   323,   340,   343,   379,     0,     0,   228,   229,   241,
     240,   232,     0,  2014,     0,  2019,   323,   323,   345,   249,
     247,   323,   237,   245,   239,     0,   246,   307,   234,     0,
       0,  2026,     0,   231,   248,  2017,  2018,  2016,  2021,     0,
       0,  2023,  2024,     0,  1988,   238,  2025,  2020,     0,  2027,
    2029,     0,  2022,     0,  1201,  2028,     0,  1202,  2030
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    59,   625,  1552,    60,    61,    62,    63,    64,  1393,
      65,   841,  1311,  1846,  1847,    66,   565,    67,  1599,  2157,
    2158,  3496,  3497,  2159,   658,   659,    68,  2195,  3522,  4446,
    3523,  4452,  3524,  4454,  1616,   532,   533,  2097,  2098,  1111,
    3136,  3076,  3979,  3080,  4138,  4286,  4180,  2115,  3486,  3980,
    3981,  4147,   560,  2193,  1571,  4315,  2077,  4437,  2078,    69,
     656,  1081,  1596,  1597,  3508,  3509,  3790,  3510,  3782,  3783,
    3784,  3785,  4604,  4409,  4525,  4605,  4690,  4725,  4731,  4732,
    4653,  4741,  4742,  4743,  4729,   918,  4744,    70,   588,   589,
     920,  1423,  1861,  1424,    71,    72,   559,  1337,  1338,  1339,
    1340,  2377,  1862,  2372,  2373,  3278,  4654,  4727,  4410,  4411,
    4293,  4412,  4150,  4413,  4297,  4414,  4153,  4415,  4416,  4417,
    4418,  4596,  4419,  4292,  4646,  4406,  4407,  4648,  4707,  4723,
    4420,  4160,  4287,  4512,  4161,  4288,  4591,  4402,  4592,  4641,
    4703,  4403,  4513,  4644,  4516,  4421,  4427,  4606,  4422,  4428,
    4423,  4165,  4304,  4426,  4302,  4425,  4650,  4601,  2697,  3135,
     643,   644,   670,  2183,   645,  1097,  1051,  1573,  2110,  2111,
    2565,  2566,  2679,  2680,  2681,  2102,  2103,  2104,  2169,  2170,
    2171,  2084,  2085,  2086,  1577,  2081,  2082,   646,  1052,  1062,
    2105,  2106,  2107,  2685,  2173,  2174,  2175,  2176,  2108,  1839,
    2109,  2981,  2703,  3794,  3793,  2704,  3519,  4186,  4443,  3151,
    3152,  3063,  3436,  2128,    73,   577,   898,  1390,  2421,  1391,
    2858,  2859,  2860,  1911,  1912,  3867,  1916,  2420,  4045,  4354,
    4046,  4047,  2862,  4216,  2866,  3304,  3305,  3617,  3869,  4050,
    4465,  4356,  4556,  4463,  4552,  4464,  4554,  4665,  4618,  4619,
    4367,  4475,  4476,  4560,  4621,  4229,  4230,  4231,  2440,  2871,
    3872,  3797,  2163,  1563,  1564,   534,   535,   536,  3384,  2705,
    2622,  2706,  2707,  3459,  2624,  2625,  2829,  1481,  3449,  3420,
    3843,  3142,  3146,  3147,  3148,  3149,  3150,  4384,  4498,  4499,
    4496,  3469,  3382,  2996,  2997,  3068,  3472,  3752,  3961,  4589,
    4638,  4639,  4640,    74,   895,  4001,  3929,  3944,  3754,  3755,
    3756,  3757,  3758,  3759,  3760,  3178,  3179,  4104,  4105,  4106,
    3173,  3174,  3545,  3962,  3963,  3964,  4002,  4119,  1233,  3538,
    1447,  1448,  4057,  1459,  1460,  2468,  1956,  2469,  1567,  3539,
    3540,  3541,  3973,  3237,  3840,  3243,  3244,  3245,  2792,  2793,
    2794,  2795,  2796,  2315,  3965,  3471,  3922,  4097,  4100,  4270,
    4505,  2998,  3383,  2999,  3387,  1000,   537,  3000,  3001,  2196,
    2197,  4325,  4334,  4338,  4326,  4339,  4335,  4327,  4328,  4329,
    4341,  4337,  3158,  4007,  4008,  3375,  3385,  3253,  4272,    75,
     129,  2113,  1043,  1054,  1050,  1073,   651,  1583,  2116,  2640,
    3766,   633,  2626,  3915,  3684,  3919,  2627,  3399,  2628,  3898,
    4076,  2629,  3701,  3917,  4094,  3400,  3401,  2630,  2631,  2632,
    3907,  3914,  4262,  4538,  4539,  4540,  3002,  1372,   648,   649,
    1066,  1067,  1068,  2363,  3467,  3046,    76,  2044,  2039,    77,
    1012,  1013,  1014,  1527,  1528,  2042,  2043,  2510,  2947,    78,
     661,  1603,    79,  1401,  2432,  2433,  2434,    80,  1074,  1587,
    1588,  2122,  3085,  3492,  3771,  3990,  4175,  3986,  4312,  4313,
      81,    82,   662,  1610,  1611,  1612,    83,  1384,   136,    84,
     906,  1396,  1398,  1399,    85,   655,  1075,  1076,  1077,  1078,
    2124,    86,  1902,  2405,  2406,  2407,  2408,  1593,  2644,  1594,
    1595,  2133,  3297,    87,    88,   622,  2323,   594,   930,   595,
     596,  1950,  2459,  3844,   941,   942,   943,  2900,  1437,  1438,
    1439,  1908,  2905,  4276,  1165,  1161,   804,   805,   806,   807,
    1258,  1259,  3966,   808,  1268,  1805,  3190,  3560,  1664,  1665,
     809,   810,   811,   812,   813,   814,  1832,  3209,  3210,  3575,
    2350,  2351,  2352,   815,  2237,  3196,  2250,   816,  1251,  1790,
    1720,  3567,  3202,  3825,  4018,  1649,  2213,  2741,  3181,  2825,
    2317,  1187,  1188,  1146,  2220,  1655,  2050,  2051,  2052,  2053,
    2054,  3658,  3659,  4060,  3886,  4062,  3890,  2520,  2521,  1931,
    1932,  2055,  2056,  2948,  3884,  4242,  2318,  2319,  2320,  3593,
    2949,  3357,  2966,  2967,  3896,  2511,  2057,  2955,  4379,  4069,
    4070,  4494,  4493,  4071,  3894,  3895,  3663,  3664,  3088,  3089,
    3090,  2885,  1711,  1712,  1718,  1367,  1368,  1650,  2402,  2846,
    3879,  4054,  2341,  3635,  4052,  4236,  2635,  3428,  3429,  2461,
    2462,  2970,  3372,  3669,  1484,  3845,  2848,  2009,  2935,  2936,
    3802,  4210,  4730,  2797,  2931,  2982,  1682,  1683,  3435,  4372,
    4564,  4668,  4669,  4670,  3332,  3333,  3639,  3640,  2463,  2897,
    3334,  3880,  4241,    89,   541,    90,  1844,  2828,  1308,  2369,
    1085,  1403,  1636,  1637,   828,   555,    91,   566,  2403,    92,
     584,  1929,   885,   910,  1404,  1405,  2441,  2872,  2879,  2442,
    2884,  3626,  2874,  3309,  3310,  2358,  2359,  2875,  3312,  3623,
    3607,  3608,  3292,  3864,    93,   610,  3367,  2961,  2962,  4348,
    4349,   911,    94,   540,  1133,  2717,  4014,  1642,  2201,  4196,
    1134,  1135,  2204,   688,   689,    95,  1017,   606,  1507,  1508,
    1509,  2027,    96,   598,  1001,  2932,  3350,  2003,   902,  1304,
    1488,  1004,  1489,  1989,  2491,  1470,    97,  1039,  1038,  1558,
      98,   629,  1559,    99,   842,  1331,  1857,  2833,  3264,  1332,
    1333,  2370,  4028,   100,   585,   915,   916,  1408,  2445,   101,
     579,   903,  1922,   102,   569,   890,  1376,  1901,   103,   104,
     105,   892,  3298,  4459,  4614,   573,  1904,  1380,  3520,  4374,
    4484,  4485,  4487,  4572,  4573,  4662,  4735,  4757,  4751,  4760,
    4761,  4764,  4769,  4770,   818,  1026,   819,  4088,   820,   821,
     822,  2880,  2881,  3373,   823,  2882,   824,  3069,  1086,  1639,
     563,   511,   640,  1027,  2854,   826,  4167,  1046,  1047,  1104,
     513,   514,   106,   597,   958,  1464,  1454,  1463,  1976,  2485,
    1980,  2487,  2488,  3346,  2923,  3347,  2924,  1006,  1972,  1977,
    2925,   961,  1965,  1966,  1967,  1968,  2916,  1962,  1986,   107,
     893,   518,  1382,  1383,  2414,   108,   609,   109,  1369,  1894,
    1895,  2399,  2845,  2400,   110,   924,   925,   111,   870,  1620,
    2383,  1099,  1049,  1100,  1880,   873,  1343,   874,   875,  1358,
    1352,  1361,  1355,  4033,  3856,  3857,  2387,  1307,  1105,  1941,
    2187,  3129,  1106,  1871,  2379,  2380,  3602,  3859,  3282,  4039,
    4040,   112,   137,   521,   664,  1092,  1431,   113,   114,   115,
     116,  1434,  1547,  2455,  1548,  2324,  1549,  1550,  2064,  1948,
    1786,  1787,  3251,  1248,  1249,  2327,  2801,  2802,   944,   674,
    1121,  1113,   130,   131,   132,   677,   678,   133,  1071,  1072,
    2641,  3082,  3488,  3769,  3770,  3985,  4172,  1115,  3997,  4533,
    4694,  1116,  1117,  3137,  3999,  4319,  4535,  4660,  1118,  2694,
    3505,  4176,  4439,   117,  1028,   619,  1545,  1540,  1542,  2060,
    2528,   118,   119,   120
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -4039
static const int yypact[] =
{
    5213,  2678,  1018, -4039,  -188,   730, 57229,   787,  1513,  1513,
     481,  3128, -4039, -4039, -4039, -4039, -4039,  3504, -4039, 57229,
    1018,   979, -4039, 25496, -4039, -4039,   -46, -4039,    91,  1513,
    1018,   633, -4039, 57229, -4039,   757,  1637,  1018, -4039, -4039,
   50255, -4039,   481, 57229, -4039, -4039, -4039, -4039, 50255,   206,
     214,   891,  1100, -4039, -4039, 57229,  1194, -4039,  -181,  1331,
    1368, -4039, -4039,  1149, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, 26133, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039,  1412, 57229,  1421, 57229,  1480, 57229, 48353, 57229, -4039,
    1539, -4039, -4039,  1586, -4039, -4039,  1513,   481, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039,   993, -4039, -4039,  -188, -4039, -4039, -4039, -4039,
   -4039,  1720,  1524, -4039,  1571, -4039, 48353, -4039, 57229, -4039,
   -4039, -4039,   261, -4039,  1255, -4039,  1263,  1610,  1641,  1650,
     798, 11894,  1598,  1598,  1598,  1598,  1702,  1598, -4039,  1598,
   57229, -4039,  1598, -4039,  1598,  1513, -4039, -4039, -4039,  1780,
   36307, 57229,  1562,   178,   583, 48353,   173, 57229,  -188,    69,
   -4039,  1699, -4039, -4039, -4039,  1513, -4039,  1928,  1788,   939,
   57229, -4039, -4039,  1513,  1071,   -24,  1379, -4039, -4039,  1506,
   -4039, 36941,   195, -4039, -4039, -4039,  2950, 28044,  3576,  1506,
    1500,  -188,  -134,  1510,  -188, -4039, -4039, 57229,  -188,  1513,
    1735, -4039, -4039,   199,   199,   199, -4039,   199, -4039,   199,
   -4039,  -181,  1396, -4039, -4039,  1413, 57229,  1393,  1835, -4039,
   -4039,  1436,   -56, -4039,  1473, 40745, -4039, 57229, -4039, -4039,
   -4039, -4039,  1718, -4039, -4039, -4039,  1035, -4039,  1580,  1441,
   57229,  1582, -4039, -4039, -4039, 25496,  1467, 57229,  1570, -4039,
   -4039, 25496, 25496,   205,    37,  1874, 57229, 57229, 45183,  1951,
   -4039,  2153, 40745,  1715, -4039,   804,  1023,  1586,  2159, -4039,
    1524, -4039,  1524,  1524,  1524, -4039, -4039, -4039, 50889,   798,
    1528,  1530,  1532, 17142, -4039,  1535,  1540,  1544, 11894,  1546,
    1548,  1556,  1559,  1572,  1578,  1591,  1600,  1611,  1614,  1627,
    1631,  1634,  1638,  1638,  1638,  1643,  1658,  1663,  1666,  -158,
    1670, -4039,  1672,  1674,  1680, -4039, -4039,  1682,  1684,  1695,
   -4039, -4039,  1706,  1708,  1717, 12550,  1722,  1728,  1730, -4039,
   22299,  1734,  1742,  1749,  1782,  1786,  1797,  1803,  1831,  1852,
   -4039, -4039, 11894,  1643, -4039, -4039,  1855, -4039,  1857,  1866,
    1881,  1887,  1892,  1895,  1899,  1901,  1907,  1923,  1925,  1927,
    1929,  1933,  1936,  1938,  1952,  1643, -4039,   886,  1963,  1968,
     952,  1976, -4039,  1980, -4039,   432,  2011,  1638,  1643,  1643,
    2013,  2015,  2047,  2050,  2052,  2060, 17142, 17142, 17142, 11894,
   -4039, 57229, -4039, 57229,  2256,  2522, -4039,  2701, 17142,   244,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039,  1549,  1738, -4039,
   -4039, -4039, -4039, -4039, -4039,  2062,  1668,  2176, 57229, 57229,
   57229, 57229, 57229, 57229, 45183, 48353,  1819, 57229, 45817, -4039,
    1598,  1805,  4430, 31224,  2024,  2005,  1975,  1638, -4039, -4039,
     614,   663,   692,  2175, -4039, -4039,  2065,   699,  2255, -4039,
     776,   167, -4039,    98,   781,   800, -4039, -4039, -4039, -4039,
   -4039, -4039,  2078,  2283,  2063, -4039, -4039,   133, -4039, -4039,
   57229, -4039, -4039, -4039, -4039,  2505,  2240, -4039, -4039, -4039,
     165,  2720,   216, 25496, -4039,  2123, 11894,  1225, -4039,  -204,
   -4039, -4039,  2491, -4039, -4039, 45817, 25496, -4039, -4039, -4039,
   22938, -4039, -4039,  2739, -4039,  2141, -4039, -4039,  1738,  3797,
   -4039,  2418,  2024,  2428, -4039,  2608, -4039,  2437,  2339,    37,
    2226, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039,  2168,  2950, -4039, -4039,   317,  2332,  2170,   327,   497,
   40111,   924, 48353,   526,   858, 28680, 41379,  2172, -4039, -4039,
   -4039,    86,  2325, -4039,  2682, -4039, -4039,   -18, -4039,  2198,
    1131,   -18, 46451,  2588,   183, -4039,   162, -4039,  2674, -4039,
   -4039, -4039, -4039, -4039,  2343,  2341,  2374, -4039,   314,  2844,
   -4039,  -188, -4039,   761, -4039, -4039,  2358, -4039,  2588,   -18,
     183, -4039,  2610,  2736,   298,  2716,   638, -4039, -4039, -4039,
     -83,  2827, -4039,  2274, -4039, -4039, -4039, 25496, -4039, -4039,
   -4039,  2505, -4039, -4039, -4039, -4039,  2276, -4039,  2558,  2393,
   -4039, -4039,    55, -4039,  2290,  1008,  2784, -4039,  2201, 42013,
   -4039, -4039, -4039,  2820,  2855,  1638,  2321, -4039, -4039, -4039,
   -4039, -4039,  2956, -4039, -4039,  2331,  2869,  2869,  2869,  2988,
   -4039, -4039, -4039, 25496, -4039, -4039, -4039,  1441, -4039, -4039,
    2518,  2383, -4039,  1582, 25496,  2753,  2359, -4039, -4039,  2619,
   11894, -4039, -4039, -4039,   197, -4039, -4039,   252, -4039,  2963,
    2589, -4039, -4039, -4039, -4039,  2860, -4039, -4039,  2956,  1138,
   -4039,  2919,  2869,  2808, -4039,  2387, -4039, -4039, -4039, -4039,
   -4039, -4039,   225, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
     937, -4039, -4039, -4039, -4039, -4039,  1582, -4039, 25496, 57229,
   57229, 57229, 25496, -4039,  2392, -4039,  2388, -4039, 11894, 11894,
     322,  2974,  3036,  3036,  3036,  2256,  2425, 11894, 11894, 11894,
   11894, 11894, 11894, 11894, 11894, 11894, 11894, 11894, 11894,  1633,
    2400, -4039, -4039, -4039,  1625, -4039,  2401, 11894, 11894, -4039,
   11894, 11894, 26770, -4039,  3977, 11894,   808,  2909, 11894, 11894,
   11894, 11894,  3325, 11894, 11894, 11894, 26770,  3046,  2403, -4039,
    2398,  1648, 11894, 11894,  1704, 11894, 11894, 11894, 11894, 11894,
   -4039, -4039, 11894, 11894, 11894, 11894, 17142, 11894, 11894, 11894,
   11894, 11894, 11894,  2409, 11894,  3036,  3036, 11894, 11894,  1727,
   -4039, -4039, 11894,  2167,  2167, -4039, 11894,  8614, 11894, -4039,
   -4039, -4039, -4039, -4039,  2413, -4039, -4039, -4039, 26770,  3036,
    3036, 11894, 11894, 11894,  2974,  2974,  2974,   215,  2414,  -180,
   11894, 29316,  2410, -4039, -4039, -4039, -4039, 11894, 11894, 11894,
   -4039, 17142, -4039, -4039,  1365, -4039, -4039, -4039, 13206, 17142,
   17142,  2424, 17142, 17142, 17142, 17142, 17142,  2803, 17142, 17142,
   17798, 18454, 17142, 17142, 17142, 17142,  1520,  2974, 48353, 17142,
   11894, -4039, -4039, 57229, -4039, -4039, -4039,  2426,  2710,  1819,
   -4039,  2435, -4039,   -74,  2928, -4039, -4039,  2440, 25496, -4039,
    2443, -4039,  2817, -4039, -4039,  2818,  2826,  2828, -4039, -4039,
   -4039, -4039, -4039,  3070,  2835, -4039,  -188,  2837, -4039, -4039,
   -4039, -4039,  2472, -4039, -4039, 19110, 48353, -4039,  2475, -4039,
    2964, -4039, -4039, -4039, -4039, -4039, -4039,  2580, -4039, -4039,
   -4039, -4039,  2481, -4039, 45817,  2481, -4039, -4039,  2481, -4039,
   -4039,  2481, 40745,   954,  4079, -4039, -4039, 57229, -4039, 57863,
   -4039, -4039, 22938,  -188, -4039,  2905, 13862, -4039, -4039, -4039,
    2853,   154,  2489, -4039, 25496, -4039,  2256, -4039,   122,   122,
    2745,   166, 48353, -4039, -4039,   138,  2492,  2577,  2499, -4039,
    2581, 25496, 25496, -4039, -4039, -4039,  2759, -4039,  -188,   -24,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039,  2508,  2993,  2968,  2511, 45817, 40745,  1017,
   -4039, 57229, -4039,  1767, -4039, -4039, -4039,  2515, -4039, 11894,
   -4039, -4039, 57229, -4039, -4039, -4039, -4039, -4039,  3097, 11894,
   -4039, 45817,   -65, -4039,   935,   921,    86, -4039, -4039, -4039,
   -4039, -4039, 57229, 51523,  2517,  9270,  2641,  2923,  -188, 11894,
   -4039,  2532,  1524, 57229, 57229, 57229, 25496, 57229, 25496, -4039,
      -7,    -7, -4039, 42647, -4039, -4039, -4039, -4039,   -18, 57229,
   57229,   -18, 40745, -4039,   183,   718, 57229,   -18, -4039,  2929,
    2631, -4039, -4039, -4039,  2998, -4039, -4039,  2989,  2533, -4039,
    3014, -4039, -4039,  2655,   183, -4039, -4039, 25496, -4039, -4039,
     183, -4039,   183,   183, 11894,   -18,   -18, -4039,  1259, -4039,
   -4039, -4039,  2684,  -134, -4039, -4039, -4039,   806,   199,  2785,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
    1198, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039,    93, -4039, -4039, -4039,  2042,  3051, -4039,
   48353,  1561,  -104,  1187,  1561,  2659,  -188,  1310, -4039,  1310,
   -4039, -4039, -4039,  2819,   210, 25496, -4039,  2541, -4039,  2795,
   52157, 25496, -4039, -4039, -4039,  1551,  2546,  2551,  2256,  5005,
   -4039, -4039, 25496, -4039, -4039, -4039, -4039,  2605, -4039, -4039,
   -4039, -4039,  1401, -4039, -4039, -4039,   109,   943,  3200, 45183,
   -4039,  2575,  2607,   171, 40745,  3010, 57229, 57229,  1524, 57229,
   57229, -4039, -4039, -4039, -4039, -4039,  2561, -4039,  2759, -4039,
    -238, 57229,  3019, 33764, -4039,   358,   375, -4039,  3036,  2568,
   -4039,  2570,  2572,  2574, 11894,   240,   163,   523,  -243,  1588,
    1249,   382,  1352,   689, -4039,  1593,   695,   719,   765,   248,
   -4039,  2576,  2583, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039,  2582, -4039, -4039, -4039,   785,   853,  1366,  1372,  2585,
    2586, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039,  3030, -4039,  1615, -4039, -4039, -4039, -4039,  2587, -4039,
   -4039,  1382,   908,  1025,   259,  2596,  1645,  1066,  1764,  1798,
    2595, 26770, 57229,  3036,  2598,  1414,  1563,  3036,  2599,  1068,
    1581,  1813,  1818,  1822,  1597,  1624,  1094,  1827,  2980,  1649,
    1150,  1176,  1653,  1183,  1216, -4039,  1655,  2602,  2603,  1224,
     301,  3036,  2612,   310,  2594,  2604,  1667,  9926, 10582, 11238,
     181,  1238, -4039,  2613, -4039,  2398,  2614,  2615,   427,   158,
    1676, -4039, 11894, -4039, -4039,   586,  1484,  2666,   141,   921,
   -4039,  2756, 57229,  2468,   198, -4039, -4039, -4039, -4039, -4039,
   -4039,   822, -4039,  2611, -4039,  2617,  2117,  2622, 11894,   900,
    2622,  2025,  1052,  1052, 17142,  2859,  2834, 12550,  1507, 12550,
    1507,  2622,  2622,  2622, -4039, 17142,  2621, 17142, 17142, -4039,
    2974,  2256,  2623,  1163, 57229, 25496,   -74, -4039, -4039, -4039,
   -4039,    86, 45817,   176, 25496, 48353,  2620, -4039, -4039, -4039,
   -4039, -4039, -4039,  -188, -4039, -4039,  4526, 25496,  2699,  2717,
    2718, -4039, 31860, -4039, -4039, -4039, -4039, 31860,   -16, -4039,
   57229, -4039,  2708, -4039, -4039, -4039,  1152, 23575, 23575, -4039,
   23575, -4039, -4039, -4039, -4039, -4039,   167, -4039, -4039, -4039,
   -4039,   877,   882,  3746,  2657, -4039, -4039, -4039, -4039, 33130,
    2256, -4039, 25496, -4039,  3047,   -53, 25496,  2645, -4039,  2649,
   -4039, -4039, -4039, -4039, -4039,  3105,  2758, -4039,  2651, -4039,
   11894,  -188, -4039, 45817, 45817, 25496, 25496,   713, -4039,   605,
    2652, -4039, -4039,  3296, -4039,  3797, 19110, 45183,  3098,  3112,
   -4039,  2661, 23575, 23575, 23575, -4039, -4039, -4039, -4039, -4039,
    1322,  2256, -4039,  2672, -4039, 47085, -4039,  2256,    86,  2669,
    2685, -4039, -4039,  3038,   724, -4039,  2703,  2704, -4039,  2676,
    2693,  2709, 52791, 11894, -4039,   935, -4039, -4039,    86, -4039,
   -4039, -4039, 17142,  1672, -4039,  2256, -4039, -4039,  -188,  3140,
   -4039,  2256,  2673, 57229, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039,  3183, -4039,  2888,
     705, -4039, -4039, -4039, -4039, -4039, -4039, -4039,   -18, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039,  2943,  2588,  2844,  2923,
   -4039,   -18,   183, 25496,   -18,   -18,  2256, -4039, -4039, -4039,
   -4039, -4039,  2725, -4039,  2773, -4039, -4039, -4039, -4039, 57229,
    3580,  2889, -4039,  2726, -4039, -4039, 25496, -4039,  2729, -4039,
    3188,  3336,  2588, -4039, -4039, -4039,    86,    86,  3041, -4039,
    -188,  2862,  2864,  2868,  2870,  2873,  2913, -4039, -4039,  -188,
    -188, -4039, -4039,    86, -4039,  1119, -4039, -4039, -4039, -4039,
    -188,  -188,  -188,  -188,  3295,  -188,  -188,  1839, -4039, -4039,
      86,    86, -4039,   455, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039,   236, -4039,  4015,   149, -4039,  2954, -4039, -4039, -4039,
   25496,  3207, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039,  2761, -4039, -4039, 11894,  3242,  3245,  3249,  3250,
    3251,  3252,  3253,  3256,  3259,  3260,  3262,  3263,  3267,  3270,
    3272,  3274,  3275,  3276,  3277,  3287,  3289,  2792, -4039, -4039,
   -4039, -4039, -4039, -4039,   201,    86,    86,    86,    86, -4039,
    2012, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, 40745,
   -4039, 48353,  3171,  1947,   661, -4039, -4039, 48353, -4039, 57229,
   -4039,   357, 57229,  2806,  -141,  3693,  1451,  3086,  3088,  3089,
   57229,  2878, -4039, 33764, -4039, -4039,   806, -4039,  2830, 14518,
   -4039,  2838, -4039, 11894, -4039, -4039, -4039,  1989, 11894, 11894,
    3306,  2960, -4039, 47719, -4039, -4039, -4039, 11894, -4039, 11894,
   -4039, 11894, 11894, 11894, 11894, 47719,  2960, 11894, -4039,  2839,
   -4039,  3246,  3254, -4039, -4039, -4039, -4039, 11894, -4039, 11894,
   11894, -4039, 11894, 11894, 11894, 11894, -4039, 11894, -4039, -4039,
   17142, -4039,  2851,  2846, -4039, -4039, -4039,  2863, -4039, 11894,
   -4039, -4039, -4039, -4039, -4039, -4039, 11894, -4039, 11894, -4039,
   11894, 11894, -4039, 11894, 11894, -4039, -4039, -4039, 15174, 11894,
   11894,  2871, -4039, -4039, 11894, 11894, 11894, -4039, 11894,   470,
   11894,   493, 11894,  1374, 11894, -4039, 11894, -4039, -4039, -4039,
   -4039, 11894,   377,  3105,  3295,  2875, -4039,  1842, -4039, -4039,
    2767, -4039,   586,  2880, -4039, -4039,  1767, -4039, -4039, 48353,
   11894, -4039, -4039, -4039, -4039, -4039, -4039, 17142,   506,  2884,
   17142, -4039,  2025,  3325,  3325,  2258, 11894,   900,  2025, 11894,
    2890,  2858, -4039, 11894, 57229, -4039, -4039, -4039, -4039, 48353,
   -4039, -4039, -4039, -4039,   176, -4039,  2443, -4039, -4039,  2645,
   -4039,  3355,  2887, -4039, -4039, -4039, -4039, -4039, -4039,  1844,
   -4039, 40745,  3516, -4039,  2865, -4039,  2894,  2982,  2984,  2990,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039,  2588,   605, -4039, -4039,  2908, -4039, -4039,  2619,
    3004,  2936,  3290,  3482, -4039, -4039, 57229, 17142, -4039,  3524,
    2922,  2926, 57229,  2256, -4039,  3006, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039,   810, -4039, -4039,  2932,  2932, 21023,
   -4039, -4039, -4039, 57229, -4039, -4039,  3414, -4039, -4039,  3199,
   45817, 40745,  3388,  3389,  3392,   813, -4039,   220, -4039,   803,
    3346,  2588, -4039,  3398, 48987, -4039, 34398, -4039, -4039, -4039,
   -4039,   -65,  3042,  3043,   -60, -4039, -4039,  3344,  3178, -4039,
   -4039, -4039,    86,  2256, -4039,  2517,  9270,  2962, 29952, -4039,
     875, -4039,   273, -4039, 43281,  3438, 43281, 43281, -4039,  3264,
   -4039, -4039,  3140, -4039,  2657,   183, -4039, -4039,  1259,  2483,
   -4039, -4039,   936,  3361,  3363, -4039,  3243,  1849,  3243, -4039,
   -4039,   936, 26770,   806,  2759, -4039,  3295,  3303, -4039, -4039,
   -4039, 47085, 43915, -4039, -4039, -4039, -4039,  3517, -4039,  3525,
     212, -4039, -4039,  3087,  1187, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
    2659,  3087,  3087,  1310, -4039,   139, -4039, -4039, -4039, -4039,
    2740,    86,  3561,  3247,    86,    86,  3561,    86,  3248,  3255,
      86,    86,  3071,  3510,    86,  3396,  3109,  2194,  3403,    86,
    3268, -4039,  3113,  3527,    86,    86,    86,    86,    86,  3561,
    3271,  3624,    86,    86, -4039,    86,  3294,  3273,   187,  3304,
    3305,    86,    86,    86,    86,   901, 57229,    86,    86,  3308,
      86, -4039, -4039,  5495, -4039, -4039, -4039, -4039, -4039, -4039,
    1042, 24218, -4039, -4039, -4039, -4039,    86,    21,   291,  3102,
     224,  3034, -4039,   346,  3049, 53425,  2256,  3050,  3295,  -188,
    -188,   875,  -188,  3295,  -188,  -188,  -188,  -188,  -188,  -188,
    -188,  3295,  3295,  -188,   830,  1736,  -188,  3295,  5005,  -188,
    3105,  3087,  3087,   943, -4039, -4039,  3307,  3496,    86, -4039,
    2378, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
    3148, -4039,   192,  3261,  3059, -4039, -4039,   402, -4039, -4039,
    1278, 25496, 19749, -4039, -4039,  3316, -4039,  3045,   180,   180,
   -4039, 25496, 25496, 25496, -4039,  3056,   806,  2657,  1256,  2657,
    3072, -4039, 12550,  1697, -4039,  2256, 11894,  2256,  2237, -4039,
    3066,  3066,  3066, -4039,  3074, -4039, -4039,  3066,  3477,  3066,
    3479,  3079,  3080,  1848,   370, -4039,  1858,  1409,  1713,  3081,
    3083,  1549, -4039, 11894, 11894,  1726,  1747,   -88,  1245,  1290,
     535, -4039,  1753,  3153, -4039, -4039,  1760,  1790,  1815,  1825,
    1302,  1841,  1870, 12550,  1905,   865,   616, -4039,  1917,  1304,
    1324,  1946, 11894,  1965, 11894,  1978, 11894,  1984,  1997,  2006,
    3091,  3091,   147, -4039,  3084, -4039, -4039, -4039,  3096, -4039,
   -4039,  2168,  2767, -4039, -4039,  3100, -4039, -4039,  3064,  2256,
    3103, -4039, -4039, 11894, -4039,   244, -4039, -4039, 17142,   672,
    3107, -4039,  2256, -4039, -4039,  3108,  1549, -4039, -4039, -4039,
   -4039, -4039, -4039,  3122,  2872, 31860, -4039, 57229,  1156,  3359,
    3111, 35032, 40745, 40745, 40745,  3115, 11894, -4039, -4039,  3393,
   25496, -4039,  3529, -4039, -4039, -4039, -4039, -4039,  3116,  3118,
   -4039, -4039, -4039,  2025,  3493,  3375, -4039, -4039,  3126, 45817,
   -4039,  2950, 26770, -4039,  3127, -4039,  3127,  1609,  3129,  1878,
   -4039, -4039, -4039,  3131,  2226,  1884, -4039, 19110,  3588,  2440,
   -4039, 40745, 40745, 40745, -4039,  2657,  2657,   150,  3189,  3536,
   -4039, -4039, -4039, -4039, 54059, -4039, -4039, -4039, -4039,  1234,
   -4039,  3151,  3155,   260,  3379, -4039, -4039, -4039, -4039,  9270,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039,  2588, -4039, -4039, -4039, -4039, 43281, -4039, -4039,
   -4039, -4039, -4039,   -18, -4039,  3644, -4039,  3158,  -229,  1484,
   -4039,   208, -4039, -4039, -4039,  3559,  3243,  3243,   936,  3560,
    1184,  3166, -4039,    86, -4039,  2907, -4039,  2950, -4039, -4039,
   11894, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
     236, -4039, -4039, 27407,  1524, -4039,   243, -4039,  1524, -4039,
    1551,  1551,  1524, 54693, 27407,  1018,   875,  3295,  1598,  3295,
   55327,  1018,  -188,  -188,  2452,    86,  3295, -4039, -4039,  3562,
    1598,  3564,  1598,  1598, -4039, 48353, 57229, -4039,    86,  1403,
    3295, 55961,   875,   875,  1598,  1018, 26770,  2791,  3302, -4039,
    -188,  1018, -4039, -4039, -4039, -4039, 25496,  1018,  1018,  2037,
    3368,  3462,  3474, -4039, -4039, -4039,  3295,  3302, 55327, -4039,
   -4039,  6777, -4039, -4039, -4039, 20386, 57229,   992,   156, -4039,
    3161, 38209,  3410, -4039, 11894, 11894,  3452, 57229,  3454, -4039,
    3749, 57229,  3814, -4039,   120, -4039, 55327, -4039,  3184, -4039,
    3190, -4039,  3295, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039,  3186, 57229,  3087,  1947, -4039, -4039, -4039, -4039,  -188,
    1278, -4039, -4039, -4039, -4039,  3470,  3471, 57229, -4039, -4039,
   -4039, -4039,  3337, -4039, 25496,  3195,  3197,  3198, -4039, -4039,
   -4039,   250, -4039,  6136, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, 33764,  2657,  3468, -4039, -4039,  3325, -4039,
    2256, 11894,  1826, -4039, -4039,   217, -4039,  1880, -4039, -4039,
   -4039,  3203, -4039, -4039, -4039, -4039, -4039, -4039, -4039,  2969,
   -4039, -4039,  2960, -4039, -4039, -4039,  3206,  3325,  3325, -4039,
   -4039,  3807,  3374, 11894, 11894, -4039, 11894, -4039,   926,  3208,
    3237, -4039, -4039, -4039, -4039, 11894, -4039, -4039,  3325, -4039,
   11894, -4039, -4039, 11894, -4039, 11894, 11894, -4039,  2038, -4039,
    2055, -4039,  2135, -4039, -4039, -4039,  3105,  3214,  3596, -4039,
   -4039, -4039,  3105,  3404, -4039, -4039,  3105,  3295,  2515, -4039,
   -4039,  -180, 57229, -4039, -4039,  1910, -4039, -4039, 11894, -4039,
   48987, -4039, -4039,  3443, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039,  3664, -4039, -4039, -4039, -4039,   572,   572,   572, 15830,
    2256,  3722, -4039, -4039, -4039,  3529,  3608, -4039,   963, -4039,
   57229,  3225,  1031, -4039,  1943, -4039, -4039, -4039,  2168,  3227,
   -4039,    86, 15830,  2932,  3399, -4039, -4039,  1609, 26770, 34398,
   -4039, -4039, 57229, -4039, 40745,  2661,  2661,  2661,  2588,  3672,
    3004,  3004, -4039, 30588, -4039, -4039,  3391, -4039, -4039, 35666,
   -4039, -4039, -4039, -4039, -4039, -4039, 29952, 52791, -4039, -4039,
    2588, -4039,  -188,  1448,  1767,  2165, -4039,   806, -4039,   936,
    3630,  3631, -4039,   936, -4039, -4039, 26770,  2657, 15830, -4039,
    2168,  2256,  3244,   309, -4039, -4039, -4039,  1018,  3257,  3635,
    3637,  1551, -4039,  1524, 27407, -4039, -4039,  1524,  1524, -4039,
   -4039, -4039,   118, 55327, -4039, -4039, 27407, -4039, -4039, -4039,
    3265, -4039, -4039,  3105, -4039, -4039, 43915,  -188, -4039,  1598,
   57229, -4039, 27407, 27407, -4039,  3279,  -188, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, 27407, 55327,  3266, -4039,
     309, -4039, -4039, -4039, -4039, -4039,  1928, -4039, 55327, -4039,
   -4039, 55327, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,  3278,
    2952,  1034, -4039,  3258, -4039, 57229, -4039, -4039, 25496, -4039,
   -4039, -4039,  6415, 57229, -4039, -4039, -4039, -4039, -4039,  2256,
    3325,  3813, -4039, -4039,  3402,  -188,  3756, -4039,  1953, -4039,
   -4039, -4039,  3669,  3269, -4039, 53425,  1999, -4039, -4039,  2659,
   -4039, -4039, -4039, -4039,  3407,  1092, -4039,  3434,  3281,  3282,
   -4039, -4039,  -188,  3284, -4039, -4039, 20386, -4039, -4039, -4039,
    3894, -4039,  3286,  3288,  3291,  2830, -4039,  3642,  -217,  2256,
    3297,  3298,  3299,  3309,  3888,   221, -4039,  3890, 47719, -4039,
   -4039, -4039,  2002,  3558, -4039, -4039, -4039,  3066, -4039,  3074,
   -4039, -4039, -4039,  3866, -4039, -4039,  3066,  3679,   217, -4039,
   -4039,  3313, -4039,  3314,  3317, -4039,   199,  3318,  2161,  1334,
    2007,  3594,  3678, -4039,  3519, -4039,  2187,  1222,  2189,  2196,
    2205,  2214, -4039, -4039, -4039, -4039, -4039,  3321, -4039, -4039,
     435, -4039,  3315,   817,  1484, -4039, -4039,  2026, -4039,  3673,
    3575,   151,  3330,  3330,  3330,  1672,  2256,  2030, -4039, -4039,
   -4039, -4039,  3712, -4039, -4039,  3324,  3327, 57229, -4039,  3375,
    2515, 26770, 15830,  3329,  3323, -4039,  1008, -4039, -4039,  3320,
   -4039, -4039,  2661, -4039,  3934,  3766, -4039, -4039, 48353,  3331,
   -4039, -4039,  3647, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039,  2726,  3488,  3381,   936,   936,  3623,  3382, 11894,  3343,
   -4039,  3468, -4039, -4039,    53,  2515, 11894, -4039, -4039, -4039,
   -4039, 11894,  1524, -4039, -4039, -4039, -4039,  3347, -4039, -4039,
    3870,  3873, -4039, -4039,  1401, 57229, -4039,  3097, -4039, 27407,
    3265, -4039,   207,  3450, -4039, -4039, -4039, 26770, -4039, -4039,
   -4039, 57229, -4039, 25496, -4039, -4039,  3356, -4039,  3066,  3066,
    3066, -4039, -4039,  3066, -4039,  3074,  3598, -4039,  3074,  3074,
   -4039, -4039, -4039, -4039, -4039,   217,  1465, -4039, -4039,   217,
   -4039, -4039, -4039,   117,   928,  3074, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039,  3066,  3066,  3066, -4039, -4039,   217,  3066,
   -4039,  3066, -4039,  2609, -4039,   188,   124,  3066,  3066,  3066,
    3203,  3350, -4039, -4039, -4039, -4039, -4039, -4039, 57229, -4039,
    1085, 57229,   132, -4039, -4039, -4039,  3295,  2033,  -188, -4039,
   -4039, -4039,  3354,  3360, -4039, -4039, -4039,   291, -4039, 57229,
    6415, -4039, -4039,  1008,  5495, -4039, -4039,  1090, 57229, 57229,
   57229, 44549, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, 47719, -4039,  3980,  3649,  3369, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, 11894, -4039, -4039, -4039, 11894,
   -4039, -4039,  3683,  3848, -4039, -4039, -4039, -4039, -4039, -4039,
    3380, -4039,  3295,   803,   803, -4039, -4039, -4039,  4014, -4039,
    3472,  3473, -4039, -4039,  3476, -4039, -4039,   136,  2023, -4039,
   -4039, -4039, -4039, 15830,  3774,  3483, -4039, -4039, 57229,  3430,
   -4039, -4039,   817, -4039, -4039, -4039, -4039, 11894, -4039,  3468,
    2452, -4039, 30588, -4039,  -180, -4039,  3436, -4039, -4039, -4039,
    3439,  2256, 57229,  3642, -4039,   775,   817,   309,  -119,  2221,
    3397,  3400, 57229,  3401,  3406, -4039,  4359, 27407, -4039, -4039,
   -4039, -4039, -4039, 25496,  6415,  1018, -4039, -4039,  3265,   810,
    3409, 57229,  3729, -4039, -4039, -4039, -4039,  -168, -4039,  3408,
    -168,  -168, -4039,  2332, -4039,  3437,   217, -4039, -4039,  3447,
   -4039, -4039, -4039,  -168,  3415,   217, -4039, -4039, -4039, -4039,
    -168, -4039, 48353,  -188,  3651,  4040, -4039,  3456, -4039,  3936,
    3808,  4049, -4039,  2882, -4039,  3815,  3713,    86, -4039,   217,
   -4039, -4039,  3980, -4039,   217,  3980,  -168,  -168, 57229,  3555,
   -4039, 63569, -4039, -4039,  -181,  3455,  2057, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039,  1279, 57229, 25496,  3452,  3626,
   -4039,  3097, -4039, -4039,  3316,  3399, -4039,  2079,   309,  3440,
    2092,  2104,  3913,  3621,  3633, -4039, -4039,  3444,  3445,   309,
    2227, -4039, -4039, -4039,  3457, -4039, -4039,  3965, -4039, -4039,
   -4039, -4039, -4039,   160,  3730,  3295,  3295,  3295,   679,  2023,
   -4039, -4039,  3514, 25496, 17142,  3572,  2115, -4039, -4039,  1240,
    3280, -4039,  1275,   309, 11894,  2588, 43915, -4039, -4039, -4039,
   11894,  3467, 11894,  3469,  2130, -4039, -4039, -4039,  1551,  1551,
   -4039,   775, -4039, -4039,  3105,  3375, -4039, -4039, 57229, 57229,
    2156, 57229, 57229,  2699,  2717,  2718,  1736,  1736, -4039, -4039,
     992, -4039, -4039, -4039,  3871, -4039, -4039,  2192, -4039,    76,
    3747, -4039, -4039, -4039, -4039,  -168, -4039,   199, -4039, -4039,
   -4039, -4039, -4039,   199, -4039, -4039, -4039, -4039,  3475, -4039,
   -4039, -4039,  3761,  3518, -4039,  3484, -4039, -4039, -4039, 38843,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, 11894,  3974,  3500,
   57229,   127, -4039, 64837, 64837, 57229, -4039, -4039, -4039, -4039,
    5936, -4039, -4039,   722, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039,  4104, -4039,  3480, -4039, -4039,
    3485,   235, -4039, -4039, 57229, 56595, -4039, -4039,  6415,  3946,
     224, -4039, -4039, -4039,   250,  3490,  2226,   302, 57229, -4039,
    3775,   266,  1860, -4039,  3970,  2168, -4039, -4039, 11894, -4039,
   -4039, -4039,  4085, -4039, -4039, -4039, -4039, -4039, -4039,  1486,
   -4039, -4039, 26770,  2759, -4039,  3105, -4039, -4039, 57229, -4039,
    3585,    86,    86,  4009,  4010,    86,    86,    86,    86,  3501,
    3280, -4039,  3990, -4039, -4039, 11894, -4039, -4039,  2256,  3739,
   -4039,  4082,  1484,  2256, 57229,  2256, 57229, -4039,  3967,  3967,
   -4039, -4039,  2202,  2215,  2219, -4039,  2236,  2242, -4039, -4039,
   -4039, -4039,   992,  3512, -4039, 57229, -4039, -4039, -4039,   289,
   -4039, -4039,  2257, -4039,  2264,  2457, -4039,  3475, -4039, -4039,
   -4039, -4039, -4039, -4039,  2256, 11894, -4039, 11894,  3545, -4039,
   -4039,  3976, 57229, -4039, -4039, -4039, -4039, 11894, -4039, 63569,
   63569, -4039, -4039, -4039, -4039,  4139,  1008,  4110,  3794,  4113,
   -4039, -4039,  2268, -4039, -4039,  3638, -4039, -4039,  3749,  6415,
   -4039, -4039, -4039,  -188,    86, -4039,   302, -4039, -4039, -4039,
      86,   309,  3528,  3788, -4039,   266, -4039, -4039, -4039,  1860,
   -4039, -4039, -4039,  2515,   309, -4039, -4039, -4039,  3531, -4039,
      86, -4039,  3533, -4039,  3572, -4039,  3535, -4039,  -188,  -188,
      86,    86,  3526,  3526,  3105, 48353,  3645, -4039, -4039,    86,
     309, 57229, -4039,  1665,  3910, -4039,  2284,  2295,  1504, -4039,
   -4039, -4039,  3754, -4039,   302, -4039, -4039, -4039,  3375, -4039,
    1134,  1134,   217,   199,   217, -4039,  3540, -4039,  3541,  2256,
    2256, -4039,   247, -4039, -4039,  3947,  4035, 11894,  2256, 60399,
    3539, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, 64203, 11894, -4039,   722,  4104, -4039,
    3816, -4039,  3825, -4039, 56595, -4039, -4039, -4039,  4068, 63569,
   -4039,  4061, -4039,  1008, -4039,  3295,   976, -4039, 39477, -4039,
   -4039,  1879,   976, -4039,   976, -4039, -4039, 26770, 15830,  2452,
   -4039, -4039,  3566, -4039, -4039,   -38, -4039, -4039,  -188,  -188,
   -4039, -4039, -4039, -4039, -4039,  2297, -4039, 48353, -4039, -4039,
    4162,  4165,  4057,  4170,  1665, -4039,  -118, -4039, -4039, -4039,
    4172, -4039,  4173,  3574,  3581, -4039,   302, -4039,   266,  1860,
    2303, -4039,  4222, -4039,   863,  3853,  3857, -4039, -4039, -4039,
   -4039,   -92,  3609, 11894, 63569, -4039,  4074, -4039,  4004,  2239,
    3949,  3584, -4039,  3582,  2254,  4117, 64837, 64837, -4039, -4039,
   -4039, -4039, -4039,  4089, -4039, -4039, -4039, -4039, -4039,  3964,
    4243, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039,  2305, -4039, 16486, -4039, -4039, -4039, -4039, -4039,
   48353, -4039,  3645, -4039,  3605,   199,   199,  4209,   199, -4039,
    4211,  4213,  -118, -4039, -4039, -4039, 53425, 53425, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039,  3663,  4128, -4039, -4039,   168,
   -4039,   258, -4039,  2256, 61033,  4210, 57229, -4039, -4039, -4039,
   -4039, 11894, -4039, 49621, 61667,  3610, -4039, -4039, -4039,  3791,
   -4039,  3638, -4039, -4039,  3798, -4039,  3566, -4039,  3616, -4039,
    2025,  3280, -4039, -4039,  3619, -4039, -4039,   199, -4039,   199,
     199, -4039,  3620,  2307,  1134,  1134,  -188,  4012, -4039,   168,
   -4039, 11894, -4039,  4115,  3714, -4039,  3627, -4039, 63569,  2294,
   63569, -4039, -4039,  4063,  3628,  1505, -4039,  3622, -4039, -4039,
   63569,  4052,  4082, -4039, 16486,  3632, -4039, 11894,  3639,  3634,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039,  2256,  4229, 63569, 57229, 58497,  3838, 62301,  4095, 57229,
    6415,  4097,  4098, -4039, 63569, -4039,  4246,  3910, -4039, -4039,
    2256, -4039, -4039,  3733, -4039, 59131, -4039,  2813, -4039,  3671,
   -4039, -4039,  4169,  2754, -4039, -4039,   199,  4069, -4039, -4039,
   63569, 63569, -4039, -4039, -4039, 37575, 11894, -4039, -4039, -4039,
   -4039, -4039,   813, -4039,  3933,  3652, 59765, 62935, -4039, -4039,
   -4039, 32496, -4039, -4039, -4039,  4108, -4039,  2256, -4039,    73,
   21660,  3818, 37575, -4039, -4039, -4039, -4039, -4039, -4039, 48353,
    2337, -4039, -4039, 26770, -4039, -4039, -4039, -4039, 24857,  3653,
   -4039,    86, -4039, 26770, -4039, -4039, 15830, -4039, -4039
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4039, -4039, -4039, -4039, -4039,   164, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039,  1940, -4039, -4039, -4039, -4039, -4039,
    1640, -4039,   539, -2394,  -477,  3326, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039,   827,  1756,  3646,
   -4039,   540, -4039,   148, -4039, -4039, -4039, -2963,     3,  -205,
   -4039, -4039,  1109,    23,  3285,  -203, -4014, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039,   545,   542, -4039, -4039,
     338, -4039, -4039, -1152, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039,  -416,  -375,  1998, -4039, -4039, -4039,  4292, -4039,
    3742, -4039, -1829,  2407, -4039, -4039, -4039, -4039, -4039,  2476,
   -1763, -4039, -4039, -4039,  1509, -4039, -4039, -4039,  -269,   365,
   -4039,   366, -4039,   367, -4039,   368, -4039,   369,   372,   373,
     376, -4039,   380, -4039, -4039,  -371, -4039, -4039, -4039, -4039,
     381, -4039, -4039, -4039, -4039, -4039, -4039, -4039,  -233, -4039,
   -4039,   -39, -4039, -4039,  -224,   387, -4039,  -157,   388, -4039,
     390, -4039,   -55, -4039,   -52, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039,  3283, -4039, -4039,
   -4039, -2307, -4039, -4039, -2438,  2793, -4039, -1685, -4039, -4039,
   -1900, -4039, -4039, -1653,   823, -4039, -4039,  1332,  -331, -4039,
   -1469, -1961, -1960, -4039, -4039, -4039, -2077, -2073,  -769,  2538,
   -1267, -2316, -4039, -4039, -4039, -4039,   194, -4039, -4039,   378,
    1746,  2266, -4039, -2536, -4039, -4039,   944, -4039, -4039,  1519,
    1962, -4039,  1086,  2996, -1304, -4039, -4039, -4039, -4039, -4039,
   -4039,   169,   344,    35, -4039, -3782,   771, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -2663, -4039, -4039, -4039,  -271,
   -4039, -4039,  -170, -4039, -4039,  -225, -4039,   172, -2386, -4039,
   -4039, -4039, -4039,  2782, -1358, -4039,  3863, -4039,  -494,   609,
    1781, -2489, -2001, -4039,  -945,  -942, -2954, -4039, -4039, -4039,
   -1819,  1276,  1340, -4039,   892,  1779, -2462, -4039, -4039, -4039,
   -4039, -4039,  1343, -4039, -4039,   505, -4039,   499, -4039, -4039,
   -4039, -4039,  -220, -4039,   152, -2996, -4039, -4039, -4039, -2985,
    1226,   694, -4039, -4039, -4039, -1570, -3004, -1634, -4039,   321,
   -2444, -2531,   667, -4039, -4039,   469, -3947, -4039, -4039,  -591,
   -2166, -2466,   -25, -4039, -4039,   483, -3428,  1906, -4039, -4039,
   -4039, -3387, -2220,  1647, -4039, -4039,  1196, -4039, -1159,  1195,
   -4039, -4039, -4039,  1202, -4039,    61, -4039, -4039, -4039, -4039,
   -2782, -4039, -4039, -1563, -2740, -4039, -4039,  4433,  4434, -1590,
   -3113, -4038,   -51,   -49, -4039, -4039, -4039,  2250, -1783,   126,
     114,   119,  1748, -1330,   267,  1072, -1705, -4039,   347, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039,  1840, -1481, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -2454, -2898, -4039, -4039,  1400,
   -4039, -4039, -4039, -2294, -2078, -2082, -2430,  3448, -4039, -4039,
   -4039, -4039,  3411, -2285, -3749, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039,  2940,  1123, -4039, -4039,  1966, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039,   556,  2043, -4039, -4039, -4039, -4039,
    2356, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,    45,
   -4039, -4039, -4039,   796,  2874, -4039, -4039, -4039,   -12, -4039,
   -4039, -4039, -4039,  2557, -4039, -4039, -4039, -4039,  2892, -4039,
   -4039, -4039, -4039, -4039, -4039,  1635, -4039,  2075, -4039, -1545,
   -4039, -4039,  1192, -1034,  2035,  -610,  2169,   509, -4039,  3874,
   -4039, -4039, -4039, -1748, -2514, -4039,  3551,  -849, -2720,  2547,
    -573, -1930,  1235,   223,  1550,   729,  3961, -4039, -1191, -1144,
   -4039, -4039,  -664, -4039, -4039, -4039, -4039, -4039,  2267,  2275,
    -635, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039,  1677, -4039, -4039, -4039, -4039, -1271, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039,  1503, -4039, -2147, -4039, -4039,
    -450, -4039,  3319, -4039, -4039, -4039, -2398, -1995,  1981,  1146,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039,  1990, -4039, -1626,
   -4039, -2792, -4039, -4039, -4039, -4039, -4039,  2185, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -1606, -4039, -1975,   262, -4039,
     437, -4039, -4039, -4039, -4039, -4039, -4039, -4039,   -67,  1015,
     -64, -2945, -1136,  1784, -4039, -4039, -1334,  3353, -2393, -4039,
   -4039, -4039,  2171, -4039, -4039, -4039, -4039, -4039,   818, -3021,
    2966, -4039, -4039, -3321,  -958, -2342,  -935, -4039, -1442,  1577,
     627, -4039, -1909, -1138, -1489, -2975, -2478, -4039,  1466, -4039,
   -4039, -4039, -4039,  -178, -4039, -4039, -4039,   640,  2066, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,  -568,
    -922, -4039, -4039,  2327,  -493, -4039,  3491, -4039, -4039,  3492,
   -4039, -4039, -4039, -4039,  3156,  3130,  2128, -4039, -4039, -2608,
   -4039, -4039,  2096, -4039,   914,  -941, -1660,  1223, -4039, -4039,
    1229, -3288, -4039, -4039,  3499, -4039, -4039, -4039,  1172, -4039,
      85,  3938,  3506, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039,  2910, -1106,  3860, -4039, -4039, -4039, -4039, -4039, -4039,
    2525, -4039, -4039, -4039, -4039, -4039, -4039,  3075,  3957,  -596,
   -1327, -4039,  -770,  2528,  2056,  -899, -4039, -4039, -4039, -4039,
    3962, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
    2705,   856, -4039, -4039, -4039, -4039,  3157, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,  1266,   -97,
   -4039,    83,  -124, -4039,     2, -4039, -4039, -4039, -4039, -4039,
    -193, -4039, -4039,  -195, -4039, -1020, -1444,   628, -1312, -2592,
   -4039,  1265,  3142, -3356,  -697, -1233, -1224, -2801,    74, -4039,
   -4039,  3625,    71,  -466,  -321,    -6, -3122,  -111,  -584,  -611,
   -4039, -2619, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
    2099, -4039, -4039, -4039,  1239, -4039,  3989, -4039,  2798,  1241,
    3992, -1408,  2618,  2114,  2122, -4039, -4039,  2129, -1986, -4039,
   -4039,   155, -4039,  2696, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039, -4039,
   -4039,  3769,  -486,  -474,  3175,  4016,  3684, -4039,  3241, -4039,
   -4039, -4039, -4039, -4039,   575, -4039,   918,  2160, -1286, -2401,
   -4039, -4039,  2987,  1041, -4039,  1775,  -272,  -576, -4039, -4039,
     574, -4039, -4039,   320,  4022,  3686, -4039, -4039, -4039, -4039,
   -4039, -2806,  -915, -4039, -3471, -2867, -1753, -4039, -4039, -2236,
   -3095, -4039, -4039, -1086, -4039, -4039, -4039, -4039, -2076, -4039,
   -4039, -4039,   131,  4086,  4087, -4039, -4039,  1057, -4039,   534,
   -4039, -4039, -4039, -4039, -4039, -4039, -4039,  3944, -4039, -4039,
   -4039, -4039,  3945, -4039, -4039, -4039, -4039, -4039,  3948, -4039,
   -4039, -4039, -4039, -4039,  1812, -4039, -4039, -4039, -4039, -4039,
   -4039, -4039, -4039, -4039
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2758
static const yytype_int16 yytable[] =
{
     512,  1095,  1003,   896,  1553,  1773,   956,   999,   557,  1449,
    1452,  1034,  2202,   556,  1774,  1435,   642,   564,   575,  1560,
    1465,  2464,  2465,  1864,  1048,   583,  1681,   578,   666,   510,
    1644,  2634,  2132,  2325,   590,  2633,  1840,   593,  1485,  2011,
    1515,  2010,   590,  1189,  2198,  2199,  1725,  1905,  2129,   611,
     829,   830,   831,  2878,   833,  1978,   835,  2742,  1141,   837,
    2847,   839,  1748,  1485,  1863,  2983,  2972,  1303,  3039,  2749,
    1796,  3414,  1479,  3112,   871,   139,  1876,  1804,  3320,  2831,
    3662,  3248,  3356,  2983,  2983,  1914,   872,  1690,  1103,  2750,
    2807,   817,   631,  1084,  1087,  1536,  3475,   562,  1565,  2371,
    1516,  1566,  1112,  1120,  2087,   871,  2686,  2447,  2995,  3698,
    2687,  2942,  2623,  3482,  2951,  2946,   634,   926,   512,  2902,
     512,   641,   647,  2960,  1009,  1806,  1807,  1016,  3415,  1810,
    1811,  1812,  1813,  3490,  1815,  1816,  1818,  1820,  1821,  1822,
    1823,  1824,  3004,  1286,  3527,  3988,  3008,   636,  2172,   638,
    2568,  2569,  1589,  1365,  4032,  3876,  3594,  3023,  1253,  1254,
    3971,  1244,  1245,  1246,   519,  2100,  3362,  2018,  3239,  3034,
    1920,  3821,   630,  1287,  1365,  1253,  1254,  3544,  2312,  3939,
    1253,  1254,   871,  2221,   574,  2556,  1128,  2031,  1129,  1130,
    1131,   582,  3376,  2983,  2983,  2034,  2035,  1909,  1253,  1254,
    3175,  3176,  2460,  3392,  3558,  2065,  3182,  3043,  3184,   570,
    3534,  2719,  3127,   663,  1359,  1253,  1254,  3850,  3154,   600,
    2184,  3378,  2683,  2684,  3535,  1562,  3850,   603,  3155,  2361,
    1517,  4316,  1253,  1254,  1490,  1356,  2637,  1022,  3536,  3534,
    2411,  1562,  3125,  3809,  2803,  2987,  2988, -1556,   878,   965,
     946,  4636,  1445,  3535,  1306,  -931,  1374,  1468,  2991,  3910,
    2361,  3388,  2100,  1088,   652,  1253,  1254,  3536,  3680,  3315,
    2674,  -570,  3677,   121,  1040,  4266,  1253,  1254,   965,   946,
    2000,  4074,   965,   946,  3240,   888,  4555, -1556,   912,  4307,
    3180,   653,  1837,  4252,  1530, -1596,  1010,  3201, -2635,  1366,
    4308,  4436,  3330,   620,  1784,  1378,  2089,   882,  3378,  1959,
    3897,  4587,  1604,  2513,  1543,  3074,  3145,  1288,  1253,  1254,
    1366,  1397,  4003,  2700,  3165,  4290,  3167,  1253,  1254,   571,
    3667,  2079,  4101,  1562,  3874,  1647,  1098,  1960,  3932,  3937,
    2001,  4260,  3938,  2117,  3342,  2975,  4497,  1309,   871,  4323,
    2178,  4755,  1291,  3044,  2375,  3118,  3119,  3308,   138,  3083,
     567,  3948,   592,  -571,  2223,  3354,  2695,  3078,  3970, -1802,
    2913,  2895,  4442,  1520,   138,  1253,  1254,  2412,  1600,  2304,
    2083,  1486,  3079,  1917,  3072,  4323,  1496,  1253,  1254,  2696,
    3189,  2914,  1253,  1254,   123,   883,  2218,  3156,  1628,  1253,
    1254,   913,  1090,  4514,  1169,  2798,  2531,  2532,  3851,  4570,
    2224,  1290,  -476,  2790,  4514,   669, -1802,  3851,  2564,  1023,
    1024,  3084,  2203,  2543,  3355,  4390,  1629,  2915,  1918,  2255,
    4102,  2313,  2545,  1605,  3073,  1487,  3803,  1606,  3379,  2791,
    2561,  2562,  2933,  4571,  1253,  1254,  3668, -1596,  1607,   869,
    2514,  2525,  1410,  3370,   881,  1392,  3239,   654,  4578,  2101,
    2376,  2118,  2896,  2976,   568,  3075,   884,  2515,  1648,  4019,
    1229,   621,  1785,  4103,  4267,  1689,  3753,  2083,   914,  2516,
     869,  2100,  1091, -2107,  3517,  2080,  4291,  1253,  1254,  1189,
    3325,  3326,  3327, -2256,  1170,  1011,   270,  1961,   272,  2289,
    2921,  1299,  3328,  3329,  1041,  2669,  2670,  2671,  2672,  1379,
    1253,  1254,  3852,  4387,  1510,  1973,  1544,  4309,  2058,   657,
     641,  4053,   647,  1253,  1254,  1255,  2002,  4324,  1256,  4588,
    1836,  1042,   270,  4075,   272,  1625,  1626,  1627,  3132,  3331,
    1253,  1254,  1255,  2959,   647,  1256,  4756,  1255,  1838,  4110,
    1256,  1531,  1253,  1254,   641,   876,  2101,   869,  4114,   641,
    2517,   886,  3901,  4324,  2482,  1255,  1290,  3653,  1256,  1840,
    1089,  3657,  3240,  4183,   904,  4041,  4073,  4268,   889,  1446,
    1608,  2413,  4130,  3376, -1596,   641,   660,  4132,  3620,  2013,
    1375,   957,  2016,  2983,  3468,  3683,  2019,  4436,  2022,  1255,
    1801,  1018,  1256,  2686,  2568,  2569,  4500,  2687,   879,  1469,
    3681,  3691,  3692,  3241,  4551,  2063,  2087,  2968,  1565, -1891,
    1037,  1566,  2623,  1601,  1864,  3695,  2037,  2038,  2638,   641,
    1289,  1053,  1255,  1253,  1254,  1256,  2362,  1809,  1865,   887,
    3893,  3674,  2567,  1255,   512,  2983,  1256,  3133,   673,   631,
    3665,  1082,  1230,  1231,  1830,   631,   631,  3157,  3380, -1556,
    1096,  1053,   641, -2282,  3521,  1863,   641,  2362,  2782,  1357,
    2342,  1565,   660,  1069,  1566,   660,  2518,  3853,  1609,  1019,
    2160,  2345,  1136,  3374,  2348,  1255,  3502,  4189,  1256,  1253,
    1254,  2784, -2401,  3854,  1255,  1491,  2083,  1256,  4199,  1658,
    1659,  2172,  3854,  3518,  2047,  2504,  1253,  1254,   601,  3627,
     840,  1921,  1253,  1254,  2682,  2903,   604,  1521,  1360,  2683,
    2684,  3164,  2339,   869,  1302,  1713,  3249,  3846,   572,  1079,
     894,  3940,  4237,  1726,  1190,  1728,  1253,  1254,   907,  3093,
    1843,  3935,  1255,  4712,  3098,  1256,  2519,  1741,  1742,  1743,
    2033,  -931,  3106,  3107,  1255,  1747,  3544,  1256,  3114,  1255,
    3045,  1025,  1256,  4637,  1020, -2635,  1255,  -570,   928,  1256,
    1872,  3526,  3491,  3120,  1910,  2101,  3172,  2418,  1103,  1257,
    3537,   602,  1253,  1254,  3989,  3630,  3855,  3909, -1596,  4059,
    2185, -1596,  3242,  2990, -2635,  1250,  1257,  1252,  2328,  3128,
    2186,  1257,  1253,  1254,  2088,  3968,  2065,  3501,  1126,  3537,
   -2107,  1255,  2314,  3810,  1256,  1108,  1907,  1940,  2089,  1257,
   -2256,  1837,  1295,   512,  1297,  1298,  1053,   512,   641,   641,
    1602,   512,   641,  1927,  2305,  4429,  1257,  1341,  3381,  1450,
    3172,  1453,  4344,  1939,  1456,  1461,  3343,  1497,  2177,  1854,
    1522,  1602,  1296,  1257,  1255,  2235,  1300,  1256,  4055,  -571,
    1305,  1482,  3887,  3888,  2852,  3358,  2219,  1958,  1781,  1782,
    1253,  1254,  2048,  4401,  1370,  1523,  2049,  1255,  2989,  4370,
    1256,  2017,  1253,  1254,  4590,  2708,  1257,   631,  3911,  4391,
    1255,  2985,  3260,  1256,  2429,  4333,  2934,  1257,  2965,   641,
     631,  3241,  2236,  2178,   631,  2950,  1602,  1255,  -476,  2709,
    1256,  3003,  1781,  2254,  3006,  3007,  2689,  3009,  3753,  1255,
    3012,  3013,  1256,  3632,  3016,  1253,  1254,  1714,  2878,  3025,
    1715,  1933,  3301,  3345,  3029,  3030,  3031,  3032,  3033,  1257,
    3687,  3109,  3037,  3038,   641,  3040,   641,  4064,  1257,   641,
     641,  3049,  3050,  3051,  3052,  2290,  3690,  3056,  3057,  3648,
    3059,  3652, -2078,  2293,  2294,  3656,   641,  1381,   140,  4066,
    1394,  3571,  4536,  1288,  3661,   900,  2067, -2107,  1993,  2634,
    1400,  3360,  3361,  2633,  1406,  1511,  3633, -2256,  2571, -2629,
   -2282,  2429,   994,  1468,  1232,  4583,  1257,  1334,  2995,  2898,
    1255,  3465,  3134,  1256,  2926,  4507,  2332,  4509,  1257,  4067,
    4449,   631,  2209,  1257,  4299,  2457,  3816,  2471,  3123, -2401,
    1257,  4294,  4295,  4456,  3022,  3819,  2165,  3601,  2210,  2568,
    2569,  3023,   685,  1561,  2261,  4181,  2227,  2486, -2612, -2553,
    1103,  1056,  1253,  1254, -2554,  3561,  3053,  2686,  4208,  4478,
    2011,  2687,  2011,  2011,  2938,  2939,  1255,   631,  3323,  1256,
    2623,  3220,   660,  2690,   660,  1257,  2927, -2616,   631,  2500,
    2321,  2340,  2371,  1255, -2615,  2087,  1256,  1838,  2496,  1255,
    2310,  2311,  1256,  1253,  1254,  1253,  1254,   558,  2899,  2435,
    1445,   686,  1485,  1483,  1057,  2838,  2567,  2436,  3395,   515,
    3397,  2475,  2721,  1255,  2530,  3180,  1256,  3408,  1257,  2563,
    1628,  1253,  1254,   520, -2473,  2992,  2763,  2867,  3649,  2498,
    1451,  3421,   631,  1633,  1634,  1635,  1640,  1485,  3432,  3434,
    1969,  1257,  2503,   871,  2192,  2506,  2507,  1581,  1630,  2430,
    1791,  3451,  3453,  3455,  1257,  2180,  2811,  3456,  3434,  1255,
     591, -2613,  1256, -2553,  4281,  1877, -2614, -2282, -2554,  2812,
    2813,  1257,  3096,  2683,  2684,  2928,  1190,  1253,  1254,  1255,
    4549,  1525,  1256,  1257,  4300, -2619,  2222,  1829,  2943,  3925,
    1190,  3466,  3926,  3498,  2083,  1058, -2401,  4501,  3205,  3206,
    2333,  1963,  2347,  1253,  1254,  3110,  2325,  3517,  1589,  1270,
    1253,  1254,  1632,  1970,  2172,   908,  1638,  2816,  2817,  1114,
    1122,  2682,  3945,  3946,  3947,  1774,  2437,  2438,  1942,  1565,
    3950,  1109,  1566,  2691,   687,  1866,  1624,   612,  3976,  3019,
    3054,  4584,  1775,  1253,  1254,   580,  2430,  1255,  2322,  1865,
    1256,  1253,  1254,   880,  2929,   641,  1472,  3918,  3615,  1255,
    2810,   901,  1256,  1526,  1257,  1253,  1254,  2439,  2360,  2349,
    2820,  2596,  1253,  1254,  3923,  3924,  1253,  1254, -2629,  3222,
    3223,  3180,  2130,  2863,  3180,  3180,  2364,  2089,  3572,   613,
     138,  1919,   641, -1891, -2705,   576,  1289,  1833, -2473,  2963,
    2047,  3180,  1255,  3616,  1512,  1256,  2131,    44,  1774,  4376,
     134,  4377,   631,  2166,  1473,  3949,  3295,  1253,  1254,  1837,
    1257,  3969,  3972,  3974,  3975,  2404,  2088, -2612,  2431,  1253,
    1254,  1253,  1254,   138,  4209,  3257,  3258,  1257,  1070,  1190,
     641,   623,  1474,  1257,  3111,  3779,  2100,  2417,  3592,  2425,
    2426,  1253,  1254,  2229,  3780,  1469, -2616,  1141,   641,  2232,
    4301,  1253,  1254, -2615,   614,  3407,   641,  1257,  2476,  2497,
    2083,  1890,  4168,  1893,   909,  1964,   631,  1602,  3416,  1253,
    1254,  1878,  3813,  2233,  1716,  4375,  2367,  1717,   631,  2167,
    4322,  4068,  1110,  1253,  1254,   135,   641,  4470,  4471,  1253,
    1254,  1253,  1254, -2705,  1273,   631,   631,   660,  1059,  1253,
    1254,  2177,  2334,  1257,  4607,  4607,  2178,  3912,  3138,  1255,
    1971,  4006,  1256,  2689,  2688,  2431,  3518,  1446,  2335,  2234,
    2047,   641,   641,  1257, -2757,  1945,  1253,  1254,  2083,  3192,
   -2613,  1253,  1254,  1953,  1943, -2614,  1954,  3386,  3386,  2241,
    1109,  2604,  1162,  1163,  1897,   641,  1406,   605,  1221,  3021,
    1255,   871,  1255,  1256, -2619,  1256,  1974,   957,  2048,  2069,
    2930,  1604,  2049,  2448,  1060,    58,  1061,   512,   512,   512,
     631,   512,   631,  4542,  1483,  4343,  1406,  2012,  1255,   660,
     994,  1256,  3781,  2014,   512,  1837,   641,  3534,  4777,  2607,
     512,  1257,  4219,  2011,  4258,  4259,  1994,  1995,  1996,  4502,
    1998,  3535,  1387,  1257, -2553,  1388,   607,  2242,   869, -2554,
    1879,   631,  4220,  2015,  1225,  3536,  1235,  3394,  3221,  2021,
    2457,  2567,  3779,  4563,  4168,  4168,   965,  3933,  3139, -1918,
     624,  3780,  3117,  2168,  1255, -2553,  2517,  1256,  1222,  1990,
   -2554,  2919,  3941,  3424,  3425,  3942,  1257,  1070,  1475,  1797,
    1997,  2083,  1999,  1837,  1825,  4261,  3286,  3287,  3288,  3364,
    1255,   626,  2252,  1256,   641,  1838,  2020,  1255,  2675,  3983,
    1256,  2458,  2786,  1879,  2435,  1864,  1350,  3458,   632,   631,
    1253,  1254,  1605,  2061,  2125,   631,  1606,   635,  2048,   679,
    4240,  2032,  3417,  4016,  4503,  4691,   631,  1607,  1253,  1254,
    1255,  1110,  1433,  1256,  1226,  3493,   615,  1586,  1255,  4506,
     608,  1256,  3166,   641,  1253,  1254,  1863,  4692,   641,  4185,
     512,   512,  1255,  2194,   512,  1256,  4504,  3256,   616,  1255,
    2101,  3369,  1256,  1255,   668,  1136,  1256,  2208, -1918,  3311,
     672,  1253,  1254, -2757,  2070,  4015,  1647,  2099,  1774,  2190,
    2191,  2983,  1389,   657,  1270,  2682,   994,   834,  2071,  2119,
    1631,  1647,   838,  1257,   617,  2127,  1253,  1254,  3418,  3781,
    1253,  1254,  1253,  1254,  1255,  1064,  1837,  1256,  3675,  2253,
    4168,  4168,  3678,  3679,  1253,  1254,  1255,  1476,  1255,  1256,
     905,  1256,   637,  1253,  1254,  3071,  3061,  1280,  1281,  1282,
    1283,  1284,  1285,  2040,  1257,  2815,  1257,  2061,  1255,  1477,
    3140,  1256,   650,  4239,  1253,  1254,  4490,  1647,  1255,   123,
    2257,  1256,  2269,   618,   994,  1190,  2262,  1093,  1094,  1608,
    1253,  1254,  1257,  1798,  2365,  1127,  1255,  3984,   663,  1256,
    1647,  1838,  4005,  1253,  1254,  -212,  2139,  2140,  2276,  2852,
    1255,  1478,  4131,  1256,  1674,  4133,  1255,   665,  1255,  1256,
   -2705,  1256,  2153,  4491,  1253,  1254,  1255,  1618,  3419,  1256,
    1253,  1254,  1826,  2544,  1569,  2088,  4346,  1253,  1254,  1670,
    1946,  2382,  2746,   667,  2041,  3281,  2331,  2751,  1257,  2130,
    4168,  3365,  1619,  1255,  1733,  1827,  1256,  1103,  1255,  4553,
    2757,  1256,  4557,  3430,  2280,  4168,  1624,  1253,  1254,  1838,
    1624,   680,  1774,  2131,  1257,  2353,  1675,  3141,  3386,  1065,
    4168,  1257,   529,  2354,  4480,  2072,   869,  1609,  2355,   631,
    2281,   827,  1253,  1254,  2772,  4481,   641,  2283,   631,   641,
    2890,  2325,  1253,  1254,  2470,  1676, -1918,   994,   682,  1273,
    1737,   631,  4676,  4677,  1257,  4347,  1341,  2689,  1253,  1254,
     671,  1341,  1257, -1802,  2378,   721,  1306,  3498,  2255, -2705,
    2284,  2386,  2386,  1761,  2386,  3835,  1257, -1918,  2288,   683,
    1578,  1579,   836,  1257,  2983,  2983,  2353,  1257,   684,  4492,
    2155,  2156,  2306,   641,  3339,  4168,   631,   956,  3022,  3203,
     631,  2073,  2226,  2826,  2177,  4233,  4234,  4168,  4168,  2356,
   -1802,  2688,  3682,  1947,   832,  1677,  2720,   641,   641,   631,
     631,   843,  1253,  1254,   660,  1622,  2074,   726,  1257,  4235,
    1190,   641,  1838,  4024,  1253,  1254,  2386,  2386,  2386,  1978,
    1257,   877,  1257,  4323,  3204,  1799,  3696,  1255,   891,   641,
    1256,  2385,  2385,  4663,  2385,  3530,  3215,  3700,  3225,  1828,
    3702,  1800,  1257,  1253,  1254,  1255,   957,  3900,  1256,  1435,
    2983, -1919,  1257,  2100,  3348,  4168,  2409,   897,  3226,  3817,
    1381,  1255,  1253,  1254,  1256,  4168,   899,  2493,  3829,  2075,
    1257,   917,  2424, -1918,  1678,  1253,  1254,  1485,   919,  1400,
    2428,  1253,  1254,  1008,  1257,  2228,  1253,  1254,  1255,  3530,
    1257,  1256,  1257,  1015,  1253,  1254,  2385,  2385,  2385,  2243,
    1257,  3650,  3368,  1253,  1254,  2244,   739,   631,   909,  4168,
    2165,  4168,  3528,  1255,  2708,  2251,  1256,  1255,   587,  1255,
    1256,  4168,  1256,  2512,  3351, -1918,   587,  1257,  4482,  1035,
     631,  1255,  1257,  4051,  1256,  1253,  1254,  3537,  2709,  2489,
    1255,  3563,  3564,  1256,  4168,   516,  4168,  2265,  4168,   517,
    2676,  1036,  1253,  1254,  1044,  4168,  2692,  4072,  3934,  3750,
   -1919,  1255,  3577,  3588,  1256,  2076,  4168,  3590,  3903,  3904,
     270,  2514,   272,  2435,  1774,  2165,   880,  1255,  3585,  1055,
    1256,  4168,  4168,   965,   946,   755,  1070,  2505,  2515,   270,
    1255,   272,  1450,  1256,   631,  2066,  3531,  4168,  4168,  1080,
    2956,  4324,  4168,  3442,  1450,  3443,  4205,  4206,  4207,  2678,
    2524,  1255,  1529,  2963,  1256,  2337,  1063,  1255,  1534,  1535,
    1256,  2534,  1774,  1083,  1255,  3927,  1101,  1256,  3930,  3931,
    2541,  2542,  1253,  1254,  1282,  1283,  1284,  1285,  4546,  1102,
    4547,  2546,  2547,  2548,  2549,  3943,  2557,  2558,  1107,  3444,
    3531,   121,  1270,   641,  1255,   641, -1891,  1256,  1253,  1254,
    1138,   641,  1139,  2693,  1140,  1365,   512,  1142,  2083,   516,
    1865,  3445,  1143,   517,  2715,  3532,  1144,  2718,  1147,  1255,
    1148,  1257,  1256,  1290,  1253,  1254,  1253,  1254,  1149,  1255,
    1679,  1150,  1256,  1253,  1254,  2698,  2266,   641,  2808,  1257,
    2437,  2438,  1253,  1254,  1151,  1255,  4483,  3446,  1256,   641,
    1152,  1253,  1254,  4034,  2270,  1257,  1093,  1094,  1253,  1254,
     581,  2225,  1290,  1153,  1253,  1254,  2230,  2231,  2830,  3542,
    2274,  2349,  1154,  2083,  1253,  1254,  1253,  1254,  1103,  1103,
    1103,  3314,  1257,  1155,  1270,  3686,  1156,  2101,  2248,  1290,
   -1596,  1253,  1254,  1253,  1254,  2992,  2818,  2275,  1680,  1157,
    1940,  1940,  1940,  1158,  4352,  3307,  1159,  1257, -1919,  1255,
    1160,  1257,  1256,  1257,  1695,  1164,  4108,  4109,  2256,  1290,
    1025,  1255,  2279,  1201,  1256,  1257,  2282,  2166,  2285,  4112,
    1166,  1253,  1254,  1837,  1257,  1167,  4115,  2957,  1168, -1919,
    2297,   784,  1171,   641,  1172,  1220,  1173, -1596,  1293,  2316,
    1255,  1366,  1174,  1256,  1175,  1257,  1176,    13,  1236,  1237,
    4035,  4036,  4134,  4135,  3762,  4037,  4038,  1177,  2827,  1255,
    3169,  1257,  1256,   641,  1294,  2688,   994,  2011,  1178,  4013,
    1179, -1596,  1255,  3255,  1257,  1256,  3193,  1273,  1255,  1180,
    3622,  1256,  2166,  1255,  1183,   641,  1256, -1596,  1837,  3199,
    1184,  1255,  1185, -1596,  1256,  1257,  1191,  2519,  3311,  3019,
    1255,  1257,  3646,  1256,  1192,  1699,  1873,  1774,  1257,  1874,
    3200,  1193,  1875,  4602,  2100,  1270,  3207, -1596,  4336,  4340,
    2861,  3533,  1310,  3211, -1596,  1485,  2861,  2258,  1290,  3166,
    2470,  1450,  1255,  3406, -1596,  1256,  1029,  1030,  1257,  1031,
    3447,  1032,  2130,  2883,  1194, -1919, -1596,  2886,  1195,  1255,
    1342, -1596,  1256,  3212,   641,   641,    25,  1345,  2167,  1196,
   -1596,  2259,  1731,  1257,  4686,  1197,  2131,  4612,  2907,  1273,
    2909,  2165,  4613,  1257,  3430,  3533,  2271,  1290,  3213,  4010,
    4011,  2272,  1290,  1774,  3448,  2273,  1290,  1344,  3214,  1257,
    2277,  1290,   957,  1198,   994,  1253,  1254, -1919,  2012,  2325,
    2012,  2012,  2559,  2560,  3216,  2800,  1290,  2836,  2837,  1700,
    3377,  3188,  2231,  1703,  1199,  4248,  4249,  1202,  3389,  1203,
    1704,  3191,  1290,   965,   946,  3396,  1775, -1596,  1204,  1255,
    1275,  1276,  1256,  3217,  1290,   641,   641,  3410,  1346,  3412,
    3413,  3317,  3318,  1205,  1347,  2906,  4537,  3321,  3322,  1206,
   -1596,  3426, -1891,  1257,  1207,  1255,  3826,  1208,  1256,   994,
   -1596,  1209,  4336,  1210,  2726,  1257,  4340,  1351,  3219,  1211,
    2678,  4358,  4359,  3596,  1290,  4362,  4363,  4364,  4365,  1838,
    3224,  1255,  4080,  1255,  1256,  1212,  1256,  1213,  1348,  1214,
    1255,  1215, -1596,  1256,  1257,  1216,  1674,  4351,  1217,  1255,
    1218,  1705,  1256,  3020,  4089,  1349,  3618,  3619,  1255,  3227,
    1273,  1256,  2168,  1257,  1219,  1255,  3767,  3768,  1256,  3021,
    3055,  1255,  1275,  1276,  1256,  1223,  1257,  1353,  3229,  2083,
    1224,  1255,  1257,  1255,  1256,  3070,  1256,  1257,  1227,  -674,
    1354,  3231,  1228, -1596,  1838,  1257,  3951,  3233,  1255,  3091,
    1255,  1256,  4089,  1256,  1257,  1651,  1652,  1653,  1675,  1707,
    3234,  1362,  3775,  3776,    38,  3806,  3814, -1596,  1363,  3235,
    3830,  1290,  1671,  1234,  4445,  1238,  2673,  1239,  1278,  1279,
    1280,  1281,  1282,  1283,  1284,  1285,  1257,  1676,  1255,  3847,
    1290,  1256,  3952,  3862,  3863,    44,  3992,  2560,  1260,  1261,
     121,  3582,  3953,  1257,  1734,   631,  3070,  1738,  2101,  1240,
    4468,  4469,  1241, -1596,  1242,   631,   631,   631,  3583,  4477,
    4173,  4174,  1243,  1940,  1292,  4336,  4340,  1364,  1757,  1758,
    3094,  3095,  1762,  3097,  1262,  3099,  3100,  3101,  3102,  3103,
    3104,  3105,  4187,  4188,  3108,  1269,  1263,  3113,  2166,  1371,
    3116,  3954,  1776,  1777,  1837,  4191,  4188,  1677,  4253,  4254,
    1373,  4256,  4257,  1275,  1276,   956,  3570,  4192,  4188, -1596,
    1278,  1279,  1280,  1281,  1282,  1283,  1284,  1285,  4217,  4218,
    4718,  1377, -1596,  1257,  2090,  3143,  1385,  1264,  1395,  2945,
     931,  2139,  2140,  4247,  3322,  3160,  3161,  3162,  3584,  1265,
    1407,  1708, -1596,   122, -1596,  1409,  2388,  2153,  2389,  1257,
    1425,    54,  3171,  1427,  4598,  -667,  1428,  1710,  3597,  4255,
    4188,   123,  1429,  3955,  3828,  1436,  1266,  1430, -1596, -1596,
    1433,  2992, -1596, -1596,  1441,  1257,  1678,  1257,  1466,  1341,
    1442,  2378,  1462,  2993,  1257,  1370,   641,   641,   641,   270,
    3834,   272,  3836,  1257,   631,  4264,  4265,  4778,  1270,  3837,
    1471, -2748,  1257,    58,  1467,  4381,  3619,  1498,  3838,  1257,
    2452,  2453,  2454,   641,  1483,  1257,  1775,  3839,  4382,  4188,
    1492,  -850,  4383,  4188,  4077,  1257,  1493,  1257,  1267,   124,
    4200,  1190,  2091,  2550,  1495,   641,   641,   641,  1499,  4385,
    4188,  1514,  1257,  1494,  1257,  4386,  4188,  1518,  3338,  1519,
    2863,  1278,  1279,  1280,  1281,  1282,  1283,  1284,  1285,  3951,
    4392,  4393,  1524,   932,  2830,   994,  3689,  4394,  4393,  1532,
    2550,  4433,  4434,  3431,  3294,  2155,  2156,  1365,  1533,  3265,
    1538,  2012,  1257,  3786,  1539,  -667,  4251,  4488,  3322,  3266,
     523,  1541,  1500,  1546,  3811,  2551,  1551,  1501,  4489,  3322,
    4561,  4562,  1562,  1271,  3267,  3952,  4581,  3619,  4615,  4616,
    4675,  3495,  1572,   931,   125,  3953,  3268,  3269,  3270,  4721,
    4722,  1093,  1094,  1568,  2552,  3337,  1272,  3956,  2130,  4350,
    1570,  1270,  2551,  1575,  3957,  3271,  1576,  3070,  1774,   933,
    4767,  4768,  1580,  3393,  4025,  4026,  2730,  3391,  3070,  3403,
    1838,  1584,  2131,  1585,  3402,  1590,  1270,  1764,  1765,  3636,
    3637,  2552, -1596,  1591,  3954,  3603,  3604,  -667,  1592,   641,
    3402,  1613,  2731,  3427,  3958,  3423,  4129,  3860,  3861,  3438,
    1775,  3546,  3124,  2992,  1614,  3440,  3441,  1621,  1615,  1623,
     631,  1624,  1679,  1273,  2553,  2993,  1641,  1288,  1643,  1647,
    2092,  1654,  3402,  1673,  1684,  1719,  1730,  1731,  1732,  3070,
    3464,  2093,  1755,  1093,  1094,  3477,  1772,  1783,  2094, -1596,
    1792,   512,  2574,  1366,  2575,  3487,  1808,  4353,  1814,  2732,
    3402,  2553,  2733,  3404,  3405,  1835,  1834,  4273,  3547,  1619,
    2734,  3548,  1841,  4273,  1842,   126,   932,  3959,  1502,  3549,
    3483, -1596,  1845, -1596,  1848,  1849,  -815,  -815,  2735,  2577,
    4395,  3437,   270,  1850,   272,  1851,  3500,  3550,  -815, -1596,
    3439,  1852,  1853,  2554,  1855, -1596,  1856,  1270,  2580,  1867,
    1868,  3511,  1869,  1870,  1898,  1903,  2581,  4396,   631,  2994,
    1274, -1596,  3476,  1906,  -850,  1915,  1923,  -667,  4424, -1596,
    1924,  2211,   523,  1925,  1926,  -667, -1596,  3525,  1930,  1936,
    2554,  3551,  1935,  2583,  1937,  1938, -1596,  2095,   127,  1949,
    1955,  1979,   933,  1503,  1987,  1988,  1273,  1562, -1596,  1992,
    2584,  2024,  2023, -1596,  2025,  2026,  2029,  2028,  2030,  2059,
    2130,  2045, -1596,  2068,  2114,  2120,  1275,  1276,  2121,  2134,
    3503,  1273, -2748,  3272,  3960,  2135,  2161,  2179,  2181,  2589,
    2736,  2189,  1277,  2182,  2131,  2200,  1674,  2206,  3513,  3552,
    3273,  2212,  3641,  2214,  4350,  2215,  4472,  2216,  2247,  2238,
    2239,   128,  2278,  1774,  1674,  2240,  2263,  1504,  2245,  2246,
    2267,  2249,  2255,   522,  1093,  1094,  3595,  2260,  2295,  2330,
    3956,  2264,  2268,   527,  2907,  2286,  2287,  3957,  2296, -1596,
    2326,  1169,  2096, -1277,  2291,  2292,  2307,  2308,  2309,  2336,
     586,  1435,  1285,  2346,  2366,   270, -1420,   272,  1675,  1221,
    1225,  2381, -1596,  2593,  2401,   934,   935,  2410,   937,  4056,
     939,  2594, -1596,  4044,  2861,  1450,  1675,  3958, -2748,  1602,
    1270,  2416,  2419,  2422,  2443,   940,  2595,  2977,  2449,  2444,
    2450,  2474,  2883,  3629,  2737,  2451,  3631,   270,   641,   272,
    3553,  2472,  1273,  3554, -1596,  1676,  2492,   641,   523,  1275,
    1276,  2906,  2466,  2827,  3274,  -667,  2479,  2473,  2490,  2555,
     957,   957,  1253,  1254,  1278,  1279,  1280,  1281,  1282,  1283,
    1284,  1285,  3275,  2480,  1275,  1276,  1505,  2477,  2478,  2494,
    1775,  2495,  4594,  4221,  2597,  3670,  -881,  -667,  2499,  2481,
    3959,  4222,  2509,  4508,  4170, -1596,  2555,  2978,  3070,  2508,
    2523,  2522,  2598,  2526,  2527,  2529,  2535,  3402,  2536,  4448,
    3070,  2533,  2537,  1506,  2538,  1677,  2540,  2539,  4223, -1596,
     641,  3555,  2639,  2643,  3402,  3208,  3070,  3070,  2647,  4458,
    4620,  2648,  3276,  2645,   524,  2649,  2650,  2651,  2652,  2653,
    3070,  3402,  2654,  3647,  2550,  2655,  2656,  1450,  2657,  2658,
    3277,  2550,  3402,  2659,  3433,  3402,  2660,  2602,  2661,  2603,
    2662,  2663,  2664,  2665, -1891, -1596,  2668,  2605,  1691,  1692,
    1693,  1694,  1695,  2666,  4232,  2667,  2979,  2677,  2699,  3705,
    2738,  2711,   631,  2712,  2713,   527,  2729,  3761,   934,   935,
     936,   937,   938,   939,  1678,  1275,  1276,  3960,  3688,  1280,
    1281,  1282,  1283,  1284,  1285,  2716,  2551,  3694,   940,  3091,
    2720,  2724,  2752,  2551,  2753,  1273,  4685,  2550,  4687,  2764,
    3450, -1596,  2754,  1279,  1280,  1281,  1282,  1283,  1284,  1285,
    3070,  2354,  2824, -1596, -1596,  2552,  2765,  4762,  4224,  2611,
    4620,  2834,  2552,  2839,  2777,  2840,  1774,  3881,  2799,  2739,
    4771,  4705,   641,  2806, -1596,  4762, -1596,  2814,  3556,  1774,
    4771,  2835,  3706,  2823,  1774,  4625,  4626,  -667,  4628,  1774,
    1696,  1697,  1698,  1699,  2841,  2842,  3764,  2843,  2740,  2551,
   -1596, -1596,  2850,  2844, -1596, -1596,  2853,  3557,  4736,  4737,
    2855,  2857,  2856,  2864,  2865,  2612,  2613,  2614,  1910,  2869,
    2887,  2888,  2615,  3791,  2873,  2553,  2891,  2892,  2552,   962,
    2893,  2550,  2553,  2513,  3452,  2458,  2457,   525,  2616,  4225,
    1963,   963,  2617,  2550,  2911,  2912,  3454,  4671,  1964,  4672,
    4673,  3870,   900,   964,  2937,  1775,  2922,  4226,   526,   542,
    2952,  2618,  2953,  1278,  1279,  1280,  1281,  1282,  1283,  1284,
    1285,  2954,   641,  2940,  4232,  2973,  2969,   965,   946,  2620,
    4227,   527,  2992,  2974,  3014,   966,  3005,  3010,  1275,  1276,
     967,  4438,  3015,  2551,  3011,  1674,  3017,  1700,  2553,  1701,
    1702,  1703,  3018,  3024,  2554,  2551,  3027,  3026,  1704,  3028,
    3035,  2554,  2980,  3036,  3042,  3077,   968,   543,   969,  3402,
     970,   528,  2552,  3070,  -576,  2513,  3081,   529,  3121,   694,
    1679,  1775,   971,  3041,  2552,  3402,  4733,   631,  4748,  3153,
    1450,  3086,  3092,  3047,  3048,   544,   896,  3058,  3122,  1255,
    3126,  3131,  1256,    14,    15,  2604,  3163,  1675,  3172,  2207,
    2574,  2070,  2575,   530,  3252,  3130,  3177,  3183,  2513,  3185,
    2514,   531,  3186,  3187,  3194,  2071,  3195,  2554,  3246, -1891,
     972,  3283,   545,  3236,  4440,   973,  2977,  2515,   974,  1705,
    3247,  3263,  2553,  3250,  -815,  -815,  3254,  2577,  3284,  2516,
    3259,  3262,  3982,  3296,  2553,  3987,  -815,  3289,  3291,  3299,
    1387,  3641,  3300,  4083,  3303,   975,  2580,   976,  4435,  3306,
     721,  3313,  3316,  3511,  2581,   977,  3324,   978,  3336,  3335,
     546,  3319,  4009,  4009,  4009,  2012,  1278,  1279,  1280,  1281,
    1282,  1283,  1284,  1285,  3340,   641,  1706,  1707,  3341,  3344,
    3352,  2583,  3353,   979,   980,   981,  2978,   994,  3359,  3363,
    3366,  3473,  2514,  3478,  3409,  1562,  3411,  3481,  2584,  3484,
    4774,  2554,  3485,  4228,  3489,   725,   982,  3494,  3499,  2515,
    2517,  2470,   726,  2554,  3495,  3506,  3507,  3512,  3514,  3993,
    3515,  2516,  3516,  2061,  1411,  3543,  3565,  2589,   983,  3562,
    3566,  3573,  4048,  3885,  1412,  2514,  3574,  3586,  4056,  2313,
    3241,   730,   731,  3599,  3600,  3609,   641,  3611,  3614,  1413,
    2555,  3621,  2515,  2435,  3634,  3642,  2886,  2555,   984,  3654,
    3655,  1414,  1415,  1416,  2516,  2979,  4009,  3672,  3666,  3673,
    2637,  3070,  2072,  4093,  3763,  3765,  3772,   631,  3693,  3671,
    1417,  3704,  2390,  3787,  3796,  4098,   -67,  3778,  3801,  3685,
    3697,   547,  3773,   270,  3808,   272,  3812,  3815,  3818,  3820,
    3703,  2593,  2517,  3831,  3788,  2391,  3789,  3792,  3798,  2594,
    3799,   739,  3832,  3800,  3833,  1450,   641,  4438,  2392,  1708,
    3804,  3805,  3806,  2555,  2595,   985,  2518,  3849,  3848,  3858,
    2393,  3865,  3807,  1257,  1709,  1710,  3822,  3823,  2701,  3842,
    3824,  3827,  4136,   548,  3841,  2517,  3866,  3863,  2073,  3868,
    3339,   986,  3875,  3877,  3878,  3882,  3883,  4091, -1506, -1511,
    4178,   631,   987,   988,   549,  3892,   989,   990,  3889,  3902,
    1093,  1094,  3905,  2074,   750,  3906,  3913,  3994,  3921,  3928,
    3978,  2394,  2597,  2395,  3995,  4118,  3971,   991,  4017,   754,
     755,  2570,  4021,  3814,  4117,  4232,  2519,  2571,  4022,  2572,
    2598,  2573,  4027,  4023,  4029,  4030,  4042,   631,  4031,  4043,
    2396,  4049,  2574,  4061,  2575,  4099,  4063,  2555,  2518,  4078,
     641,  4667,  4079,  4081,  3968,  4121,  4122,   550,  4082,  2555,
    4107,  4745,  4096,   551,  4111,   992,  2075,  4113,  4123,  4125,
    4124,  4179,  4009,  4009,  2576,  4009,  4009,  4127,   993,  2577,
    2578,  4128,   552,  4137,  4171,  2602,  2579,  2603,  4745,  4193,
    4182,  2518,  4190,   845,  4194,  2605,  4195,  4197,  2580,  4198,
    1691,  1692,  1693,  1694,  1695,  2397,  2581,   553,  4202, -2492,
    4201,  2980,  4204,   994,  4212,  4215,  2582,  4213,  2519,  4244,
    4263,  4246,  4269,  4283,   554,  4277,  -352,  4275,  1418,  4667,
    4278,   995,   996,  2583,  4289,  4285,  4279,  4303,  4306,  4296,
    4521,  4305,  4317,  4321,  4332,  1419,  4342,  1562,  4345,  4357,
    2584,  4360,  4361,  4366,  4369,  4521,  4371,  4373,  2585,  2586,
    2398,  2519,  2076,  4378,  4388,  2587,   825,  2611,  4310,  4314,
    4532,  4401,  -370,  2588,  4404,  4430,  4431,  -958,  4432,  2589,
     997,  4450,  4009,   846,  4451,  4457,  4460,  4462,  4486,  4474,
    2590, -2492,  3468,  4510,  4511,  4518,  4517,  4522,  4528,   998,
    4282,  4776,  1696,  1697,  1698,  1699,  1775,  4529,  4531,  2591,
    4534,  4565,  4048,   776,  4566,   848,  4567,  4084,  4551,  4568,
    4085,  4574,  4575,  2612,  2613,  2614,  4576,  4582,  4585,   849,
    2615,   782,  4586,  4577,  4595,  4590,   784,  4597,  2886,   785,
    2886,  4599,  4600, -2452,  4609,   270,  2616,   272,  4603,  2596,
    2617,  2592,  1881,  2593,  4473,  2571,  1882,  4624,  4627,  4389,
    4629,  2594,  4630,  4634,  4635,  4645,  4659,  1883,  4658,  2618,
    4664,  4661, -1680,  4674,  4679,  4682,  2595,  1420,  4688,  4683,
    4693,  4684,  4689,  4696,  4704,  4699,  4405,  2620,  4702,   853,
    4708,  4710,  4701,  4713,  4714,  4716,  4086,  4087,  4720,  4724,
    2596,  4726,  4749,  4734,  4750,  4754,  2832,  4773,  3115,  1700,
    4763,  1701,  1702,  1703,  4298,  3991,  2986,   854,   825,  1513,
    1704,  4441,  1119,   825,   855,  4521,  3777,  3998,  4318,  4610,
    3996,  4000,  4611,  4177,  2597,  4657,  4765,  1421,  4728,  1574,
     599,  1007,  2446,  2374,  3279,  2702,  4148,  4149,  4151,  4152,
    4154,  4738,  2598,  4155,  4156,  1422,  2599,  4157,  4642,   641,
     825,  4158,  4159,  4515,   856,  4479,  2830,  4643,  4162,  4163,
    4608,  4164,  2112,  4527,  2357,  4526,  3062,   825,  4320,  2621,
    3699,  1617,  4184,  3302,  2868,  1913,  3613,  4355,  4214,  4461,
    3871,  4695,  4623,  4698,  4444,  2600,  4666,   694,  2164,   681,
    2601,  1705,  4368,  4004,  3060,  3463,  3504,  2602,  3795,  2603,
    3067,  3470,  4090,  4092,  2604,  3559,  4521,  2605,  4521,  4680,
    3936,   825,   825,   825,   825,  4715,  4271,  3977,  4314,  4466,
    4467,  4398,  4126,   825,  4550,  4116,  4521,  2971,  3238,  3589,
    3587,  3591,  4544,  4495,   538,   539,  2710,  4579,  2606,  4622,
    4580,  1775,  4447,  4455,  4453,  4331,  3676,  3159,  1706,  1707,
    4274,  3462,  2607,  2608,  2609,  2610,  1312,  4521,  4521,  1537,
    3064,   641,  4753,  2046,  2944,  4095,  2642,  2870,  1582,  4530,
    3908,  4083,  2427,  2126,  2851,  3293,  2162,  3610,   721,  2611,
    2894,  2805,  4169,  1440,  1033,  3598,  2456,  1884,  2745,  1313,
    4397,  3261,  2743,  3651,  2964,  1729,  2804,  2958,  4250,  4632,
    3774,  4380,  1672,  4633,  3349,  3916,  2062,   859,  2821,  4543,
    4065,   825,  4058,  3457,  4719,  1885,  2901,  2714,  1896,  1554,
    1555,  2849,  1928,  1886,  2876,  3873,  3625,  1556,  3660,  4558,
    4559,  3624,  4548,   725,  1557,  2612,  2613,  2614,  1021,  1137,
     726,  2205,  2615,  2501,   641,  1002,  2004,  2502,  2941,  3920,
    1005,  2368,  1312,   862,  3612,  4697,  1934,  4569,  2616,  1314,
    3091,  3091,  2617,  4717,  4631,  4772,   863,  1887,  4775,   730,
     731,  1952,  4120,  3628,  2920,  3644,   959,  2329,  3645,   960,
    4647,  2618,  2918,  2484,  1315,  1313,  2619,  4655,  1316,  2917,
    2910,  1708,  2415,  1301,  1944,  1889,  1426,   927,  4203,  2620,
    2889,  2188,  3280,  4211,   929,  1432,  1709,  1710,   675,   676,
    1123,  1124,     0,     0,  1125,     0,  1888,     0,     0,     0,
       0,     0,     0,  1317,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4766,   739,
       0,     0,     0,     0,  1318,     0,     0,   866,     0,  1145,
       0,     0,     0,     0,     0,  1314,     0,     0,     0,  1319,
       0,     0,     0,  -958,     0,     0,     0,     0,  4706,   867,
       0,   868,     0,  4711,     0,     0,     0,     0,     0,     0,
    1315,     0,     0,     0,  1316,     0,  1182,     0,     0,     0,
       0,     0,     0,     0,     0,   825,     0,  4678,     0,     0,
       0,     0,   750,  1200,     0,     0,     0,  1320,     0,  4746,
       0,     0,     0,     0,     0,     0,     0,   754,   755,  1317,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1321,     0,  1775,     0,  4746,     0,     0,     0,
    1318,     0,     0,   641,     0,     0,     0,  1775,     0,     0,
    1247,     0,  1775,   825,   825,  1319,     0,  1775,     0,     0,
       0,     0,   825,   825,   825,   825,   825,   825,   825,   825,
     825,   825,   825,   825,     0,     0,     0,     0,     0,     0,
       0,     0,   825,   825,     0,   825,   825,     0,     0,     0,
     825,     0,     0,   825,   825,   825,   825,     0,   825,   825,
     825,     0,     0,  1320,     0,     0,     0,   825,   825,     0,
     825,   825,   825,   825,   825,     0,     0,   825,   825,   825,
     825,   825,   825,   825,   825,   825,   825,   825,  1321,   825,
       0,     0,   825,   825,     0,     0,  1322,   825,     0,     0,
       0,   825,   825,   825,     0,  1323,     0,  1386,     0,     0,
       0,     0,     0,     0,     0,     0,   825,   825,   825,     0,
    1324,     0,     0,     0,     0,   825,     0,     0,     0,     0,
       0,     0,   825,   825,   825,     0,   825,     0,  1325,     0,
       0,     0,     0,   825,   825,   825,     0,   825,   825,   825,
     825,   825,     0,   825,   825,   825,   825,   825,   825,   825,
     825,     0,     0,     0,   825,   825,     0,     0,     0,     0,
       0,   776,     0,     0,     0,  4084,     0,     0,  4085,     0,
       0,     0,  1326,     0,     0,  1327,     0,     0,     0,   782,
       0,     0,  1322,     0,   784,     0,     0,   785,     0,     0,
       0,  1323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1328,     0,     0,  1324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   516,     0,  1325,  1329,   517,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   825,     0,     0,  4086,  4087,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1326,     0,
       0,  1327,     0,     0,  1330,     0,     0,     0,     0,     0,
       0,  1598,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1328,
       0,     0,     0,     0,   825,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   825,     0,     0,     0,     0,     0,
       0,  1329,     0,     0,     0,     0,     0,     0,     0,     0,
     825,     0,     0,     0,   825,     0,     0,     0,     0,  1645,
    1646,     0,     0,     0,     0,     0,     0,     0,  1656,  1657,
       0,     0,  1660,  1661,  1662,  1663,  1666,  1667,  1668,  1669,
       0,     0,     0,     0,     0,     0,     0,     0,  1685,  1686,
    1330,  1687,  1688,     0,     0,     0,     0,     0,     0,  1721,
    1722,  1723,  1724,     0,     0,  1727,     0,     0,     0,   825,
       0,     0,     0,  1735,  1736,     0,  1739,  1740,     0,     0,
       0,     0,     0,  1744,  1745,  1746,     0,     0,  1749,  1750,
    1751,  1752,  1753,  1754,     0,  1756,     0,     0,  1759,  1760,
       0,     0,     0,  1763,     0,     0,     0,  1766,  1770,  1771,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1778,  1779,  1780,     0,     0,     0,     0,     0,
       0,  1788,     0,     0,     0,     0,     0,     0,  1793,  1794,
    1795,     0,     0,     0,     0,     0,     0,     1,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2136,     0,     0,     0,     0,     0,     3,     0,     0,     0,
       4,  1831,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     5,     6,     0,     0,     0,     0,
       0,     0,     7,     0,     0,     0,     0,     8,     9,   825,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    10,     0,
    2137,     0,  2138,  2139,  2140,  2141,  2142,     0,  2143,  2144,
    2145,  2146,  2147,  2148,  2149,  2150,  2151,    11,  2152,  2153,
    2154,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1900,     0,     0,
       0,    12,     0,     0,     0,     0,     0,     0,     0,    13,
      14,    15,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    16,    17,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    18,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      19,     0,   825,   825,   825,     0,     0,     0,     0,     0,
    1951,     0,     0,     0,     0,     0,    20,   825,     0,     0,
    1957,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    21,     0,    22,     0,     0,  1985,     0,    23,     0,
    1991,     0,    24,   825,     0,     0,     0,     0,     0,   825,
       0,     0,   825,     0,   825,     0,     0,  2155,  2156,     0,
     825,     0,   825,   825,     0,     0,     0,     0,    25,     0,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,     0,  2036,     0,     0,     0,     0,
       0,     0,     0,     0,    28,     0,     0,     0,    29,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2574,     0,  2575,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   825,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -815,  -815,     0,  2577,
       0,     0,     0,     0,     0,     0,     0,     0,  -815,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2580,     0,
       0,     0,     0,     0,     0,     0,  2581,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,   825,     0,
       0,     0,     0,     0,     0,     0,     0,   825,     0,     0,
      31,     0,    32,  2583,     0,  2217,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    33,     0,  1562,     0,     0,
    2584,     0,     0,     0,     0,     0,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,  2589,
       0,    36,     0,    37,     0,     0,    38,     0,     0,    39,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,    42,     0,     0,     0,     0,     0,     0,
       0,    43,     0,     0,     0,     0,     0,    44,     0,     0,
       0,     0,     0,     0,     0,    45,     0,     0,     0,     0,
      46,    47,    48,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   270,     0,   272,  2299,  2301,
    2303,     0,     0,  2593,     0,     0,     0,     0,  2636,     0,
       0,  2594,    49,     0,     0,     0,     0,     0,     0,    50,
       0,     0,     0,     0,     0,     0,  2595,     0,     0,     0,
     825,     0,     0,     0,     0,     0,     0,     0,     0,  2338,
       0,     0,     0,     0,     0,     0,     0,     0,  2343,     0,
    2344,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    51,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    52,     0,     0,     0,
      53,     0,     0,    54,  2597,     0,     0,     0,     0,    55,
    2636,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2598,     0,   825,     0,     0,     0,   825,     0,
       0,     0,     0,   825,   825,     0,     0,     0,     0,    56,
       0,     0,   825,     0,   825,    57,   825,   825,   825,   825,
       0,     0,   825,     0,     0,    58,     0,     0,     0,     0,
       0,     0,   825,     0,   825,   825,     0,   825,   825,   825,
     825,  2423,   825,     0,     0,   825,     0,  2602,     0,  2603,
       0,     0,     0,     0,   825,     0,     0,  2605,     0,     0,
       0,   825,     0,   825,     0,   825,   825,     0,   825,   825,
       0,     0,     0,   825,   825,   825,     0,     0,     0,   825,
     825,   825,     0,   825,     0,   825,     0,   825,     0,   825,
       0,   825,     0,     0,  2483,     0,   825,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,     0,     2,     0,     0,   825,     0,     0,     0,     0,
       0,     0,   825,     0,     0,   825,     0,     0,     0,  2611,
       0,   825,     0,     4,   825,     0,     0,     0,   825,     0,
       0,     0,     0,     0,     0,     0,     0,     5,     6,     0,
       0,     0,     0,     0,     0,     7,     0,     0,     0,     0,
       8,     9,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    10,     0,     0,     0,  2612,  2613,  2614,     0,     0,
       0,     0,  2615,     0,     0,     0,     0,     0,     0,     0,
      11,     0,   825,     0,     0,     0,     0,     0,  2616,     0,
       0,     0,  2617,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    12,     0,     0,     0,     0,     0,
       0,  2618,    13,    14,    15,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    16,    17,     0,     0,  2620,
       0,     0,     0,     0,     0,     0,  2646,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   825,     0,    19,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    20,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    21,     0,    22,     0,     0,     0,
       0,    23,     0,     0,     0,    24,     0,     0,     0,     0,
       0,     0,     0,  2574,     0,  2575,     0,     0,  2984,     0,
    2723,     0,     0,     0,  2725,     0,     0,     0,     0,  2727,
    2728,    25,     0,    26,     0,     0,  2984,  2984,  1663,     0,
    2744,     0,  1663,     0,  2747,  2748,     0,     0,     0,    27,
    2577,     0,     0,     0,     0,     0,     0,     0,  2755,     0,
    2756,     0,     0,  2758,  2759,  2760,  2761,    28,  2762,  2580,
       0,    29,     0,     0,     0,     0,     0,  2581,     0,     0,
    2766,     0,     0,     0,     0,     0,     0,  2767,     0,  2768,
       0,  2769,  2770,     0,  2771,     0,     0,     0,  2636,  2774,
    2775,  2776,     0,     0,  2583,  2778,  2779,  2780,     0,  2781,
       0,  2783,     0,  2785,     0,  2787,     0,  2788,  1562,     0,
       0,  2584,  2789,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2809,     0,     0,     0,     0,  2984,  2984,     0,     0,
    2589,     0,     0,     0,     0,     0,     0,  2819,     0,     0,
    2822,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2636,    31,     0,    32,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   825,    33,     0,
       0,   825,     0,     0,     0,     0,     0,     0,     0,    34,
       0,     0,     0,     0,     0,     0,   270,     0,   272,     0,
       0,     0,     0,     0,  2593,     0,     0,     0,   825,   825,
       0,    35,  2594,     0,    36,     0,    37,     0,     0,    38,
       0,     0,    39,    40,     0,     0,     0,  2595,   825,     0,
       0,     0,     0,    41,     0,     0,    42,   825,     0,   825,
       0,   825,     0,     0,    43,     0,     0,     0,     0,     0,
      44,     0,     0,     0,     0,     0,     0,     0,    45,     0,
       0,     0,     0,    46,    47,    48,     0,     0,   825,     0,
       0,     0,     0,   825,     0,     0,     0,  1985,     0,     0,
    3707,  3708,     0,     0,     0,  2597,  3709,     0,  3710,     0,
    3711,  3712,     0,     0,     0,    49,     0,     0,     0,     0,
       0,   825,    50,  2598,     0,     0,     0,  3546,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    51,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2602,    52,
    2603,     0,     0,    53,  3713,     0,    54,  3714,  2605,     0,
       0,     0,    55,     0,   825,  3715,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3716,     0,     0,     0,     0,     0,     0,
       0,     0,    56,     0,     0,     0,     0,     0,    57,     0,
    3717,     0,     0,     0,     0,     0,     0,     0,    58,     0,
       0,     0,     0,     0,     0,   825,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3718,     0,  3719,     0,     0,
    2611,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3720,  3721,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3722,  2612,  2613,  2614,     0,
       0,     0,     0,  2615,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3168,     0,     0,  2636,  3170,     0,  2616,
       0,     0,     0,  2617,  3723,     0,     0,     0,     0,   825,
     825,     0,     0,  3724,  3725,     0,  3726,     0,     0,     0,
       0,     0,  2618,     0,  3197,  3198,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2620,     0,     0,     0,  3218,     0,     0,     0,     0,     0,
    3727,  3728,  3729,  3228,     0,  3230,     0,  3232,  2984,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3730,
    3731,  3732,     0,     0,     0,     0,  3733,     0,     0,  3734,
       0,     0,     0,     0,     0,     0,     0,     0,  2636,     0,
       0,     0,     0,  3460,     0,     0,  3735,  3736,     0,  2571,
       0,  2572,     0,     0,     0,     0,   825,     0,     0,     0,
       0,     0,     0,     0,  2574,     0,  2575,  3290,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3737,  3738,     0,     0,     0,     0,   825,   825,
       0,   825,     0,     0,     0,     0,  2576,     0,     0,     0,
     825,  2577,     0,     0,     0,   825,     0,  3739,   825,     0,
     825,   825,     0,     0,     0,     0,     0,     0,     0,     0,
    2580,     0,     0,     0,     0,     0,     0,     0,  2581,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2582,     0,
    1985,     0,     0,   825,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2583,     0,     0,     0,     0,
       0,     0,     0,  3740,     0,     0,     0,  3741,     0,  1562,
       0,     0,  2584,     0,   825,     0,     0,     0,     0,     0,
    2585,  3742,     0,     0,     0,     0,     0,  3461,     0,     0,
       0,  3371,     0,     0,     0,  2588,     0,   825,     0,     0,
       0,  2589,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2591,     0,     0,     0,     0,     0,     0,  3743,     0,
       0,  3744,     0,     0,  3745,  3746,  3747,  3748,     0,     0,
       0,     0,     0,   825,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   270,     0,   272,
       0,     0,     0,     0,     0,  2593,     0,     0,     0,     0,
       0,     0,     0,  2594,     0,     0,     0,     0,  3749,  3750,
       0,     0,     0,     0,     0,  3479,  3480,     0,  2595,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3751,     0,     0,     0,     0,
       0,     0,  2596,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2597,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2598,     0,     0,     0,  2599,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3529,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2601,     0,  3568,  3569,     0,     0,     0,  2602,
       0,  2603,     0,     0,     0,     0,  3576,     0,     0,  2605,
       0,  3578,     0,     0,  3579,     0,  3580,  3581,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2608,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   825,     0,     0,
    3606,  2611,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3606,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   825,     0,     0,     0,     0,     0,     0,
       0,   825,     0,     0,     0,     0,   825,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2612,  2613,  2614,
       0,     0,     0,     0,  2615,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3606,
    2616,     0,     0,     0,  2617,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2618,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2620,     0,     0,     0,     0,     0,     0,  3967,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2636,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     825,     0,     0,     0,   825,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   825,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   825,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3606,     0,     0,     0,     0,  3967,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4166,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3891,
       0,     0,     0,     0,     0,     0,     0,  3371,     0,     0,
       0,     0,  3899,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   825,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   825,
       0,     0,     0,     0,     0,   825,     0,   825,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   825,     0,     0,     0,     0,     0,  4166,  4166,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3371,     0,     0,     0,
    4020,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4330,     0,     0,     0,  4330,  4330,     0,     0,
       0,     0,     0,   825,  3606,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3371,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     825,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     825,     0,   825,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   825,     0,  4166,  4166,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4330,     0,     0,     0,     0,     0,     0,     0,     0,
    4330,     0,     0,     0,  4330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4330,
       0,     0,     0,     0,     0,  4238,     0,     0,     0,     0,
       0,  4243,     0,  4245,     0,     0,     0,     0,     0,     0,
       0,     0,   825,     0,  4166,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4166,
     825,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4166,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4545,     0,     0,     0,
       0,     0,     0,   825,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4284,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4330,     0,  4330,  4330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   825,  4166,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4166,  4166,     0,     0,     0,     0,     0,     0,  3371,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   825,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3371,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4166,
       0,     0,     0,     0,     0,     0,   825,     0,     0,  4166,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4399,     0,  4400,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4408,     0,
       0,     0,     0,     0,     0,     0,   825,     0,     0,     0,
       0,     0,     0,  4166,     0,  4166,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4166,     0,     0,     0,   825,
       0,     0,   825,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4166,     0,
    4166,     0,  4166,     0,     0,     0,     0,     0,     0,  4166,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4166,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4166,  4166,     0,     0,     0,
       0,   825,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4166,  4166,     0,     0,     0,  4166,     0,  4519,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4524,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   825,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3606,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4593,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4649,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4681,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   141,
       0,   142,   690,   144,   145,   146,   147,     0,  4700,   148,
       0,     0,     0,   149,     0,     0,   691,     0,   151,   152,
     153,   154,   155,   156,   692,   158,     0,   159,     0,     0,
     693,   160,   694,   695,   696,   161,   697,     0,   162,   163,
     164,  1767,   165,     0,   166,   167,     0,     0,   168,   698,
     699,   169,   170,     0,   171,   700,   701,   173,   174,     0,
     175,   176,   177,   178,   179,   702,   181,  4747,   703,   183,
     704,   705,   706,   707,   708,     0,   189,   190,   191,   192,
     193,   194,   195,   196,     0,   197,   198,     0,   199,   200,
     201,   709,   203,     0,   204,   710,   711,   205,     0,     0,
     206,   712,   207,   713,   714,   208,     0,   209,   715,   716,
       0,   210,   211,   212,   717,   718,   719,  3606,     0,     0,
       0,   720,   215,   721,     0,     0,   722,   216,     0,   217,
       0,     0,     0,   218,     0,   219,   220,   221,   222,   223,
       0,     0,     0,   224,     0,     0,   225,   226,   227,     0,
       0,     0,   228,     0,   229,   230,     0,   231,   232,   233,
       0,     0,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   723,     0,   243,   244,   245,   724,   725,   246,
     247,     0,   248,   249,   250,   726,     0,   251,     0,     0,
       0,   252,     0,   253,     0,   254,     0,   255,   256,   727,
     258,   728,     0,   260,     0,   261,     0,   729,     0,   262,
     263,   264,     0,   265,   730,   731,     0,   266,   267,     0,
       0,     0,   732,   269,   270,   271,   272,   733,     0,   273,
     274,   275,     0,   276,     0,   277,     0,     0,     0,   734,
     278,   279,   735,     0,     0,   280,     0,   281,   282,     0,
     283,   284,     0,     0,     0,   285,     0,     0,   286,   287,
     736,     0,  1768,   289,     0,   737,   290,   291,     0,     0,
       0,     0,     0,   738,   293,     0,   294,     0,   295,     0,
     296,   297,     0,     0,   739,     0,     0,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,   314,   315,   316,   317,
     740,   318,   319,   320,   321,   741,   322,   323,     0,     0,
       0,     0,   324,   325,   326,   327,   742,   329,     0,     0,
     743,   331,   744,   332,     0,   333,   745,   746,   747,   748,
     749,   338,   339,   340,   341,   342,     0,   750,   343,   344,
       0,     0,   345,   346,   347,   348,   751,   752,   753,   349,
     350,     0,   754,   755,   351,     0,   352,   353,   756,     0,
     355,   356,   357,   358,     0,   359,   360,     0,     0,     0,
       0,     0,     0,     0,     0,   361,   362,   363,     0,   757,
     364,     0,   365,     0,   366,   367,   758,   369,   370,   371,
     372,   759,   760,   375,   761,     0,   376,   377,   378,     0,
     379,     0,   380,   381,   382,   383,   384,     0,   762,   386,
     387,     0,     0,   388,     0,     0,     0,   389,   390,   391,
     392,   393,     0,     0,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   401,   402,   403,   763,   764,   404,     0,
     405,     0,   406,   407,     0,   408,   409,     0,   410,     0,
     765,     0,   766,   412,   413,   414,   415,   416,   417,   767,
     768,   420,   421,   422,   423,     0,   769,   425,     0,     0,
       0,   426,   427,   428,   429,     0,     0,     0,   430,     0,
       0,     0,   431,     0,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,     0,     0,     0,
       0,     0,     0,   444,   445,     0,   446,     0,     0,   447,
       0,     0,   448,   449,     0,     0,     0,   450,   770,   771,
     451,   452,     0,   453,   454,   772,   456,   457,   458,   773,
     774,   459,   460,   461,   462,   775,   463,   464,     0,   465,
       0,   466,   467,   468,   469,     0,   776,   470,   471,     0,
     777,   778,   779,   780,     0,     0,     0,     0,  1769,   476,
     477,   478,     0,   781,   782,   783,   480,   481,   482,   784,
     483,   484,   785,   485,   486,     0,   487,   488,     0,     0,
     489,     0,     0,   490,     0,   491,     0,   786,   493,   494,
       0,     0,   787,   788,   789,   790,   495,     0,     0,   496,
     791,     0,   792,   497,   498,   499,   500,   501,   793,   794,
       0,     0,     0,     0,     0,     0,   504,   505,     0,   506,
     507,   508,     0,     0,   795,     0,     0,     0,     0,   796,
     797,     0,     0,     0,     0,   798,   799,     0,     0,   800,
     801,     0,     0,   802,   803,   141,     0,   142,   690,   144,
     145,   146,   147,  1981,     0,   148,     0,     0,     0,   149,
       0,     0,   691,     0,   151,   152,   153,   154,   155,   156,
     692,   158,     0,   159,     0,     0,  1982,   160,   694,   695,
     696,   161,   697,     0,   162,   163,   164,     0,   165,     0,
     166,   167,     0,     0,   168,   698,   699,   169,   170,     0,
     171,   700,   701,   173,   174,     0,   175,   176,   177,   178,
     179,   702,   181,     0,   703,   183,   704,   705,   706,   707,
     708,     0,   189,   190,   191,   192,   193,   194,   195,   196,
       0,   197,   198,     0,   199,   200,   201,   709,   203,     0,
     204,   710,   711,   205,     0,     0,   206,   712,   207,   713,
     714,   208,     0,   209,   715,   716,     0,   210,   211,   212,
     717,   718,   719,     0,     0,     0,     0,   720,   215,   721,
       0,     0,  1983,   216,     0,   217,     0,     0,     0,   218,
       0,   219,   220,   221,   222,   223,     0,     0,     0,   224,
       0,     0,   225,   226,   227,     0,     0,     0,   228,     0,
     229,   230,     0,   231,   232,   233,     0,     0,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   723,     0,
     243,   244,   245,   724,   725,   246,   247,     0,   248,   249,
     250,   726,     0,   251,     0,     0,     0,   252,     0,   253,
       0,   254,     0,   255,   256,   727,   258,   728,     0,   260,
       0,   261,     0,   729,     0,   262,   263,   264,     0,   265,
     730,   731,     0,   266,   267,     0,     0,     0,   732,   269,
     270,   271,   272,   733,     0,   273,   274,   275,     0,   276,
       0,   277,     0,     0,     0,   734,   278,   279,   735,     0,
       0,   280,     0,   281,   282,     0,   283,   284,     0,     0,
       0,   285,     0,     0,   286,   287,   736,     0,     0,   289,
       0,   737,   290,   291,     0,     0,     0,     0,     0,   738,
     293,     0,   294,     0,   295,     0,   296,   297,     0,     0,
     739,     0,     0,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,   314,   315,   316,   317,   740,   318,   319,   320,
     321,   741,   322,   323,     0,     0,     0,     0,   324,   325,
     326,   327,   742,   329,     0,     0,   743,   331,   744,   332,
       0,   333,   745,   746,   747,   748,   749,   338,   339,   340,
     341,   342,     0,   750,   343,   344,     0,     0,   345,   346,
     347,   348,   751,   752,   753,   349,   350,     0,   754,   755,
     351,     0,   352,   353,   756,  1984,   355,   356,   357,   358,
       0,   359,   360,     0,     0,     0,     0,     0,     0,     0,
       0,   361,   362,   363,     0,   757,   364,     0,   365,     0,
     366,   367,   758,   369,   370,   371,   372,   759,   760,   375,
     761,     0,   376,   377,   378,     0,   379,     0,   380,   381,
     382,   383,   384,     0,   762,   386,   387,     0,     0,   388,
       0,     0,     0,   389,   390,   391,   392,   393,     0,     0,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
     402,   403,   763,   764,   404,     0,   405,     0,   406,   407,
       0,   408,   409,     0,   410,     0,   765,     0,   766,   412,
     413,   414,   415,   416,   417,   767,   768,   420,   421,   422,
     423,     0,   769,   425,     0,     0,     0,   426,   427,   428,
     429,     0,     0,     0,   430,     0,     0,     0,   431,     0,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,     0,     0,     0,     0,     0,     0,   444,
     445,     0,   446,     0,     0,   447,     0,     0,   448,   449,
       0,     0,     0,   450,   770,   771,   451,   452,     0,   453,
     454,   772,   456,   457,   458,   773,   774,   459,   460,   461,
     462,   775,   463,   464,     0,   465,     0,   466,   467,   468,
     469,     0,   776,   470,   471,     0,   777,   778,   779,   780,
       0,     0,     0,     0,     0,   476,   477,   478,     0,   781,
     782,   783,   480,   481,   482,   784,   483,   484,   785,   485,
     486,     0,   487,   488,     0,     0,   489,     0,     0,   490,
       0,   491,     0,   786,   493,   494,     0,     0,   787,   788,
     789,   790,   495,     0,     0,   496,   791,     0,   792,   497,
     498,   499,   500,   501,   793,   794,     0,     0,     0,     0,
       0,     0,   504,   505,     0,   506,   507,   508,     0,     0,
     795,     0,     0,     0,     0,   796,   797,     0,     0,     0,
       0,   798,   799,     0,     0,   800,   801,     0,     0,   802,
     803,   141,     0,   142,   690,   144,   145,   146,   147,     0,
       0,   148,     0,     0,     0,   149,     0,     0,   691,     0,
     151,   152,   153,   154,   155,   156,   692,   158,     0,   159,
       0,     0,   693,   160,   694,   695,   696,   161,   697,     0,
     162,   163,   164,     0,   165,     0,   166,   167,     0,     0,
     168,   698,   699,   169,   170,     0,   171,   700,   701,   173,
     174,     0,   175,   176,   177,   178,   179,   702,   181,     0,
     703,   183,   704,   705,   706,   707,   708,     0,   189,   190,
     191,   192,   193,   194,   195,   196,     0,   197,   198,     0,
     199,   200,   201,   709,   203,     0,   204,   710,   711,   205,
       0,     0,   206,   712,   207,   713,   714,   208,     0,   209,
     715,   716,     0,   210,   211,   212,   717,   718,   719,     0,
       0,     0,     0,   720,   215,   721,     0,     0,   722,   216,
       0,   217,     0,     0,     0,   218,     0,   219,   220,   221,
     222,   223,     0,     0,     0,   224,     0,     0,   225,   226,
     227,     0,     0,     0,   228,     0,   229,   230,     0,   231,
     232,   233,     0,     0,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   723,     0,   243,   244,   245,   724,
     725,   246,   247,     0,   248,   249,   250,   726,     0,   251,
       0,     0,     0,   252,  2298,   253,     0,   254,     0,   255,
     256,   727,   258,   728,     0,   260,     0,   261,     0,   729,
       0,   262,   263,   264,     0,   265,   730,   731,     0,   266,
     267,     0,     0,     0,   732,   269,   270,   271,   272,   733,
       0,   273,   274,   275,     0,   276,     0,   277,     0,     0,
       0,   734,   278,   279,   735,     0,     0,   280,     0,   281,
     282,     0,   283,   284,     0,     0,     0,   285,     0,     0,
     286,   287,   736,     0,     0,   289,     0,   737,   290,   291,
       0,     0,     0,     0,     0,   738,   293,     0,   294,     0,
     295,     0,   296,   297,     0,     0,   739,     0,     0,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,   314,   315,
     316,   317,   740,   318,   319,   320,   321,   741,   322,   323,
       0,     0,     0,     0,   324,   325,   326,   327,   742,   329,
       0,     0,   743,   331,   744,   332,     0,   333,   745,   746,
     747,   748,   749,   338,   339,   340,   341,   342,     0,   750,
     343,   344,     0,     0,   345,   346,   347,   348,   751,   752,
     753,   349,   350,     0,   754,   755,   351,     0,   352,   353,
     756,     0,   355,   356,   357,   358,     0,   359,   360,     0,
       0,     0,     0,     0,     0,     0,     0,   361,   362,   363,
       0,   757,   364,     0,   365,     0,   366,   367,   758,   369,
     370,   371,   372,   759,   760,   375,   761,     0,   376,   377,
     378,     0,   379,     0,   380,   381,   382,   383,   384,     0,
     762,   386,   387,     0,     0,   388,     0,     0,     0,   389,
     390,   391,   392,   393,     0,     0,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   401,   402,   403,   763,   764,
     404,     0,   405,     0,   406,   407,     0,   408,   409,     0,
     410,     0,   765,     0,   766,   412,   413,   414,   415,   416,
     417,   767,   768,   420,   421,   422,   423,     0,   769,   425,
       0,     0,     0,   426,   427,   428,   429,     0,     0,     0,
     430,     0,     0,     0,   431,     0,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,     0,
       0,     0,     0,     0,     0,   444,   445,     0,   446,     0,
       0,   447,     0,     0,   448,   449,     0,     0,     0,   450,
     770,   771,   451,   452,     0,   453,   454,   772,   456,   457,
     458,   773,   774,   459,   460,   461,   462,   775,   463,   464,
       0,   465,     0,   466,   467,   468,   469,     0,   776,   470,
     471,     0,   777,   778,   779,   780,     0,     0,     0,     0,
       0,   476,   477,   478,     0,   781,   782,   783,   480,   481,
     482,   784,   483,   484,   785,   485,   486,     0,   487,   488,
       0,     0,   489,     0,     0,   490,     0,   491,     0,   786,
     493,   494,     0,     0,   787,   788,   789,   790,   495,     0,
       0,   496,   791,     0,   792,   497,   498,   499,   500,   501,
     793,   794,     0,     0,     0,     0,     0,     0,   504,   505,
       0,   506,   507,   508,     0,     0,   795,     0,     0,     0,
       0,   796,   797,     0,     0,     0,     0,   798,   799,     0,
       0,   800,   801,     0,     0,   802,   803,   141,     0,   142,
     690,   144,   145,   146,   147,     0,     0,   148,     0,     0,
       0,   149,     0,     0,   691,     0,   151,   152,   153,   154,
     155,   156,   692,   158,     0,   159,     0,     0,   693,   160,
     694,   695,   696,   161,   697,     0,   162,   163,   164,     0,
     165,     0,   166,   167,     0,     0,   168,   698,   699,   169,
     170,     0,   171,   700,   701,   173,   174,     0,   175,   176,
     177,   178,   179,   702,   181,     0,   703,   183,   704,   705,
     706,   707,   708,     0,   189,   190,   191,   192,   193,   194,
     195,   196,     0,   197,   198,     0,   199,   200,   201,   709,
     203,     0,   204,   710,   711,   205,     0,     0,   206,   712,
     207,   713,   714,   208,     0,   209,   715,   716,     0,   210,
     211,   212,   717,   718,   719,     0,     0,     0,     0,   720,
     215,   721,     0,     0,   722,   216,     0,   217,     0,     0,
       0,   218,     0,   219,   220,   221,   222,   223,     0,     0,
       0,   224,     0,     0,   225,   226,   227,     0,     0,     0,
     228,     0,   229,   230,     0,   231,   232,   233,     0,     0,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     723,     0,   243,   244,   245,   724,   725,   246,   247,     0,
     248,   249,   250,   726,     0,   251,     0,     0,     0,   252,
    2300,   253,     0,   254,     0,   255,   256,   727,   258,   728,
       0,   260,     0,   261,     0,   729,     0,   262,   263,   264,
       0,   265,   730,   731,     0,   266,   267,     0,     0,     0,
     732,   269,   270,   271,   272,   733,     0,   273,   274,   275,
       0,   276,     0,   277,     0,     0,     0,   734,   278,   279,
     735,     0,     0,   280,     0,   281,   282,     0,   283,   284,
       0,     0,     0,   285,     0,     0,   286,   287,   736,     0,
       0,   289,     0,   737,   290,   291,     0,     0,     0,     0,
       0,   738,   293,     0,   294,     0,   295,     0,   296,   297,
       0,     0,   739,     0,     0,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,   314,   315,   316,   317,   740,   318,
     319,   320,   321,   741,   322,   323,     0,     0,     0,     0,
     324,   325,   326,   327,   742,   329,     0,     0,   743,   331,
     744,   332,     0,   333,   745,   746,   747,   748,   749,   338,
     339,   340,   341,   342,     0,   750,   343,   344,     0,     0,
     345,   346,   347,   348,   751,   752,   753,   349,   350,     0,
     754,   755,   351,     0,   352,   353,   756,     0,   355,   356,
     357,   358,     0,   359,   360,     0,     0,     0,     0,     0,
       0,     0,     0,   361,   362,   363,     0,   757,   364,     0,
     365,     0,   366,   367,   758,   369,   370,   371,   372,   759,
     760,   375,   761,     0,   376,   377,   378,     0,   379,     0,
     380,   381,   382,   383,   384,     0,   762,   386,   387,     0,
       0,   388,     0,     0,     0,   389,   390,   391,   392,   393,
       0,     0,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   401,   402,   403,   763,   764,   404,     0,   405,     0,
     406,   407,     0,   408,   409,     0,   410,     0,   765,     0,
     766,   412,   413,   414,   415,   416,   417,   767,   768,   420,
     421,   422,   423,     0,   769,   425,     0,     0,     0,   426,
     427,   428,   429,     0,     0,     0,   430,     0,     0,     0,
     431,     0,   432,   433,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,     0,     0,     0,     0,     0,
       0,   444,   445,     0,   446,     0,     0,   447,     0,     0,
     448,   449,     0,     0,     0,   450,   770,   771,   451,   452,
       0,   453,   454,   772,   456,   457,   458,   773,   774,   459,
     460,   461,   462,   775,   463,   464,     0,   465,     0,   466,
     467,   468,   469,     0,   776,   470,   471,     0,   777,   778,
     779,   780,     0,     0,     0,     0,     0,   476,   477,   478,
       0,   781,   782,   783,   480,   481,   482,   784,   483,   484,
     785,   485,   486,     0,   487,   488,     0,     0,   489,     0,
       0,   490,     0,   491,     0,   786,   493,   494,     0,     0,
     787,   788,   789,   790,   495,     0,     0,   496,   791,     0,
     792,   497,   498,   499,   500,   501,   793,   794,     0,     0,
       0,     0,     0,     0,   504,   505,     0,   506,   507,   508,
       0,     0,   795,     0,     0,     0,     0,   796,   797,     0,
       0,     0,     0,   798,   799,     0,     0,   800,   801,     0,
       0,   802,   803,   141,     0,   142,   690,   144,   145,   146,
     147,     0,     0,   148,     0,     0,     0,   149,     0,     0,
     691,     0,   151,   152,   153,   154,   155,   156,   692,   158,
       0,   159,     0,     0,   693,   160,   694,   695,   696,   161,
     697,     0,   162,   163,   164,     0,   165,     0,   166,   167,
       0,     0,   168,   698,   699,   169,   170,     0,   171,   700,
     701,   173,   174,     0,   175,   176,   177,   178,   179,   702,
     181,     0,   703,   183,   704,   705,   706,   707,   708,     0,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
     198,     0,   199,   200,   201,   709,   203,     0,   204,   710,
     711,   205,     0,     0,   206,   712,   207,   713,   714,   208,
       0,   209,   715,   716,     0,   210,   211,   212,   717,   718,
     719,     0,     0,     0,     0,   720,   215,   721,     0,     0,
     722,   216,     0,   217,     0,     0,     0,   218,     0,   219,
     220,   221,   222,   223,     0,     0,     0,   224,     0,     0,
     225,   226,   227,     0,     0,     0,   228,     0,   229,   230,
       0,   231,   232,   233,     0,     0,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   723,     0,   243,   244,
     245,   724,   725,   246,   247,     0,   248,   249,   250,   726,
       0,   251,     0,     0,     0,   252,  2302,   253,     0,   254,
       0,   255,   256,   727,   258,   728,     0,   260,     0,   261,
       0,   729,     0,   262,   263,   264,     0,   265,   730,   731,
       0,   266,   267,     0,     0,     0,   732,   269,   270,   271,
     272,   733,     0,   273,   274,   275,     0,   276,     0,   277,
       0,     0,     0,   734,   278,   279,   735,     0,     0,   280,
       0,   281,   282,     0,   283,   284,     0,     0,     0,   285,
       0,     0,   286,   287,   736,     0,     0,   289,     0,   737,
     290,   291,     0,     0,     0,     0,     0,   738,   293,     0,
     294,     0,   295,     0,   296,   297,     0,     0,   739,     0,
       0,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
     314,   315,   316,   317,   740,   318,   319,   320,   321,   741,
     322,   323,     0,     0,     0,     0,   324,   325,   326,   327,
     742,   329,     0,     0,   743,   331,   744,   332,     0,   333,
     745,   746,   747,   748,   749,   338,   339,   340,   341,   342,
       0,   750,   343,   344,     0,     0,   345,   346,   347,   348,
     751,   752,   753,   349,   350,     0,   754,   755,   351,     0,
     352,   353,   756,     0,   355,   356,   357,   358,     0,   359,
     360,     0,     0,     0,     0,     0,     0,     0,     0,   361,
     362,   363,     0,   757,   364,     0,   365,     0,   366,   367,
     758,   369,   370,   371,   372,   759,   760,   375,   761,     0,
     376,   377,   378,     0,   379,     0,   380,   381,   382,   383,
     384,     0,   762,   386,   387,     0,     0,   388,     0,     0,
       0,   389,   390,   391,   392,   393,     0,     0,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,   402,   403,
     763,   764,   404,     0,   405,     0,   406,   407,     0,   408,
     409,     0,   410,     0,   765,     0,   766,   412,   413,   414,
     415,   416,   417,   767,   768,   420,   421,   422,   423,     0,
     769,   425,     0,     0,     0,   426,   427,   428,   429,     0,
       0,     0,   430,     0,     0,     0,   431,     0,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,     0,     0,     0,     0,     0,     0,   444,   445,     0,
     446,     0,     0,   447,     0,     0,   448,   449,     0,     0,
       0,   450,   770,   771,   451,   452,     0,   453,   454,   772,
     456,   457,   458,   773,   774,   459,   460,   461,   462,   775,
     463,   464,     0,   465,     0,   466,   467,   468,   469,     0,
     776,   470,   471,     0,   777,   778,   779,   780,     0,     0,
       0,     0,     0,   476,   477,   478,     0,   781,   782,   783,
     480,   481,   482,   784,   483,   484,   785,   485,   486,     0,
     487,   488,     0,     0,   489,     0,     0,   490,     0,   491,
       0,   786,   493,   494,     0,     0,   787,   788,   789,   790,
     495,     0,     0,   496,   791,     0,   792,   497,   498,   499,
     500,   501,   793,   794,     0,     0,     0,     0,     0,     0,
     504,   505,     0,   506,   507,   508,     0,     0,   795,     0,
       0,     0,     0,   796,   797,     0,     0,     0,     0,   798,
     799,     0,     0,   800,   801,     0,     0,   802,   803,   141,
       0,   142,   690,   144,   145,   146,   147,     0,     0,   148,
       0,     0,     0,   149,     0,     0,   691,     0,   151,   152,
     153,   154,   155,   156,   692,   158,     0,   159,     0,     0,
     693,   160,   694,   695,   696,   161,   697,     0,   162,   163,
     164,     0,   165,     0,   166,   167,     0,     0,   168,   698,
     699,   169,   170,     0,   171,   700,   701,   173,   174,     0,
     175,   176,   177,   178,   179,   702,   181,     0,   703,   183,
     704,   705,   706,   707,   708,     0,   189,   190,   191,   192,
     193,   194,   195,   196,     0,   197,   198,     0,   199,   200,
     201,   709,   203,     0,   204,   710,   711,   205,     0,     0,
     206,   712,   207,   713,   714,   208,     0,   209,   715,   716,
       0,   210,   211,   212,   717,   718,   719,     0,     0,     0,
       0,   720,   215,   721,     0,     0,   722,   216,     0,   217,
       0,     0,     0,   218,     0,   219,   220,   221,   222,   223,
       0,     0,     0,   224,     0,     0,   225,   226,   227,     0,
       0,     0,   228,     0,   229,   230,     0,   231,   232,   233,
       0,     0,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   723,     0,   243,   244,   245,   724,   725,   246,
     247,     0,   248,   249,   250,   726,     0,   251,     0,     0,
       0,   252,     0,   253,     0,   254,     0,   255,   256,   727,
     258,   728,     0,   260,     0,   261,     0,   729,     0,   262,
     263,   264,     0,   265,   730,   731,     0,   266,   267,     0,
       0,     0,   732,   269,   270,   271,   272,   733,     0,   273,
     274,   275,     0,   276,     0,   277,     0,     0,     0,   734,
     278,   279,   735,     0,     0,   280,     0,   281,   282,     0,
     283,   284,     0,     0,     0,   285,     0,     0,   286,   287,
     736,     0,     0,   289,     0,   737,   290,   291,     0,     0,
       0,     0,     0,   738,   293,     0,   294,     0,   295,     0,
     296,   297,     0,     0,   739,     0,     0,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,   314,   315,   316,   317,
     740,   318,   319,   320,   321,   741,   322,   323,     0,     0,
       0,     0,   324,   325,   326,   327,   742,   329,     0,     0,
     743,   331,   744,   332,     0,   333,   745,   746,   747,   748,
     749,   338,   339,   340,   341,   342,     0,   750,   343,   344,
       0,     0,   345,   346,   347,   348,   751,   752,   753,   349,
     350,     0,   754,   755,   351,     0,   352,   353,   756,     0,
     355,   356,   357,   358,     0,   359,   360,     0,     0,     0,
       0,     0,     0,     0,     0,   361,   362,   363,     0,   757,
     364,     0,   365,     0,   366,   367,   758,   369,   370,   371,
     372,   759,   760,   375,   761,     0,   376,   377,   378,     0,
     379,     0,   380,   381,   382,   383,   384,     0,   762,   386,
     387,     0,     0,   388,     0,     0,     0,   389,   390,   391,
     392,   393,     0,     0,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   401,   402,   403,   763,   764,   404,     0,
     405,     0,   406,   407,     0,   408,   409,     0,   410,     0,
     765,     0,   766,   412,   413,   414,   415,   416,   417,   767,
     768,   420,   421,   422,   423,     0,   769,   425,     0,     0,
       0,   426,   427,   428,   429,     0,     0,     0,   430,     0,
       0,     0,   431,     0,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,     0,     0,     0,
       0,     0,     0,   444,   445,     0,   446,     0,     0,   447,
       0,     0,   448,   449,     0,     0,     0,   450,   770,   771,
     451,   452,     0,   453,   454,   772,   456,   457,   458,   773,
     774,   459,   460,   461,   462,   775,   463,   464,     0,   465,
       0,   466,   467,   468,   469,     0,   776,   470,   471,     0,
     777,   778,   779,   780,     0,     0,     0,     0,     0,   476,
     477,   478,     0,   781,   782,   783,   480,   481,   482,   784,
     483,   484,   785,   485,   486,     0,   487,   488,     0,     0,
     489,     0,     0,   490,     0,   491,     0,   786,   493,   494,
       0,     0,   787,   788,   789,   790,   495,     0,     0,   496,
     791,     0,   792,   497,   498,   499,   500,   501,   793,   794,
       0,     0,     0,     0,     0,     0,   504,   505,     0,   506,
     507,   508,     0,     0,   795,     0,     0,     0,     0,   796,
     797,     0,     0,     0,     0,   798,   799,     0,     0,   800,
     801,     0,     0,   802,   803,   141,     0,   142,   690,   144,
     145,   146,   147,     0,     0,   148,     0,     0,     0,   149,
       0,     0,   691,     0,   151,   152,   153,   154,   155,   156,
     692,   158,     0,   159,     0,     0,   693,   160,   694,   695,
     696,   161,   697,     0,   162,   163,   164,     0,   165,     0,
     166,   167,     0,     0,   168,   698,   699,   169,   170,     0,
     171,   700,   701,   173,   174,     0,   175,   176,   177,   178,
     179,   702,   181,     0,   703,   183,   704,   705,   706,   707,
     708,     0,   189,   190,   191,   192,   193,   194,   195,   196,
       0,   197,   198,     0,   199,   200,   201,   709,   203,     0,
     204,   710,   711,   205,     0,     0,   206,   712,   207,   713,
     714,   208,     0,   209,   715,   716,     0,   210,   211,   212,
     717,   718,   719,     0,     0,     0,     0,   720,   215,   721,
       0,     0,   722,   216,     0,   217,     0,     0,     0,   218,
       0,   219,   220,   221,   222,   223,     0,     0,     0,   224,
       0,     0,   225,   226,   227,     0,     0,     0,   228,     0,
     229,   230,     0,   231,   232,   233,     0,     0,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   723,     0,
     243,   244,   245,   724,   725,   246,   247,     0,   248,   249,
     250,   726,     0,   251,     0,     0,     0,   252,     0,   253,
       0,   254,     0,   255,   256,   727,   258,   728,     0,   260,
       0,   261,     0,   729,     0,   262,   263,   264,     0,   265,
     730,   731,     0,   266,   267,     0,     0,     0,   732,   269,
     270,   271,   272,   733,     0,   273,   274,   275,     0,   276,
       0,   277,     0,     0,     0,   734,   278,   279,   735,     0,
       0,   280,     0,   281,   282,     0,   283,   284,     0,     0,
       0,   285,     0,     0,   286,   287,   736,     0,     0,   289,
       0,   737,   290,   291,     0,     0,     0,     0,     0,   738,
     293,     0,   294,     0,   295,     0,   296,   297,     0,     0,
     739,     0,     0,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,   314,   315,   316,   317,   740,   318,   319,   320,
     321,   741,   322,   323,     0,     0,     0,     0,   324,   325,
     326,   327,   742,   329,     0,     0,   743,   331,   744,   332,
       0,   333,   745,   746,   747,   748,   749,   338,   339,   340,
     341,   342,     0,   750,   343,   344,     0,     0,   345,   346,
     347,   348,   751,   752,   753,   349,   350,     0,   754,   755,
     351,     0,   352,   353,   756,     0,   355,   356,   357,   358,
       0,   359,   360,     0,     0,     0,     0,     0,     0,     0,
       0,   361,   362,   363,     0,   757,   364,     0,   365,     0,
     366,   367,   758,   369,   370,   371,   372,   759,   760,   375,
     761,     0,   376,   377,   378,     0,   379,     0,   380,   381,
     382,   383,   384,     0,   762,   386,   387,     0,     0,   388,
       0,     0,     0,   389,   390,   391,   392,   393,     0,     0,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
     402,   403,   763,   764,   404,     0,   405,     0,   406,   407,
       0,   408,   409,     0,   410,     0,   765,     0,   766,   412,
     413,   414,   415,   416,   417,   767,   768,   420,   421,   422,
     423,     0,   769,   425,     0,     0,     0,   426,   427,   428,
     429,     0,     0,     0,   430,     0,     0,     0,   431,     0,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,     0,     0,     0,     0,     0,     0,   444,
     445,     0,   446,     0,     0,   447,     0,     0,   448,   449,
       0,     0,     0,   450,   770,   771,   451,   452,     0,   453,
     454,   772,   456,   457,   458,   773,   774,   459,   460,   461,
     462,   775,   463,   464,     0,   465,     0,   466,   467,   468,
     469,     0,   776,   470,   471,     0,   777,   778,   779,   780,
       0,     0,     0,     0,     0,   476,   477,   478,     0,   781,
     782,   783,   480,   481,   482,   784,   483,   484,   785,   485,
     486,     0,   487,   488,     0,     0,   489,     0,     0,   490,
       0,   491,     0,   786,   493,   494,     0,     0,   787,   788,
     789,   790,   495,     0,     0,   496,   791,     0,   792,   497,
     498,   499,   500,   501,   793,   794,     0,     0,     0,     0,
       0,     0,   504,   505,     0,   506,   507,   508,     0,     0,
     795,     0,     0,     0,     0,   796,   797,     0,     0,     0,
       0,   798,  1181,     0,     0,   800,   801,     0,     0,   802,
     803,   141,     0,   142,   690,   144,   145,   146,   147,  1802,
       0,   148,     0,     0,     0,  1803,     0,     0,   691,     0,
     151,   152,   153,   154,   155,   156,   692,   158,     0,   159,
       0,     0,   693,   160,   694,   695,   696,   161,   697,     0,
     162,   163,   164,     0,   165,     0,   166,   167,     0,     0,
     168,   698,   699,   169,   170,     0,   171,   700,   701,   173,
     174,     0,   175,   176,   177,   178,   179,   702,   181,     0,
     703,   183,   704,   705,   706,   707,   708,     0,   189,   190,
     191,   192,   193,   194,   195,   196,     0,   197,   198,     0,
     199,   200,   201,   709,   203,     0,   204,   710,   711,   205,
       0,     0,   206,   712,   207,   713,   714,   208,     0,   209,
     715,   716,     0,   210,   211,   212,   717,   718,   719,     0,
       0,     0,     0,   720,   215,   721,     0,     0,   722,   216,
       0,   217,     0,     0,     0,   218,     0,   219,   220,   221,
     222,   223,     0,     0,     0,   224,     0,     0,   225,   226,
     227,     0,     0,     0,   228,     0,   229,   230,     0,   231,
     232,   233,     0,     0,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   723,     0,   243,   244,   245,   724,
     725,   246,   247,     0,   248,   249,   250,   726,     0,   251,
       0,     0,     0,   252,     0,   253,     0,   254,     0,   255,
     256,   727,   258,   728,     0,   260,     0,   261,     0,   729,
       0,   262,   263,   264,     0,   265,   730,   731,     0,   266,
     267,     0,     0,     0,   732,   269,   270,   271,   272,   733,
       0,   273,   274,   275,     0,   276,     0,   277,     0,     0,
       0,   734,   278,   279,   735,     0,     0,   280,     0,   281,
     282,     0,   283,   284,     0,     0,     0,   285,     0,     0,
     286,   287,   736,     0,     0,   289,     0,   737,   290,   291,
       0,     0,     0,     0,     0,   738,   293,     0,   294,     0,
     295,     0,   296,   297,     0,     0,   739,     0,     0,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,   314,   315,
     316,   317,   740,   318,   319,   320,   321,   741,   322,   323,
       0,     0,     0,     0,   324,   325,   326,   327,   742,   329,
       0,     0,   743,   331,   744,   332,     0,   333,   745,   746,
     747,   748,   749,   338,   339,   340,   341,   342,     0,   750,
     343,   344,     0,     0,   345,   346,   347,   348,   751,     0,
     753,   349,   350,     0,   754,   755,   351,     0,   352,   353,
     756,     0,   355,   356,   357,   358,     0,   359,   360,     0,
       0,     0,     0,     0,     0,     0,     0,   361,   362,   363,
       0,   757,   364,     0,   365,     0,   366,   367,   758,   369,
     370,   371,   372,   759,   760,   375,   761,     0,   376,   377,
     378,     0,   379,     0,   380,   381,   382,   383,   384,     0,
     762,   386,   387,     0,     0,   388,     0,     0,     0,   389,
     390,   391,   392,   393,     0,     0,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   401,   402,   403,   763,   764,
     404,     0,   405,     0,   406,   407,     0,   408,   409,     0,
     410,     0,   765,     0,   766,   412,   413,   414,   415,   416,
     417,   767,   768,   420,   421,   422,   423,     0,   769,   425,
       0,     0,     0,   426,   427,   428,   429,     0,     0,     0,
     430,     0,     0,     0,   431,     0,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,     0,
       0,     0,     0,     0,     0,   444,   445,     0,   446,     0,
       0,   447,     0,     0,   448,   449,     0,     0,     0,   450,
     770,   771,   451,   452,     0,   453,   454,   772,   456,   457,
     458,   773,   774,   459,   460,   461,   462,   775,   463,   464,
       0,   465,     0,   466,   467,   468,   469,     0,   776,   470,
     471,     0,   777,   778,   779,   780,     0,     0,     0,     0,
       0,   476,   477,   478,     0,   781,   782,   783,   480,   481,
     482,   784,   483,   484,   785,   485,   486,     0,   487,   488,
       0,     0,   489,     0,     0,   490,     0,   491,     0,   786,
     493,   494,     0,     0,   787,   788,   789,   790,   495,     0,
       0,   496,   791,     0,   792,   497,   498,   499,   500,   501,
     793,   794,     0,     0,     0,     0,     0,     0,   504,   505,
       0,   506,   507,   508,     0,     0,   795,     0,     0,     0,
       0,   796,   797,     0,     0,     0,     0,   798,   799,     0,
       0,   800,   801,     0,     0,   802,   803,   141,     0,   142,
     690,   144,   145,   146,   147,     0,     0,   148,     0,     0,
       0,   149,     0,     0,   691,     0,   151,   152,   153,   154,
     155,   156,   692,   158,     0,   159,     0,     0,   693,   160,
     694,   695,   696,   161,   697,     0,   162,   163,   164,     0,
     165,     0,   166,   167,     0,     0,   168,   698,   699,   169,
     170,     0,   171,   700,   701,   173,   174,     0,   175,   176,
     177,   178,   179,   702,   181,     0,   703,   183,   704,   705,
     706,   707,   708,     0,   189,   190,   191,   192,   193,   194,
     195,   196,     0,   197,   198,     0,   199,   200,   201,   709,
     203,     0,   204,   710,   711,   205,     0,     0,   206,   712,
     207,   713,   714,   208,     0,   209,   715,   716,     0,   210,
     211,   212,   717,   718,   719,     0,     0,     0,     0,   720,
     215,   721,     0,     0,   722,   216,     0,   217,     0,     0,
       0,   218,     0,   219,   220,   221,   222,   223,     0,     0,
       0,   224,     0,     0,   225,   226,   227,     0,     0,     0,
     228,     0,   229,   230,     0,   231,   232,   233,     0,     0,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     723,     0,   243,   244,   245,   724,   725,   246,   247,     0,
     248,   249,   250,   726,     0,   251,     0,     0,     0,   252,
       0,   253,     0,   254,     0,   255,   256,   727,   258,   728,
       0,   260,     0,   261,     0,   729,     0,   262,   263,   264,
       0,   265,   730,   731,     0,   266,   267,     0,     0,     0,
     732,   269,   270,   271,   272,   733,     0,   273,   274,   275,
       0,   276,     0,   277,     0,     0,     0,   734,   278,   279,
     735,     0,     0,   280,     0,   281,   282,     0,   283,   284,
       0,     0,     0,   285,     0,     0,   286,   287,   736,     0,
       0,   289,     0,   737,   290,   291,     0,     0,     0,     0,
       0,   738,   293,     0,   294,     0,   295,     0,   296,   297,
       0,     0,   739,     0,     0,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,   314,   315,   316,   317,   740,   318,
     319,   320,   321,   741,   322,   323,     0,     0,     0,     0,
     324,   325,   326,   327,   742,   329,     0,     0,   743,   331,
     744,   332,     0,   333,   745,   746,   747,   748,   749,   338,
     339,   340,   341,   342,     0,   750,   343,   344,     0,     0,
     345,   346,   347,   348,   751,   752,   753,   349,   350,     0,
     754,   755,   351,     0,   352,   353,   756,     0,   355,   356,
     357,   358,     0,   359,   360,     0,     0,     0,     0,     0,
       0,     0,     0,   361,   362,   363,     0,   757,   364,     0,
     365,     0,   366,   367,   758,   369,   370,   371,   372,   759,
     760,   375,   761,     0,   376,   377,   378,     0,   379,     0,
     380,   381,   382,   383,   384,     0,   762,   386,   387,     0,
       0,   388,     0,     0,     0,   389,   390,   391,   392,   393,
       0,     0,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   401,   402,   403,   763,   764,   404,     0,   405,     0,
     406,   407,     0,   408,   409,     0,   410,     0,   765,     0,
     766,   412,   413,   414,   415,   416,   417,   767,   768,   420,
     421,   422,   423,     0,   769,   425,     0,     0,     0,   426,
     427,   428,   429,     0,     0,     0,   430,     0,     0,     0,
     431,     0,   432,   433,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,     0,     0,     0,     0,     0,
       0,   444,   445,     0,   446,     0,     0,   447,     0,     0,
     448,   449,     0,     0,     0,   450,   770,   771,   451,   452,
       0,   453,   454,   772,   456,   457,   458,   773,   774,   459,
     460,   461,   462,   775,   463,   464,     0,   465,     0,   466,
     467,   468,   469,     0,   776,   470,   471,     0,   777,   778,
     779,   780,     0,     0,     0,     0,     0,   476,   477,   478,
       0,   781,   782,   783,   480,   481,   482,   784,   483,   484,
     785,   485,   486,     0,   487,   488,     0,     0,   489,     0,
       0,   490,     0,   491,     0,  1899,   493,   494,     0,     0,
     787,   788,   789,   790,   495,     0,     0,   496,   791,     0,
     792,   497,   498,   499,   500,   501,   793,   794,     0,     0,
       0,     0,     0,     0,   504,   505,     0,   506,   507,   508,
       0,     0,   795,     0,     0,     0,     0,   796,   797,     0,
       0,     0,     0,   798,   799,     0,     0,   800,   801,     0,
       0,   802,   803,   141,     0,   142,   690,   144,   145,   146,
     147,     0,     0,   148,     0,     0,     0,   149,     0,     0,
     691,     0,   151,   152,   153,   154,   155,   156,   692,   158,
       0,   159,     0,     0,   693,   160,   694,   695,   696,   161,
     697,     0,   162,   163,   164,     0,   165,     0,   166,   167,
       0,     0,   168,   698,   699,   169,   170,     0,   171,   700,
     701,   173,   174,     0,   175,   176,   177,   178,   179,   702,
     181,     0,   703,   183,   704,   705,   706,   707,   708,     0,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
     198,     0,   199,   200,   201,   709,   203,     0,   204,   710,
     711,   205,     0,     0,   206,   712,   207,   713,   714,   208,
       0,   209,   715,   716,     0,   210,   211,   212,   717,   718,
     719,     0,     0,     0,     0,   720,   215,   721,     0,     0,
     722,   216,     0,   217,     0,     0,     0,   218,     0,   219,
     220,   221,   222,   223,     0,     0,     0,   224,     0,     0,
     225,   226,   227,     0,     0,     0,   228,     0,   229,   230,
       0,   231,   232,   233,     0,     0,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   723,     0,   243,   244,
     245,   724,   725,   246,   247,     0,   248,   249,   250,   726,
       0,   251,     0,     0,     0,   252,     0,   253,     0,   254,
       0,   255,   256,   727,   258,   728,     0,   260,     0,   261,
       0,   729,     0,   262,   263,   264,     0,   265,   730,   731,
       0,   266,   267,     0,     0,     0,   732,   269,   270,   271,
     272,   733,     0,   273,   274,   275,     0,   276,     0,   277,
       0,     0,     0,   734,   278,   279,  2722,     0,     0,   280,
       0,   281,   282,     0,   283,   284,     0,     0,     0,   285,
       0,     0,   286,   287,   736,     0,     0,   289,     0,   737,
     290,   291,     0,     0,     0,     0,     0,   738,   293,     0,
     294,     0,   295,     0,   296,   297,     0,     0,   739,     0,
       0,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
     314,   315,   316,   317,   740,   318,   319,   320,   321,   741,
     322,   323,     0,     0,     0,     0,   324,   325,   326,   327,
     742,   329,     0,     0,   743,   331,   744,   332,     0,   333,
     745,   746,   747,   748,   749,   338,   339,   340,   341,   342,
       0,   750,   343,   344,     0,     0,   345,   346,   347,   348,
     751,   752,   753,   349,   350,     0,   754,   755,   351,     0,
     352,   353,   756,     0,   355,   356,   357,   358,     0,   359,
     360,     0,     0,     0,     0,     0,     0,     0,     0,   361,
     362,   363,     0,   757,   364,     0,   365,     0,   366,   367,
     758,   369,   370,   371,   372,   759,   760,   375,   761,     0,
     376,   377,   378,     0,   379,     0,   380,   381,   382,   383,
     384,     0,   762,   386,   387,     0,     0,   388,     0,     0,
       0,   389,   390,   391,   392,   393,     0,     0,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,   402,   403,
     763,   764,   404,     0,   405,     0,   406,   407,     0,   408,
     409,     0,   410,     0,   765,     0,   766,   412,   413,   414,
     415,   416,   417,   767,   768,   420,   421,   422,   423,     0,
     769,   425,     0,     0,     0,   426,   427,   428,   429,     0,
       0,     0,   430,     0,     0,     0,   431,     0,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,     0,     0,     0,     0,     0,     0,   444,   445,     0,
     446,     0,     0,   447,     0,     0,   448,   449,     0,     0,
       0,   450,   770,   771,   451,   452,     0,   453,   454,   772,
     456,   457,   458,   773,   774,   459,   460,   461,   462,   775,
     463,   464,     0,   465,     0,   466,   467,   468,   469,     0,
     776,   470,   471,     0,   777,   778,   779,   780,     0,     0,
       0,     0,     0,   476,   477,   478,     0,   781,   782,   783,
     480,   481,   482,   784,   483,   484,   785,   485,   486,     0,
     487,   488,     0,     0,   489,     0,     0,   490,     0,   491,
       0,   786,   493,   494,     0,     0,   787,   788,   789,   790,
     495,     0,     0,   496,   791,     0,   792,   497,   498,   499,
     500,   501,   793,   794,     0,     0,     0,     0,     0,     0,
     504,   505,     0,   506,   507,   508,     0,     0,   795,     0,
       0,     0,     0,   796,   797,     0,     0,     0,     0,   798,
     799,     0,     0,   800,   801,     0,     0,   802,   803,   141,
       0,   142,   690,   144,   145,   146,   147,     0,     0,   148,
       0,     0,     0,   149,     0,     0,   691,     0,   151,   152,
     153,   154,   155,   156,   692,   158,     0,   159,     0,     0,
     693,   160,   694,   695,   696,   161,   697,     0,   162,   163,
     164,     0,   165,     0,   166,   167,     0,     0,   168,   698,
     699,   169,   170,     0,   171,   700,   701,   173,   174,     0,
     175,   176,   177,   178,   179,   702,   181,     0,   703,   183,
     704,   705,   706,   707,   708,     0,   189,   190,   191,   192,
     193,   194,   195,   196,     0,   197,   198,     0,   199,   200,
     201,   709,   203,     0,   204,   710,   711,   205,     0,     0,
     206,   712,   207,   713,   714,   208,     0,   209,   715,   716,
       0,   210,   211,   212,   717,   718,   719,     0,     0,     0,
       0,   720,   215,   721,     0,     0,   722,   216,     0,   217,
       0,     0,     0,   218,     0,   219,   220,   221,   222,   223,
       0,     0,     0,   224,     0,     0,   225,   226,   227,     0,
       0,     0,   228,     0,   229,   230,     0,   231,   232,   233,
       0,     0,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   723,     0,   243,   244,   245,   724,   725,   246,
     247,     0,   248,   249,   250,   726,     0,   251,     0,     0,
       0,   252,     0,   253,     0,   254,     0,   255,   256,   727,
     258,   728,     0,   260,     0,   261,     0,   729,     0,   262,
     263,   264,     0,   265,   730,   731,     0,   266,   267,     0,
       0,     0,   732,   269,   270,   271,   272,   733,     0,   273,
     274,   275,     0,   276,     0,   277,     0,     0,     0,   734,
     278,   279,  2773,     0,     0,   280,     0,   281,   282,     0,
     283,   284,     0,     0,     0,   285,     0,     0,   286,   287,
     736,     0,     0,   289,     0,   737,   290,   291,     0,     0,
       0,     0,     0,   738,   293,     0,   294,     0,   295,     0,
     296,   297,     0,     0,   739,     0,     0,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,   314,   315,   316,   317,
     740,   318,   319,   320,   321,   741,   322,   323,     0,     0,
       0,     0,   324,   325,   326,   327,   742,   329,     0,     0,
     743,   331,   744,   332,     0,   333,   745,   746,   747,   748,
     749,   338,   339,   340,   341,   342,     0,   750,   343,   344,
       0,     0,   345,   346,   347,   348,   751,   752,   753,   349,
     350,     0,   754,   755,   351,     0,   352,   353,   756,     0,
     355,   356,   357,   358,     0,   359,   360,     0,     0,     0,
       0,     0,     0,     0,     0,   361,   362,   363,     0,   757,
     364,     0,   365,     0,   366,   367,   758,   369,   370,   371,
     372,   759,   760,   375,   761,     0,   376,   377,   378,     0,
     379,     0,   380,   381,   382,   383,   384,     0,   762,   386,
     387,     0,     0,   388,     0,     0,     0,   389,   390,   391,
     392,   393,     0,     0,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   401,   402,   403,   763,   764,   404,     0,
     405,     0,   406,   407,     0,   408,   409,     0,   410,     0,
     765,     0,   766,   412,   413,   414,   415,   416,   417,   767,
     768,   420,   421,   422,   423,     0,   769,   425,     0,     0,
       0,   426,   427,   428,   429,     0,     0,     0,   430,     0,
       0,     0,   431,     0,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,     0,     0,     0,
       0,     0,     0,   444,   445,     0,   446,     0,     0,   447,
       0,     0,   448,   449,     0,     0,     0,   450,   770,   771,
     451,   452,     0,   453,   454,   772,   456,   457,   458,   773,
     774,   459,   460,   461,   462,   775,   463,   464,     0,   465,
       0,   466,   467,   468,   469,     0,   776,   470,   471,     0,
     777,   778,   779,   780,     0,     0,     0,     0,     0,   476,
     477,   478,     0,   781,   782,   783,   480,   481,   482,   784,
     483,   484,   785,   485,   486,     0,   487,   488,     0,     0,
     489,     0,     0,   490,     0,   491,     0,   786,   493,   494,
       0,     0,   787,   788,   789,   790,   495,     0,     0,   496,
     791,     0,   792,   497,   498,   499,   500,   501,   793,   794,
       0,     0,     0,     0,     0,     0,   504,   505,     0,   506,
     507,   508,     0,     0,   795,     0,     0,     0,     0,   796,
     797,     0,     0,     0,     0,   798,   799,     0,     0,   800,
     801,     0,     0,   802,   803,   141,     0,   142,   690,   144,
     145,   146,   147,     0,     0,   148,     0,     0,     0,   149,
       0,     0,   691,     0,   151,   152,   153,   154,   155,   156,
     692,   158,     0,   159,     0,     0,   693,   160,   694,   695,
     696,   161,   697,     0,   162,   163,   164,     0,   165,     0,
     166,   167,     0,     0,   168,   698,   699,   169,   170,     0,
     171,   700,   701,   173,   174,     0,   175,   176,   177,   178,
     179,   702,   181,     0,   703,   183,   704,   705,   706,   707,
     708,     0,   189,   190,   191,   192,   193,   194,   195,   196,
       0,   197,   198,     0,   199,   200,   201,   709,   203,     0,
     204,   710,   711,   205,     0,     0,   206,   712,   207,   713,
     714,   208,     0,   209,   715,   716,     0,   210,   211,   212,
     717,   718,   719,     0,     0,     0,     0,   720,   215,   721,
       0,     0,  3605,   216,     0,   217,     0,     0,     0,   218,
       0,   219,   220,   221,   222,   223,     0,     0,     0,   224,
       0,     0,   225,   226,   227,     0,     0,     0,   228,     0,
     229,   230,     0,   231,   232,   233,     0,     0,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   723,     0,
     243,   244,   245,   724,   725,   246,   247,     0,   248,   249,
     250,   726,     0,   251,     0,     0,     0,   252,     0,   253,
       0,   254,     0,   255,   256,   727,   258,   728,     0,   260,
       0,   261,     0,   729,     0,   262,   263,   264,     0,   265,
     730,   731,     0,   266,   267,     0,     0,     0,   732,   269,
     270,   271,   272,   733,     0,   273,   274,   275,     0,   276,
       0,   277,     0,     0,     0,   734,   278,   279,   735,     0,
       0,   280,     0,   281,   282,     0,   283,   284,     0,     0,
       0,   285,     0,     0,   286,   287,   736,     0,     0,   289,
       0,   737,   290,   291,     0,     0,     0,     0,     0,   738,
     293,     0,   294,     0,   295,     0,   296,   297,     0,     0,
     739,     0,     0,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,   314,   315,   316,   317,   740,   318,   319,   320,
     321,   741,   322,   323,     0,     0,     0,     0,   324,   325,
     326,   327,   742,   329,     0,     0,   743,   331,   744,   332,
       0,   333,   745,   746,   747,   748,   749,   338,   339,   340,
     341,   342,     0,   750,   343,   344,     0,     0,   345,   346,
     347,   348,   751,   752,   753,   349,   350,     0,   754,   755,
     351,     0,   352,   353,   756,     0,   355,   356,   357,   358,
       0,   359,   360,     0,     0,     0,     0,     0,     0,     0,
       0,   361,   362,   363,     0,   757,   364,     0,   365,     0,
     366,   367,   758,   369,   370,   371,   372,   759,   760,   375,
     761,     0,   376,   377,   378,     0,   379,     0,   380,   381,
     382,   383,   384,     0,   762,   386,   387,     0,     0,   388,
       0,     0,     0,   389,   390,   391,   392,   393,     0,     0,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
     402,   403,   763,   764,   404,     0,   405,     0,   406,   407,
       0,   408,   409,     0,   410,     0,   765,     0,   766,   412,
     413,   414,   415,   416,   417,   767,   768,   420,   421,   422,
     423,     0,   769,   425,     0,     0,     0,   426,   427,   428,
     429,     0,     0,     0,   430,     0,     0,     0,   431,     0,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,     0,     0,     0,     0,     0,     0,   444,
     445,     0,   446,     0,     0,   447,     0,     0,   448,   449,
       0,     0,     0,   450,   770,   771,   451,   452,     0,   453,
     454,   772,   456,   457,   458,   773,   774,   459,   460,   461,
     462,   775,   463,   464,     0,   465,     0,   466,   467,   468,
     469,     0,   776,   470,   471,     0,   777,   778,   779,   780,
       0,     0,     0,     0,     0,   476,   477,   478,     0,   781,
     782,   783,   480,   481,   482,   784,   483,   484,   785,   485,
     486,     0,   487,   488,     0,     0,   489,     0,     0,   490,
       0,   491,     0,   786,   493,   494,     0,     0,   787,   788,
     789,   790,   495,     0,     0,   496,   791,     0,   792,   497,
     498,   499,   500,   501,   793,   794,     0,     0,     0,     0,
       0,     0,   504,   505,     0,   506,   507,   508,     0,     0,
     795,     0,     0,     0,     0,   796,   797,     0,     0,     0,
       0,   798,   799,     0,     0,   800,   801,     0,     0,   802,
     803,   141,     0,   142,   690,   144,   145,   146,   147,     0,
       0,   148,     0,     0,     0,   149,     0,     0,   691,     0,
     151,   152,   153,   154,   155,   156,   692,   158,     0,   159,
       0,     0,   693,   160,   694,   695,   696,   161,   697,     0,
     162,   163,   164,     0,   165,     0,   166,   167,     0,     0,
     168,   698,   699,   169,   170,     0,   171,   700,   701,   173,
     174,     0,   175,   176,   177,   178,   179,   702,   181,     0,
     703,   183,   704,   705,   706,   707,   708,     0,   189,   190,
     191,   192,   193,   194,   195,   196,     0,   197,   198,     0,
     199,   200,   201,   709,   203,     0,   204,   710,   711,   205,
       0,     0,   206,   712,   207,   713,   714,   208,     0,   209,
     715,   716,     0,   210,   211,   212,   717,   718,   719,     0,
       0,     0,     0,   720,   215,   721,     0,     0,   722,   216,
       0,   217,     0,     0,     0,   218,     0,   219,   220,   221,
     222,   223,     0,     0,     0,   224,     0,     0,   225,   226,
     227,     0,     0,     0,   228,     0,   229,   230,     0,   231,
     232,   233,     0,     0,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   723,     0,   243,   244,   245,   724,
     725,   246,   247,     0,   248,   249,   250,   726,     0,   251,
       0,     0,     0,   252,     0,   253,     0,   254,     0,   255,
     256,   727,   258,   728,     0,   260,     0,   261,     0,   729,
       0,   262,   263,   264,     0,   265,   730,   731,     0,   266,
     267,     0,     0,     0,   732,   269,   270,   271,   272,   733,
       0,   273,   274,   275,     0,   276,     0,   277,     0,     0,
       0,   734,   278,   279,   735,     0,     0,   280,     0,   281,
     282,     0,   283,   284,     0,     0,     0,   285,     0,     0,
     286,   287,   736,     0,     0,   289,     0,   737,   290,   291,
       0,     0,     0,     0,     0,   738,   293,     0,   294,     0,
     295,     0,   296,   297,     0,     0,   739,     0,     0,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,   314,   315,
     316,   317,   740,   318,   319,   320,   321,   741,   322,   323,
    4617,     0,     0,     0,   324,   325,   326,   327,   742,   329,
       0,     0,   743,   331,   744,   332,     0,   333,   745,   746,
     747,   748,   749,   338,   339,   340,   341,   342,     0,   750,
     343,   344,     0,     0,   345,   346,   347,   348,   751,     0,
     753,   349,   350,     0,   754,   755,   351,     0,   352,   353,
     756,     0,   355,   356,   357,   358,     0,   359,   360,     0,
       0,     0,     0,     0,     0,     0,     0,   361,   362,   363,
       0,   757,   364,     0,   365,     0,   366,   367,   758,   369,
     370,   371,   372,   759,   760,   375,   761,     0,   376,   377,
     378,     0,   379,     0,   380,   381,   382,   383,   384,     0,
     762,   386,   387,     0,     0,   388,     0,     0,     0,   389,
     390,   391,   392,   393,     0,     0,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   401,   402,   403,   763,   764,
     404,     0,   405,     0,   406,   407,     0,   408,   409,     0,
     410,     0,   765,     0,   766,   412,   413,   414,   415,   416,
     417,   767,   768,   420,   421,   422,   423,     0,   769,   425,
       0,     0,     0,   426,   427,   428,   429,     0,     0,     0,
     430,     0,     0,     0,   431,     0,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,     0,
       0,     0,     0,     0,     0,   444,   445,     0,   446,     0,
       0,   447,     0,     0,   448,   449,     0,     0,     0,   450,
     770,   771,   451,   452,     0,   453,   454,   772,   456,   457,
     458,   773,   774,   459,   460,   461,   462,   775,   463,   464,
       0,   465,     0,   466,   467,   468,   469,     0,   776,   470,
     471,     0,   777,   778,   779,   780,     0,     0,     0,     0,
       0,   476,   477,   478,     0,   781,   782,   783,   480,   481,
     482,   784,   483,   484,   785,   485,   486,     0,   487,   488,
       0,     0,   489,     0,     0,   490,     0,   491,     0,   786,
     493,   494,     0,     0,   787,   788,   789,   790,   495,     0,
       0,   496,   791,     0,   792,   497,   498,   499,   500,   501,
     793,   794,     0,     0,     0,     0,     0,     0,   504,   505,
       0,   506,   507,   508,     0,     0,   795,     0,     0,     0,
       0,   796,   797,     0,     0,     0,     0,   798,   799,     0,
       0,   800,   801,     0,     0,   802,   803,   141,     0,   142,
     690,   144,   145,   146,   147,     0,     0,   148,     0,     0,
       0,   149,     0,     0,   691,     0,   151,   152,   153,   154,
     155,   156,   692,   158,     0,   159,     0,     0,   693,   160,
     694,   695,   696,   161,   697,     0,   162,   163,   164,     0,
     165,     0,   166,   167,     0,     0,   168,   698,   699,   169,
     170,     0,   171,   700,   701,   173,   174,     0,   175,   176,
     177,   178,   179,   702,   181,     0,   703,   183,   704,   705,
     706,   707,   708,     0,   189,   190,   191,   192,   193,   194,
     195,   196,     0,   197,   198,     0,   199,   200,   201,   709,
     203,     0,   204,   710,   711,   205,     0,     0,   206,   712,
     207,   713,   714,   208,     0,   209,   715,   716,     0,   210,
     211,   212,   717,   718,   719,     0,     0,     0,     0,   720,
     215,   721,     0,     0,   722,   216,     0,   217,     0,     0,
       0,   218,     0,   219,   220,   221,   222,   223,     0,     0,
       0,   224,     0,     0,   225,   226,   227,     0,     0,     0,
     228,     0,   229,   230,     0,   231,   232,   233,     0,     0,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
     723,     0,   243,   244,   245,   724,   725,   246,   247,     0,
     248,   249,   250,   726,     0,   251,     0,     0,     0,   252,
       0,   253,     0,   254,     0,   255,   256,   727,   258,   728,
       0,   260,     0,   261,     0,   729,     0,   262,   263,   264,
       0,   265,   730,   731,     0,   266,   267,     0,     0,     0,
     732,   269,   270,   271,   272,   733,     0,   273,   274,   275,
       0,   276,     0,   277,     0,     0,     0,   734,   278,   279,
     735,     0,     0,   280,     0,   281,   282,     0,   283,   284,
       0,     0,     0,   285,     0,     0,   286,   287,   736,     0,
       0,   289,     0,   737,   290,   291,     0,     0,     0,     0,
       0,   738,   293,     0,   294,     0,   295,     0,   296,   297,
       0,     0,   739,     0,     0,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,   314,   315,   316,   317,   740,   318,
     319,   320,   321,   741,   322,   323,     0,     0,     0,     0,
     324,   325,   326,   327,   742,   329,     0,     0,   743,   331,
     744,   332,     0,   333,   745,   746,   747,   748,   749,   338,
     339,   340,   341,   342,     0,   750,   343,   344,     0,     0,
     345,   346,   347,   348,   751,     0,   753,   349,   350,     0,
     754,   755,   351,     0,   352,   353,   756,     0,   355,   356,
     357,   358,     0,   359,   360,     0,     0,     0,     0,     0,
       0,     0,     0,   361,   362,   363,     0,   757,   364,     0,
     365,     0,   366,   367,   758,   369,   370,   371,   372,   759,
     760,   375,   761,     0,   376,   377,   378,     0,   379,     0,
     380,   381,   382,   383,   384,     0,   762,   386,   387,     0,
       0,   388,     0,     0,     0,   389,   390,   391,   392,   393,
       0,     0,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   401,   402,   403,   763,   764,   404,     0,   405,     0,
     406,   407,     0,   408,   409,     0,   410,     0,   765,     0,
     766,   412,   413,   414,   415,   416,   417,   767,   768,   420,
     421,   422,   423,     0,   769,   425,     0,     0,     0,   426,
     427,   428,   429,     0,     0,     0,   430,     0,     0,     0,
     431,     0,   432,   433,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,     0,     0,     0,     0,     0,
       0,   444,   445,     0,   446,     0,     0,   447,     0,     0,
     448,   449,     0,     0,     0,   450,   770,   771,   451,   452,
       0,   453,   454,   772,   456,   457,   458,   773,   774,   459,
     460,   461,   462,   775,   463,   464,     0,   465,     0,   466,
     467,   468,   469,     0,   776,   470,   471,     0,   777,   778,
     779,   780,     0,     0,     0,     0,     0,   476,   477,   478,
       0,   781,   782,   783,   480,   481,   482,   784,   483,   484,
     785,   485,   486,     0,   487,   488,     0,     0,   489,     0,
       0,   490,     0,   491,     0,   786,   493,   494,     0,     0,
     787,   788,   789,   790,   495,     0,     0,   496,   791,     0,
     792,   497,   498,   499,   500,   501,   793,   794,     0,     0,
       0,     0,     0,     0,   504,   505,     0,   506,   507,   508,
       0,     0,   795,     0,     0,     0,     0,   796,   797,     0,
       0,     0,     0,   798,   799,     0,     0,   800,   801,     0,
       0,   802,   803,   141,     0,   142,   690,   144,   145,   146,
     147,     0,     0,   148,     0,     0,     0,   149,     0,     0,
     691,     0,   151,   152,   153,   154,   155,   156,   692,   158,
       0,   159,     0,     0,   693,   160,   694,   695,   696,   161,
     697,     0,   162,   163,   164,     0,   165,     0,   166,   167,
       0,     0,   168,   698,   699,   169,   170,     0,   171,   700,
     701,   173,   174,     0,   175,   176,   177,   178,   179,   702,
     181,     0,   703,   183,   704,   705,   706,   707,   708,     0,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
     198,     0,   199,   200,   201,   709,   203,     0,   204,   710,
     711,   205,     0,     0,   206,   712,   207,   713,   714,   208,
       0,   209,   715,   716,     0,   210,   211,   212,   717,   718,
     719,     0,     0,     0,     0,   720,   215,   721,     0,     0,
     722,   216,     0,   217,     0,     0,     0,   218,     0,   219,
     220,   221,   222,   223,     0,     0,     0,   224,     0,     0,
     225,   226,   227,     0,     0,     0,   228,     0,   229,   230,
       0,   231,   232,   233,     0,     0,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   723,     0,   243,   244,
     245,   724,   725,   246,   247,     0,   248,   249,   250,   726,
       0,   251,     0,     0,     0,   252,     0,   253,     0,   254,
       0,   255,   256,   727,   258,   728,     0,   260,     0,   261,
       0,   729,     0,   262,   263,   264,     0,   265,   730,   731,
       0,   266,   267,     0,     0,     0,   732,   269,   270,   271,
     272,   733,     0,   273,   274,   275,     0,   276,     0,   277,
       0,     0,     0,   734,   278,   279,  1817,     0,     0,   280,
       0,   281,   282,     0,   283,   284,     0,     0,     0,   285,
       0,     0,   286,   287,   736,     0,     0,   289,     0,   737,
     290,   291,     0,     0,     0,     0,     0,   738,   293,     0,
     294,     0,   295,     0,   296,   297,     0,     0,   739,     0,
       0,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
     314,   315,   316,   317,   740,   318,   319,   320,   321,   741,
     322,   323,     0,     0,     0,     0,   324,   325,   326,   327,
     742,   329,     0,     0,   743,   331,   744,   332,     0,   333,
     745,   746,   747,   748,   749,   338,   339,   340,   341,   342,
       0,   750,   343,   344,     0,     0,   345,   346,   347,   348,
     751,     0,   753,   349,   350,     0,   754,   755,   351,     0,
     352,   353,   756,     0,   355,   356,   357,   358,     0,   359,
     360,     0,     0,     0,     0,     0,     0,     0,     0,   361,
     362,   363,     0,   757,   364,     0,   365,     0,   366,   367,
     758,   369,   370,   371,   372,   759,   760,   375,   761,     0,
     376,   377,   378,     0,   379,     0,   380,   381,   382,   383,
     384,     0,   762,   386,   387,     0,     0,   388,     0,     0,
       0,   389,   390,   391,   392,   393,     0,     0,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,   402,   403,
     763,   764,   404,     0,   405,     0,   406,   407,     0,   408,
     409,     0,   410,     0,   765,     0,   766,   412,   413,   414,
     415,   416,   417,   767,   768,   420,   421,   422,   423,     0,
     769,   425,     0,     0,     0,   426,   427,   428,   429,     0,
       0,     0,   430,     0,     0,     0,   431,     0,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,     0,     0,     0,     0,     0,     0,   444,   445,     0,
     446,     0,     0,   447,     0,     0,   448,   449,     0,     0,
       0,   450,   770,   771,   451,   452,     0,   453,   454,   772,
     456,   457,   458,   773,   774,   459,   460,   461,   462,   775,
     463,   464,     0,   465,     0,   466,   467,   468,   469,     0,
     776,   470,   471,     0,   777,   778,   779,   780,     0,     0,
       0,     0,     0,   476,   477,   478,     0,   781,   782,   783,
     480,   481,   482,   784,   483,   484,   785,   485,   486,     0,
     487,   488,     0,     0,   489,     0,     0,   490,     0,   491,
       0,   786,   493,   494,     0,     0,   787,   788,   789,   790,
     495,     0,     0,   496,   791,     0,   792,   497,   498,   499,
     500,   501,   793,   794,     0,     0,     0,     0,     0,     0,
     504,   505,     0,   506,   507,   508,     0,     0,   795,     0,
       0,     0,     0,   796,   797,     0,     0,     0,     0,   798,
     799,     0,     0,   800,   801,     0,     0,   802,   803,   141,
       0,   142,   690,   144,   145,   146,   147,     0,     0,   148,
       0,     0,     0,   149,     0,     0,   691,     0,   151,   152,
     153,   154,   155,   156,   692,   158,     0,   159,     0,     0,
     693,   160,   694,   695,   696,   161,   697,     0,   162,   163,
     164,     0,   165,     0,   166,   167,     0,     0,   168,   698,
     699,   169,   170,     0,   171,   700,   701,   173,   174,     0,
     175,   176,   177,   178,   179,   702,   181,     0,   703,   183,
     704,   705,   706,   707,   708,     0,   189,   190,   191,   192,
     193,   194,   195,   196,     0,   197,   198,     0,   199,   200,
     201,   709,   203,     0,   204,   710,   711,   205,     0,     0,
     206,   712,   207,   713,   714,   208,     0,   209,   715,   716,
       0,   210,   211,   212,   717,   718,   719,     0,     0,     0,
       0,   720,   215,   721,     0,     0,   722,   216,     0,   217,
       0,     0,     0,   218,     0,   219,   220,   221,   222,   223,
       0,     0,     0,   224,     0,     0,   225,   226,   227,     0,
       0,     0,   228,     0,   229,   230,     0,   231,   232,   233,
       0,     0,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,   723,     0,   243,   244,   245,   724,   725,   246,
     247,     0,   248,   249,   250,   726,     0,   251,     0,     0,
       0,   252,     0,   253,     0,   254,     0,   255,   256,   727,
     258,   728,     0,   260,     0,   261,     0,   729,     0,   262,
     263,   264,     0,   265,   730,   731,     0,   266,   267,     0,
       0,     0,   732,   269,   270,   271,   272,   733,     0,   273,
     274,   275,     0,   276,     0,   277,     0,     0,     0,   734,
     278,   279,  1819,     0,     0,   280,     0,   281,   282,     0,
     283,   284,     0,     0,     0,   285,     0,     0,   286,   287,
     736,     0,     0,   289,     0,   737,   290,   291,     0,     0,
       0,     0,     0,   738,   293,     0,   294,     0,   295,     0,
     296,   297,     0,     0,   739,     0,     0,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,   314,   315,   316,   317,
     740,   318,   319,   320,   321,   741,   322,   323,     0,     0,
       0,     0,   324,   325,   326,   327,   742,   329,     0,     0,
     743,   331,   744,   332,     0,   333,   745,   746,   747,   748,
     749,   338,   339,   340,   341,   342,     0,   750,   343,   344,
       0,     0,   345,   346,   347,   348,   751,     0,   753,   349,
     350,     0,   754,   755,   351,     0,   352,   353,   756,     0,
     355,   356,   357,   358,     0,   359,   360,     0,     0,     0,
       0,     0,     0,     0,     0,   361,   362,   363,     0,   757,
     364,     0,   365,     0,   366,   367,   758,   369,   370,   371,
     372,   759,   760,   375,   761,     0,   376,   377,   378,     0,
     379,     0,   380,   381,   382,   383,   384,     0,   762,   386,
     387,     0,     0,   388,     0,     0,     0,   389,   390,   391,
     392,   393,     0,     0,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   401,   402,   403,   763,   764,   404,     0,
     405,     0,   406,   407,     0,   408,   409,     0,   410,     0,
     765,     0,   766,   412,   413,   414,   415,   416,   417,   767,
     768,   420,   421,   422,   423,     0,   769,   425,     0,     0,
       0,   426,   427,   428,   429,     0,     0,     0,   430,     0,
       0,     0,   431,     0,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,     0,     0,     0,
       0,     0,     0,   444,   445,     0,   446,     0,     0,   447,
       0,     0,   448,   449,     0,     0,     0,   450,   770,   771,
     451,   452,     0,   453,   454,   772,   456,   457,   458,   773,
     774,   459,   460,   461,   462,   775,   463,   464,     0,   465,
       0,   466,   467,   468,   469,     0,   776,   470,   471,     0,
     777,   778,   779,   780,     0,     0,     0,     0,     0,   476,
     477,   478,     0,   781,   782,   783,   480,   481,   482,   784,
     483,   484,   785,   485,   486,     0,   487,   488,     0,     0,
     489,     0,     0,   490,     0,   491,     0,   786,   493,   494,
       0,     0,   787,   788,   789,   790,   495,     0,     0,   496,
     791,     0,   792,   497,   498,   499,   500,   501,   793,   794,
       0,     0,     0,     0,     0,     0,   504,   505,     0,   506,
     507,   508,     0,     0,   795,     0,     0,     0,     0,   796,
     797,     0,     0,     0,     0,   798,   799,     0,     0,   800,
     801,     0,     0,   802,   803,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   148,     0,     0,     0,   149,
       0,     0,   150,     0,   151,   152,   153,   154,   155,   156,
     157,   158,     0,   159,     0,     0,     0,   160,   694,     0,
       0,   161,     0,     0,   162,   163,   164,     0,   165,     0,
     166,   167,     0,     0,   168,     0,     0,   169,   170,     0,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,   194,   195,   196,
       0,   197,   198,     0,   199,   200,   201,   202,   203,     0,
     204,     0,     0,   205,     0,     0,   206,     0,   207,     0,
       0,   208,     0,   209,     0,     0,     0,   210,   211,   212,
       0,     0,  1858,     0,     0,     0,     0,   214,   215,   721,
       0,     0,     0,   216,     0,   217,     0,     0,     0,   218,
       0,   219,   220,   221,   222,   223,     0,     0,     0,   224,
       0,     0,   225,   226,   227,     0,     0,     0,   228,     0,
     229,   230,     0,   231,   232,   233,     0,     0,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,     0,
     243,   244,   245,     0,   725,   246,   247,     0,   248,   249,
     250,   726,     0,   251,     0,     0,     0,   252,     0,   253,
       0,   254,     0,   255,   256,   257,   258,   259,     0,   260,
       0,   261,     0,     0,     0,   262,   263,   264,     0,   265,
     730,   731,     0,   266,   267,     0,     0,     0,   268,   269,
     270,   271,   272,     0,     0,   273,   274,   275,     0,   276,
       0,   277,     0,     0,     0,     0,   278,   279,     0,     0,
       0,   280,     0,   281,   282,     0,   283,   284,     0,     0,
       0,   285,     0,     0,   286,   287,   288,     0,     0,   289,
       0,     0,   290,   291,     0,     0,     0,     0,     0,   292,
     293,     0,   294,     0,   295,     0,   296,   297,     0,     0,
     739,     0,     0,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,   314,   315,   316,   317,     0,   318,   319,   320,
     321,     0,   322,   323,     0,     0,     0,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,     0,   332,
       0,   333,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,   750,   343,   344,     0,     0,   345,   346,
     347,   348,     0,     0,     0,   349,   350,     0,   754,   755,
     351,     0,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,     0,     0,     0,     0,     0,     0,     0,
       0,   361,   362,   363,     0,     0,   364,     0,   365,     0,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,     0,   379,     0,   380,   381,
     382,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,     0,     0,   389,   390,   391,   392,   393,     0,     0,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
     402,   403,     0,     0,   404,     0,   405,     0,   406,   407,
       0,   408,   409,     0,   410,     0,   411,     0,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,   424,   425,     0,     0,     0,   426,   427,   428,
     429,     0,     0,     0,   430,     0,     0,     0,   431,     0,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,     0,     0,     0,     0,     0,     0,   444,
     445,     0,   446,     0,     0,   447,     0,     0,   448,   449,
       0,     0,     0,   450,     0,     0,   451,   452,     0,   453,
     454,   455,   456,   457,   458,     0,     0,   459,   460,   461,
     462,     0,   463,   464,     0,   465,     0,   466,   467,   468,
     469,     0,   776,   470,   471,     0,  1859,   473,   474,  1860,
       0,     0,     0,     0,     0,   476,   477,   478,     0,     0,
     782,   479,   480,   481,   482,   784,   483,   484,   785,   485,
     486,     0,   487,   488,     0,     0,   489,     0,     0,   490,
       0,   491,     0,   492,   493,   494,     0,     0,     0,     0,
       0,     0,   495,     0,     0,   496,     0,     0,     0,   497,
     498,   499,   500,   501,   502,   503,     0,     0,     0,     0,
       0,     0,   504,   505,     0,   506,   507,   508,     0,     0,
     509,     0,     0,     0,   141,     0,   142,   143,   144,   145,
     146,   147,     0,     0,   148,     0,     0,     0,   149,   802,
     803,   150,     0,   151,   152,   153,   154,   155,   156,   157,
     158,     0,   159,     0,     0,     0,   160,     0,     0,     0,
     161,     0,     0,   162,   163,   164,     0,   165,     0,   166,
     167,     0,     0,   168,     0,     0,   169,   170,     0,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,   198,  2993,   199,   200,   201,   202,   203,     0,   204,
       0,     0,   205,     0,     0,   206,     0,   207,     0,     0,
     208,     0,   209,     0,     0,     0,   210,   211,   212,     0,
       0,   213,     0,     0,     0,     0,   214,   215,     0,     0,
       0,     0,   216,     0,   217,     0,     0,     0,   218,     0,
     219,   220,   221,   222,   223,     0,     0,     0,   224,     0,
       0,   225,   226,   227,     0,     0,     0,   228,     0,   229,
     230,     0,   231,   232,   233,     0,     0,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,     0,   243,
     244,   245,     0,     0,   246,   247,     0,   248,   249,   250,
       0,     0,   251,     0,     0,     0,   252,     0,   253,   523,
     254,     0,   255,   256,   257,   258,   259,     0,   260,     0,
     261,     0,     0,     0,   262,   263,   264,     0,   265,     0,
       0,     0,   266,   267,     0,     0,     0,   268,   269,   270,
     271,   272,     0,     0,   273,   274,   275,  2130,   276,     0,
     277,     0,     0,     0,     0,   278,   279,     0,     0,     0,
     280,     0,   281,   282,     0,   283,   284,     0,     0,     0,
     285,  2131,     0,   286,   287,   288,     0,     0,   289,     0,
       0,   290,   291,     0,  3144,     0,     0,     0,   292,   293,
       0,   294,     0,   295,     0,   296,   297,     0,     0,     0,
       0,     0,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,   314,   315,   316,   317,     0,   318,   319,   320,   321,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,     0,   332,     0,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,     0,     0,   345,   346,   347,
     348,     0,     0,     0,   349,   350,     0,     0,     0,   351,
       0,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,     0,     0,     0,     0,     0,     0,     0,     0,
     361,   362,   363,     0,     0,   364,     0,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,     0,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
       0,     0,   389,   390,   391,   392,   393,     0,     0,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   401,   402,
     403,     0,     0,   404,     0,   405,     0,   406,   407,     0,
     408,   409,     0,   410,     0,   411,     0,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,  2435,     0,     0,   426,   427,   428,   429,
       0,     0,     0,   430,     0,     0,     0,   431,     0,   432,
     433,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,   527,     0,     0,     0,     0,     0,   444,   445,
       0,   446,     0,     0,   447,     0,     0,   448,   449,     0,
       0,     0,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,   457,   458,     0,     0,   459,   460,   461,   462,
       0,   463,   464,     0,   465,     0,   466,   467,   468,   469,
       0,     0,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,     0,     0,   476,   477,   478,     0,     0,     0,
     479,   480,   481,   482,     0,   483,   484,     0,   485,   486,
       0,   487,   488,     0,     0,   489,     0,     0,   490,     0,
     491,     0,   492,   493,   494,     0,     0,     0,     0,     0,
       0,   495,     0,     0,   496,     0,     0,     0,   497,   498,
     499,   500,   501,   502,   503,     0,     0,     0,     0,     0,
       0,   504,   505,     0,   506,   507,   508,     0,     0,   509,
       0,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   148,     0,     0,     0,   149,     0,     0,   150,  3066,
     151,   152,   153,   154,   155,   156,   157,   158,     0,   159,
       0,     0,     0,   160,     0,     0,     0,   161,     0,     0,
     162,   163,   164,     0,   165,     0,   166,   167,     0,     0,
     168,     0,     0,   169,   170,     0,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,   194,   195,   196,     0,   197,   198,  2993,
     199,   200,   201,   202,   203,     0,   204,     0,     0,   205,
       0,     0,   206,     0,   207,     0,     0,   208,     0,   209,
       0,     0,     0,   210,   211,   212,     0,     0,   213,     0,
       0,     0,     0,   214,   215,     0,     0,     0,     0,   216,
       0,   217,     0,     0,     0,   218,     0,   219,   220,   221,
     222,   223,     0,     0,     0,   224,     0,     0,   225,   226,
     227,     0,     0,     0,   228,     0,   229,   230,     0,   231,
     232,   233,     0,     0,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,     0,   243,   244,   245,     0,
       0,   246,   247,     0,   248,   249,   250,     0,     0,   251,
       0,     0,     0,   252,     0,   253,   523,   254,     0,   255,
     256,   257,   258,   259,     0,   260,     0,   261,     0,     0,
       0,   262,   263,   264,     0,   265,     0,     0,     0,   266,
     267,     0,     0,     0,   268,   269,   270,   271,   272,     0,
       0,   273,   274,   275,  2130,   276,     0,   277,     0,     0,
       0,     0,   278,   279,     0,     0,     0,   280,     0,   281,
     282,     0,   283,   284,     0,     0,     0,   285,  2131,     0,
     286,   287,   288,     0,     0,   289,     0,     0,   290,   291,
       0,     0,     0,     0,     0,   292,   293,     0,   294,     0,
     295,     0,   296,   297,     0,     0,     0,     0,     0,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,   314,   315,
     316,   317,     0,   318,   319,   320,   321,     0,   322,   323,
       0,     0,     0,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,     0,   332,     0,   333,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,     0,     0,   345,   346,   347,   348,     0,     0,
       0,   349,   350,     0,     0,     0,   351,     0,   352,   353,
     354,     0,   355,   356,   357,   358,     0,   359,   360,     0,
       0,     0,     0,     0,     0,     0,     0,   361,   362,   363,
       0,     0,   364,     0,   365,     0,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,     0,   376,   377,
     378,     0,   379,     0,   380,   381,   382,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,     0,     0,   389,
     390,   391,   392,   393,     0,     0,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   401,   402,   403,     0,     0,
     404,     0,   405,     0,   406,   407,     0,   408,   409,     0,
     410,     0,   411,     0,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,   424,   425,
       0,     0,     0,   426,   427,   428,   429,     0,     0,     0,
     430,     0,     0,     0,   431,     0,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   527,
       0,     0,     0,     0,     0,   444,   445,     0,   446,     0,
       0,   447,     0,     0,   448,   449,     0,     0,     0,   450,
       0,     0,   451,   452,     0,   453,   454,   455,   456,   457,
     458,     0,     0,   459,   460,   461,   462,     0,   463,   464,
       0,   465,     0,   466,   467,   468,   469,     0,     0,   470,
     471,     0,   472,   473,   474,   475,     0,     0,     0,     0,
       0,   476,   477,   478,     0,     0,     0,   479,   480,   481,
     482,     0,   483,   484,     0,   485,   486,     0,   487,   488,
       0,     0,   489,     0,     0,   490,     0,   491,     0,   492,
     493,   494,     0,     0,     0,     0,     0,     0,   495,     0,
       0,   496,     0,     0,     0,   497,   498,   499,   500,   501,
     502,   503,     0,     0,     0,     0,     0,     0,   504,   505,
       0,   506,   507,   508,     0,     0,   509,     0,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   148,     0,
       0,     0,   149,     0,     0,   150,  3066,   151,   152,   153,
     154,   155,   156,   157,   158,     0,   159,     0,     0,     0,
     160,     0,     0,     0,   161,     0,     0,   162,   163,   164,
       0,   165,     0,   166,   167,     0,     0,   168,     0,     0,
     169,   170,     0,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,   198,     0,   199,   200,   201,
     202,   203,     0,   204,     0,     0,   205,     0,     0,   206,
       0,   207,     0,     0,   208,     0,   209,     0,     0,     0,
     210,   211,   212,     0,     0,   213,     0,     0,     0,     0,
     214,   215,     0,     0,     0,     0,   216,     0,   217,     0,
       0,     0,   218,     0,   219,   220,   221,   222,   223,     0,
       0,     0,   224,     0,     0,   225,   226,   227,     0,     0,
       0,   228,     0,   229,   230,     0,   231,   232,   233,     0,
       0,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,     0,   243,   244,   245,     0,     0,   246,   247,
       0,   248,   249,   250,     0,     0,   251,     0,     0,     0,
     252,     0,   253,     0,   254,     0,   255,   256,   257,   258,
     259,     0,   260,     0,   261,     0,     0,     0,   262,   263,
     264,     0,   265,     0,     0,     0,   266,   267,     0,     0,
       0,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,     0,   276,     0,   277,     0,     0,     0,     0,   278,
     279,     0,     0,     0,   280,     0,   281,   282,     0,   283,
     284,     0,     0,     0,   285,     0,     0,   286,   287,   288,
       0,     0,   289,     0,     0,   290,   291,     0,     0,     0,
       0,     0,   292,   293,     0,   294,     0,   295,     0,   296,
     297,     0,     0,     0,     0,     0,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,   314,   315,   316,   317,     0,
     318,   319,   320,   321,     0,   322,   323,     0,     0,     0,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,     0,   332,     0,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,     0,
       0,   345,   346,   347,   348,     0,     0,     0,   349,   350,
       0,     0,     0,   351,     0,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,     0,     0,     0,     0,
       0,     0,     0,     0,   361,   362,   363,     0,     0,   364,
       0,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,     0,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
       0,     0,   388,     0,     0,     0,   389,   390,   391,   392,
     393,     0,     0,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,   402,   403,     0,     0,   404,     0,   405,
       0,   406,   407,     0,   408,   409,     0,   410,     0,   411,
       0,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,  2435,     0,     0,
     426,   427,   428,   429,     0,     0,     0,   430,     0,     0,
       0,   431,     0,   432,   433,   434,   435,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,     0,     0,
       0,     0,   444,   445,     0,   446,     0,     0,   447,     0,
       0,   448,   449,     0,     0,     0,   450,     0,     0,   451,
     452,     0,   453,   454,   455,   456,   457,   458,     0,     0,
     459,   460,   461,   462,     0,   463,   464,     0,   465,     0,
     466,   467,   468,   469,     0,     0,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,     0,     0,   476,   477,
     478,     0,     0,     0,   479,   480,   481,   482,     0,   483,
     484,     0,   485,   486,     0,   487,   488,     0,     0,   489,
       0,     0,   490,     0,   491,     0,   492,   493,   494,     0,
       0,     0,     0,     0,     0,   495,     0,     0,   496,     0,
       0,     0,   497,   498,   499,   500,   501,   502,   503,     0,
       0,     0,     0,     0,     0,   504,   505,     0,   506,   507,
     508,     0,     0,   509,     0,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   148,  2877,     0,     0,   149,
       0,     0,   150,   803,   151,   152,   153,   154,   155,   156,
     157,   158,     0,   159,     0,     0,     0,   160,     0,     0,
       0,   161,     0,     0,   162,   163,   164,     0,   165,     0,
     166,   167,     0,     0,   168,     0,     0,   169,   170,     0,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,   194,   195,   196,
       0,   197,   198,     0,   199,   200,   201,   202,   203,     0,
     204,     0,     0,   205,     0,     0,   206,     0,   207,     0,
       0,   208,     0,   209,     0,     0,     0,   210,   211,   212,
       0,     0,   213,     0,     0,     0,     0,   214,   215,     0,
       0,     0,     0,   216,     0,   217,     0,     0,     0,   218,
       0,   219,   220,   221,   222,   223,     0,     0,     0,   224,
       0,     0,   225,   226,   227,     0,     0,     0,   228,     0,
     229,   230,     0,   231,   232,   233,     0,     0,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,     0,
     243,   244,   245,     0,     0,   246,   247,     0,   248,   249,
     250,     0,     0,   251,     0,     0,     0,   252,     0,   253,
       0,   254,     0,   255,   256,   257,   258,   259,     0,   260,
       0,   261,     0,     0,     0,   262,   263,   264,     0,   265,
       0,     0,     0,   266,   267,     0,     0,     0,   268,   269,
     270,   271,   272,     0,     0,   273,   274,   275,     0,   276,
       0,   277,     0,     0,     0,     0,   278,   279,     0,     0,
       0,   280,     0,   281,   282,     0,   283,   284,     0,     0,
       0,   285,     0,     0,   286,   287,   288,     0,     0,   289,
       0,     0,   290,   291,     0,     0,     0,     0,     0,   292,
     293,     0,   294,     0,   295,     0,   296,   297,     0,     0,
       0,     0,     0,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,   314,   315,   316,   317,     0,   318,   319,   320,
     321,     0,   322,   323,     0,     0,     0,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,     0,   332,
       0,   333,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,     0,     0,   345,   346,
     347,   348,     0,     0,     0,   349,   350,     0,     0,     0,
     351,     0,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,     0,     0,     0,     0,     0,     0,     0,
       0,   361,   362,   363,     0,     0,   364,     0,   365,     0,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,     0,   379,     0,   380,   381,
     382,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,     0,     0,   389,   390,   391,   392,   393,     0,     0,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
     402,   403,     0,     0,   404,     0,   405,     0,   406,   407,
       0,   408,   409,     0,   410,     0,   411,     0,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,   424,   425,     0,     0,     0,   426,   427,   428,
     429,     0,     0,     0,   430,     0,     0,     0,   431,     0,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,     0,     0,     0,     0,     0,     0,   444,
     445,     0,   446,     0,     0,   447,     0,     0,   448,   449,
       0,     0,     0,   450,     0,     0,   451,   452,     0,   453,
     454,   455,   456,   457,   458,     0,     0,   459,   460,   461,
     462,     0,   463,   464,     0,   465,     0,   466,   467,   468,
     469,     0,     0,   470,   471,     0,   472,   473,   474,   475,
       0,     0,     0,     0,     0,   476,   477,   478,     0,     0,
       0,   479,   480,   481,   482,     0,   483,   484,     0,   485,
     486,     0,   487,   488,     0,     0,   489,     0,     0,   490,
       0,   491,     0,   492,   493,   494,     0,     0,     0,     0,
       0,     0,   495,     0,     0,   496,     0,     0,     0,   497,
     498,   499,   500,   501,   502,   503,     0,     0,     0,     0,
       0,     0,   504,   505,     0,   506,   507,   508,     0,     0,
     509,     0,     0,     0,   141,     0,   142,   143,   144,   145,
     146,   147,     0,  4758,   148,     0,     0,     0,   149,  4759,
     803,   150,     0,   151,   152,   153,   154,   155,   156,   157,
     158,     0,   159,     0,     0,     0,   160,     0,     0,     0,
     161,     0,     0,   162,   163,   164,     0,   165,     0,   166,
     167,     0,     0,   168,     0,     0,   169,   170,     0,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,   198,     0,   199,   200,   201,   202,   203,     0,   204,
       0,     0,   205,     0,     0,   206,     0,   207,     0,     0,
     208,     0,   209,     0,     0,     0,   210,   211,   212,     0,
       0,   213,     0,     0,     0,     0,   214,   215,     0,     0,
       0,     0,   216,     0,   217,     0,     0,     0,   218,     0,
     219,   220,   221,   222,   223,     0,     0,     0,   224,     0,
       0,   225,   226,   227,     0,     0,     0,   228,     0,   229,
     230,     0,   231,   232,   233,     0,     0,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,     0,   243,
     244,   245,     0,     0,   246,   247,     0,   248,   249,   250,
       0,     0,   251,     0,     0,     0,   252,     0,   253,     0,
     254,     0,   255,   256,   257,   258,   259,     0,   260,     0,
     261,     0,     0,     0,   262,   263,   264,     0,   265,     0,
       0,     0,   266,   267,     0,     0,     0,   268,   269,   270,
     271,   272,     0,     0,   273,   274,   275,     0,   276,     0,
     277,     0,     0,     0,     0,   278,   279,     0,     0,     0,
     280,     0,   281,   282,     0,   283,   284,     0,     0,     0,
     285,     0,     0,   286,   287,   288,     0,     0,   289,     0,
       0,   290,   291,     0,     0,     0,     0,     0,   292,   293,
       0,   294,     0,   295,     0,   296,   297,     0,     0,     0,
       0,     0,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,   314,   315,   316,   317,     0,   318,   319,   320,   321,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,     0,   332,     0,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,     0,     0,   345,   346,   347,
     348,     0,     0,     0,   349,   350,     0,     0,     0,   351,
       0,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,     0,     0,     0,     0,     0,     0,     0,     0,
     361,   362,   363,     0,     0,   364,     0,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,     0,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
       0,     0,   389,   390,   391,   392,   393,     0,     0,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   401,   402,
     403,     0,     0,   404,     0,   405,     0,   406,   407,     0,
     408,   409,     0,   410,     0,   411,     0,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,     0,     0,   426,   427,   428,   429,
       0,     0,     0,   430,     0,     0,     0,   431,     0,   432,
     433,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,     0,     0,     0,     0,     0,     0,   444,   445,
       0,   446,     0,     0,   447,     0,     0,   448,   449,     0,
       0,     0,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,   457,   458,     0,     0,   459,   460,   461,   462,
       0,   463,   464,     0,   465,     0,   466,   467,   468,   469,
       0,     0,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,     0,     0,   476,   477,   478,     0,     0,     0,
     479,   480,   481,   482,     0,   483,   484,     0,   485,   486,
       0,   487,   488,     0,     0,   489,     0,     0,   490,     0,
     491,     0,   492,   493,   494,     0,     0,     0,     0,     0,
       0,   495,     0,     0,   496,     0,     0,     0,   497,   498,
     499,   500,   501,   502,   503,     0,     0,     0,     0,     0,
       0,   504,   505,     0,   506,   507,   508,     0,     0,   509,
       0,     0,     0,   141,     0,   142,   143,   144,   145,   146,
     147,  1186,     0,   148,     0,     0,     0,   149,     0,   803,
     150,     0,   151,   152,   153,   154,   155,   156,   157,   158,
       0,   159,     0,     0,     0,   160,     0,     0,     0,   161,
       0,     0,   162,   163,   164,     0,   165,     0,   166,   167,
       0,     0,   168,     0,     0,   169,   170,     0,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
     198,     0,   199,   200,   201,   202,   203,     0,   204,     0,
       0,   205,     0,     0,   206,     0,   207,     0,     0,   208,
       0,   209,     0,     0,     0,   210,   211,   212,     0,     0,
     213,     0,     0,     0,     0,   214,   215,     0,     0,     0,
       0,   216,     0,   217,     0,     0,     0,   218,     0,   219,
     220,   221,   222,   223,     0,     0,     0,   224,     0,     0,
     225,   226,   227,     0,     0,     0,   228,     0,   229,   230,
       0,   231,   232,   233,     0,     0,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,     0,   243,   244,
     245,     0,     0,   246,   247,     0,   248,   249,   250,     0,
       0,   251,     0,     0,     0,   252,     0,   253,     0,   254,
       0,   255,   256,   257,   258,   259,     0,   260,     0,   261,
       0,     0,     0,   262,   263,   264,     0,   265,     0,     0,
       0,   266,   267,     0,     0,     0,   268,   269,   270,   271,
     272,     0,     0,   273,   274,   275,     0,   276,     0,   277,
       0,     0,     0,     0,   278,   279,     0,  1402,     0,   280,
       0,   281,   282,     0,   283,   284,     0,     0,     0,   285,
       0,     0,   286,   287,   288,     0,     0,   289,     0,     0,
     290,   291,     0,     0,     0,     0,     0,   292,   293,     0,
     294,     0,   295,     0,   296,   297,     0,     0,     0,     0,
       0,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
     314,   315,   316,   317,     0,   318,   319,   320,   321,     0,
     322,   323,     0,     0,     0,     0,   324,   325,   326,   327,
     328,   329,     0,     0,   330,   331,     0,   332,     0,   333,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,     0,   343,   344,     0,     0,   345,   346,   347,   348,
       0,     0,     0,   349,   350,     0,     0,     0,   351,     0,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,     0,     0,     0,     0,     0,     0,     0,     0,   361,
     362,   363,     0,     0,   364,     0,   365,     0,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,     0,
     376,   377,   378,     0,   379,     0,   380,   381,   382,   383,
     384,     0,   385,   386,   387,     0,     0,   388,     0,     0,
       0,   389,   390,   391,   392,   393,     0,     0,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,   402,   403,
       0,     0,   404,     0,   405,     0,   406,   407,     0,   408,
     409,     0,   410,     0,   411,     0,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     424,   425,     0,     0,     0,   426,   427,   428,   429,     0,
       0,     0,   430,     0,     0,     0,   431,     0,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,     0,     0,     0,     0,     0,     0,   444,   445,     0,
     446,     0,     0,   447,     0,     0,   448,   449,     0,     0,
       0,   450,     0,     0,   451,   452,     0,   453,   454,   455,
     456,   457,   458,     0,     0,   459,   460,   461,   462,     0,
     463,   464,     0,   465,     0,   466,   467,   468,   469,     0,
       0,   470,   471,     0,   472,   473,   474,   475,     0,     0,
       0,     0,     0,   476,   477,   478,     0,     0,     0,   479,
     480,   481,   482,     0,   483,   484,     0,   485,   486,     0,
     487,   488,     0,     0,   489,     0,     0,   490,     0,   491,
       0,   492,   493,   494,     0,     0,     0,     0,     0,     0,
     495,     0,     0,   496,     0,     0,     0,   497,   498,   499,
     500,   501,   502,   503,     0,     0,     0,     0,     0,     0,
     504,   505,     0,   506,   507,   508,     0,     0,   509,     0,
     141,     0,   142,   143,   144,   145,   146,   147,     0,     0,
     148,     0,     0,     0,   149,     0,     0,   150,   561,   151,
     152,   153,   154,   155,   156,   157,   158,     0,   159,     0,
       0,     0,   160,     0,     0,     0,   161,     0,     0,   162,
     163,   164,     0,   165,     0,   166,   167,     0,     0,   168,
       0,     0,   169,   170,     0,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,   198,     0,   199,
     200,   201,   202,   203,     0,   204,     0,     0,   205,     0,
       0,   206,     0,   207,     0,     0,   208,     0,   209,     0,
       0,     0,   210,   211,   212,     0,     0,   213,     0,     0,
       0,     0,   214,   215,     0,     0,     0,     0,   216,     0,
     217,     0,     0,     0,   218,     0,   219,   220,   221,   222,
     223,     0,     0,     0,   224,     0,     0,   225,   226,   227,
       0,     0,     0,   228,     0,   229,   230,     0,   231,   232,
     233,     0,     0,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,     0,   243,   244,   245,     0,     0,
     246,   247,     0,   248,   249,   250,     0,     0,   251,     0,
       0,     0,   252,     0,   253,     0,   254,     0,   255,   256,
     257,   258,   259,     0,   260,     0,   261,     0,     0,     0,
     262,   263,   264,     0,   265,     0,     0,     0,   266,   267,
       0,     0,     0,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,     0,   276,     0,   277,     0,     0,     0,
       0,   278,   279,     0,     0,     0,   280,     0,   281,   282,
       0,   283,   284,     0,     0,     0,   285,     0,     0,   286,
     287,   288,     0,     0,   289,     0,     0,   290,   291,     0,
       0,     0,     0,     0,   292,   293,     0,   294,     0,   295,
       0,   296,   297,     0,     0,     0,     0,     0,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,     0,   314,   315,   316,
     317,     0,   318,   319,   320,   321,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,     0,   332,     0,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,     0,     0,   345,   346,   347,   348,     0,     0,     0,
     349,   350,     0,     0,     0,   351,     0,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,     0,     0,
       0,     0,     0,     0,     0,     0,   361,   362,   363,     0,
       0,   364,     0,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
       0,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,     0,     0,   389,   390,
     391,   392,   393,     0,     0,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,   402,   403,     0,     0,   404,
       0,   405,     0,   406,   407,     0,   408,   409,     0,   410,
       0,   411,     0,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
       0,     0,   426,   427,   428,   429,     0,     0,     0,   430,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,     0,     0,
       0,     0,     0,     0,   444,   445,     0,   446,     0,     0,
     447,     0,     0,   448,   449,     0,     0,     0,   450,     0,
       0,   451,   452,     0,   453,   454,   455,   456,   457,   458,
       0,     0,   459,   460,   461,   462,     0,   463,   464,     0,
     465,     0,   466,   467,   468,   469,     0,     0,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,     0,     0,
     476,   477,   478,     0,     0,     0,   479,   480,   481,   482,
       0,   483,   484,     0,   485,   486,     0,   487,   488,     0,
       0,   489,     0,     0,   490,     0,   491,     0,   492,   493,
     494,     0,     0,     0,     0,     0,     0,   495,     0,     0,
     496,     0,     0,     0,   497,   498,   499,   500,   501,   502,
     503,     0,     0,     0,     0,     0,     0,   504,   505,     0,
     506,   507,   508,     0,     0,   509,     0,     0,     0,     0,
       0,     0,  2384,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   148,     0,   561,     0,   149,     0,     0,
     150,     0,   151,   152,   153,   154,   155,   156,   157,   158,
       0,   159,     0,     0,     0,   160,     0,     0,     0,   161,
       0,     0,   162,   163,   164,     0,   165,     0,   166,   167,
       0,     0,   168,     0,     0,   169,   170,     0,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
     198,     0,   199,   200,   201,   202,   203,     0,   204,     0,
       0,   205,     0,     0,   206,     0,   207,     0,     0,   208,
       0,   209,     0,     0,     0,   210,   211,   212,     0,     0,
     213,     0,     0,     0,     0,   214,   215,     0,     0,     0,
       0,   216,     0,   217,     0,     0,     0,   218,     0,   219,
     220,   221,   222,   223,     0,     0,     0,   224,     0,     0,
     225,   226,   227,     0,     0,     0,   228,     0,   229,   230,
       0,   231,   232,   233,     0,     0,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,     0,   243,   244,
     245,     0,     0,   246,   247,     0,   248,   249,   250,     0,
       0,   251,     0,     0,     0,   252,     0,   253,     0,   254,
       0,   255,   256,   257,   258,   259,     0,   260,     0,   261,
       0,     0,     0,   262,   263,   264,     0,   265,     0,     0,
       0,   266,   267,     0,     0,     0,   268,   269,   270,   271,
     272,     0,     0,   273,   274,   275,     0,   276,     0,   277,
       0,     0,     0,     0,   278,   279,     0,     0,     0,   280,
       0,   281,   282,     0,   283,   284,     0,     0,     0,   285,
       0,     0,   286,   287,   288,     0,     0,   289,     0,     0,
     290,   291,     0,     0,     0,     0,     0,   292,   293,     0,
     294,     0,   295,     0,   296,   297,     0,     0,     0,     0,
       0,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
     314,   315,   316,   317,     0,   318,   319,   320,   321,     0,
     322,   323,     0,     0,     0,     0,   324,   325,   326,   327,
     328,   329,     0,     0,   330,   331,     0,   332,     0,   333,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,     0,   343,   344,     0,     0,   345,   346,   347,   348,
       0,     0,     0,   349,   350,     0,     0,     0,   351,     0,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,     0,     0,     0,     0,     0,     0,     0,     0,   361,
     362,   363,     0,     0,   364,     0,   365,     0,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,     0,
     376,   377,   378,     0,   379,     0,   380,   381,   382,   383,
     384,     0,   385,   386,   387,     0,     0,   388,     0,     0,
       0,   389,   390,   391,   392,   393,     0,     0,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,   402,   403,
       0,     0,   404,     0,   405,     0,   406,   407,     0,   408,
     409,     0,   410,     0,   411,     0,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     424,   425,     0,     0,     0,   426,   427,   428,   429,     0,
       0,     0,   430,     0,     0,     0,   431,     0,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,     0,     0,     0,     0,     0,     0,   444,   445,     0,
     446,     0,     0,   447,     0,     0,   448,   449,     0,     0,
       0,   450,     0,     0,   451,   452,     0,   453,   454,   455,
     456,   457,   458,     0,     0,   459,   460,   461,   462,     0,
     463,   464,     0,   465,     0,   466,   467,   468,   469,     0,
       0,   470,   471,     0,   472,   473,   474,   475,     0,     0,
       0,     0,     0,   476,   477,   478,     0,     0,     0,   479,
     480,   481,   482,     0,   483,   484,     0,   485,   486,     0,
     487,   488,     0,     0,   489,     0,     0,   490,     0,   491,
       0,   492,   493,   494,     0,     0,     0,     0,     0,     0,
     495,     0,     0,   496,     0,     0,     0,   497,   498,   499,
     500,   501,   502,   503,     0,     0,     0,     0,     0,     0,
     504,   505,     0,   506,   507,   508,     0,     0,   509,     0,
       0,     0,   141,     0,   142,   143,   144,   145,   146,   147,
    3065,     0,   148,     0,     0,     0,   149,     0,  3066,   150,
       0,   151,   152,   153,   154,   155,   156,   157,   158,     0,
     159,     0,     0,     0,   160,     0,     0,     0,   161,     0,
       0,   162,   163,   164,     0,   165,     0,   166,   167,     0,
       0,   168,     0,     0,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,   198,
       0,   199,   200,   201,   202,   203,     0,   204,     0,     0,
     205,     0,     0,   206,     0,   207,     0,     0,   208,     0,
     209,     0,     0,     0,   210,   211,   212,     0,     0,   213,
       0,     0,     0,     0,   214,   215,     0,     0,     0,     0,
     216,     0,   217,     0,     0,     0,   218,     0,   219,   220,
     221,   222,   223,     0,     0,     0,   224,     0,     0,   225,
     226,   227,     0,     0,     0,   228,     0,   229,   230,     0,
     231,   232,   233,     0,     0,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,     0,   243,   244,   245,
       0,     0,   246,   247,     0,   248,   249,   250,     0,     0,
     251,     0,     0,     0,   252,     0,   253,     0,   254,     0,
     255,   256,   257,   258,   259,     0,   260,     0,   261,     0,
       0,     0,   262,   263,   264,     0,   265,     0,     0,     0,
     266,   267,     0,     0,     0,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,     0,   276,     0,   277,     0,
       0,     0,     0,   278,   279,     0,     0,     0,   280,     0,
     281,   282,     0,   283,   284,     0,     0,     0,   285,     0,
       0,   286,   287,   288,     0,     0,   289,     0,     0,   290,
     291,     0,     0,     0,     0,     0,   292,   293,     0,   294,
       0,   295,     0,   296,   297,     0,     0,     0,     0,     0,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,
     315,   316,   317,     0,   318,   319,   320,   321,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,     0,   332,     0,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,     0,     0,   345,   346,   347,   348,     0,
       0,     0,   349,   350,     0,     0,     0,   351,     0,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
       0,     0,     0,     0,     0,     0,     0,     0,   361,   362,
     363,     0,     0,   364,     0,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,     0,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,     0,     0,   388,     0,     0,     0,
     389,   390,   391,   392,   393,     0,     0,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   401,   402,   403,     0,
       0,   404,     0,   405,     0,   406,   407,     0,   408,   409,
       0,   410,     0,   411,     0,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,     0,     0,   426,   427,   428,   429,     0,     0,
       0,   430,     0,     0,     0,   431,     0,   432,   433,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,     0,     0,     0,     0,   444,   445,     0,   446,
       0,     0,   447,     0,     0,   448,   449,     0,     0,     0,
     450,     0,     0,   451,   452,     0,   453,   454,   455,   456,
     457,   458,     0,     0,   459,   460,   461,   462,     0,   463,
     464,     0,   465,     0,   466,   467,   468,   469,     0,     0,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
       0,     0,   476,   477,   478,     0,     0,     0,   479,   480,
     481,   482,     0,   483,   484,     0,   485,   486,     0,   487,
     488,     0,     0,   489,     0,     0,   490,     0,   491,     0,
     492,   493,   494,     0,     0,     0,     0,     0,     0,   495,
       0,     0,   496,     0,     0,     0,   497,   498,   499,   500,
     501,   502,   503,     0,     0,     0,     0,     0,     0,   504,
     505,     0,   506,   507,   508,     0,     0,   509,     0,     0,
       0,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   148,     0,     0,     0,   149,  4759,   803,   150,     0,
     151,   152,   153,   154,   155,   156,   157,   158,     0,   159,
       0,     0,     0,   160,     0,     0,     0,   161,     0,     0,
     162,   163,   164,     0,   165,     0,   166,   167,     0,     0,
     168,     0,     0,   169,   170,     0,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,   194,   195,   196,     0,   197,   198,     0,
     199,   200,   201,   202,   203,     0,   204,     0,     0,   205,
       0,     0,   206,     0,   207,     0,     0,   208,     0,   209,
       0,     0,     0,   210,   211,   212,     0,     0,   213,     0,
       0,     0,     0,   214,   215,     0,     0,     0,     0,   216,
       0,   217,     0,     0,     0,   218,     0,   219,   220,   221,
     222,   223,     0,     0,     0,   224,     0,     0,   225,   226,
     227,     0,     0,     0,   228,     0,   229,   230,     0,   231,
     232,   233,     0,     0,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,     0,   243,   244,   245,     0,
       0,   246,   247,     0,   248,   249,   250,     0,     0,   251,
       0,     0,     0,   252,     0,   253,     0,   254,     0,   255,
     256,   257,   258,   259,     0,   260,     0,   261,     0,     0,
       0,   262,   263,   264,     0,   265,     0,     0,     0,   266,
     267,     0,     0,     0,   268,   269,   270,   271,   272,     0,
       0,   273,   274,   275,     0,   276,     0,   277,     0,     0,
       0,     0,   278,   279,     0,     0,     0,   280,     0,   281,
     282,     0,   283,   284,     0,     0,     0,   285,     0,     0,
     286,   287,   288,     0,     0,   289,     0,     0,   290,   291,
       0,     0,     0,     0,     0,   292,   293,     0,   294,     0,
     295,     0,   296,   297,     0,     0,     0,     0,     0,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,   314,   315,
     316,   317,     0,   318,   319,   320,   321,     0,   322,   323,
       0,     0,     0,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,     0,   332,     0,   333,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,     0,     0,   345,   346,   347,   348,     0,     0,
       0,   349,   350,     0,     0,     0,   351,     0,   352,   353,
     354,     0,   355,   356,   357,   358,     0,   359,   360,     0,
       0,     0,     0,     0,     0,     0,     0,   361,   362,   363,
       0,     0,   364,     0,   365,     0,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,     0,   376,   377,
     378,     0,   379,     0,   380,   381,   382,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,     0,     0,   389,
     390,   391,   392,   393,     0,     0,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   401,   402,   403,     0,     0,
     404,     0,   405,     0,   406,   407,     0,   408,   409,     0,
     410,     0,   411,     0,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,   424,   425,
       0,     0,     0,   426,   427,   428,   429,     0,     0,     0,
     430,     0,     0,     0,   431,     0,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,     0,
       0,     0,     0,     0,     0,   444,   445,     0,   446,     0,
       0,   447,     0,     0,   448,   449,     0,     0,     0,   450,
       0,     0,   451,   452,     0,   453,   454,   455,   456,   457,
     458,     0,     0,   459,   460,   461,   462,     0,   463,   464,
       0,   465,     0,   466,   467,   468,   469,     0,     0,   470,
     471,     0,   472,   473,   474,   475,     0,     0,     0,     0,
       0,   476,   477,   478,     0,     0,     0,   479,   480,   481,
     482,     0,   483,   484,     0,   485,   486,     0,   487,   488,
       0,     0,   489,     0,     0,   490,     0,   491,     0,   492,
     493,   494,     0,     0,     0,     0,     0,     0,   495,     0,
       0,   496,     0,     0,     0,   497,   498,   499,   500,   501,
     502,   503,     0,     0,     0,     0,     0,     0,   504,   505,
       0,   506,   507,   508,     0,     0,   509,     0,   141,     0,
     142,   143,   144,   145,   146,   147,     0,     0,   148,     0,
       0,     0,   149,     0,     0,   150,   561,   151,   152,   153,
     154,   155,   156,   157,   158,     0,   159,     0,     0,     0,
     160,     0,     0,     0,   161,     0,     0,   162,   163,   164,
       0,   165,     0,   166,   167,     0,     0,   168,     0,     0,
     169,   170,     0,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,   198,     0,   199,   200,   201,
     202,   203,     0,   204,     0,     0,   205,     0,     0,   206,
       0,   207,     0,     0,   208,     0,   209,     0,     0,     0,
     210,   211,   212,     0,     0,   213,     0,     0,     0,     0,
     214,   215,     0,     0,     0,     0,   216,     0,   217,     0,
       0,     0,   218,     0,   219,   220,   221,   222,   223,     0,
       0,     0,   224,     0,     0,   225,   226,   227,     0,     0,
       0,   228,     0,   229,   230,     0,   231,   232,   233,     0,
       0,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,     0,   243,   627,   245,     0,     0,   246,   247,
       0,   248,   249,   250,     0,     0,   251,     0,     0,     0,
     252,     0,   253,     0,   254,     0,   255,   256,   257,   258,
     259,     0,   260,     0,   261,     0,     0,     0,   262,   263,
     264,     0,   265,     0,     0,     0,   266,   267,     0,     0,
       0,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,     0,   276,     0,   277,     0,     0,     0,     0,   278,
     279,     0,     0,     0,   280,     0,   281,   282,     0,   283,
     284,     0,     0,     0,   285,     0,     0,   286,   287,   288,
       0,     0,   289,     0,     0,   290,   291,     0,     0,     0,
       0,     0,   292,   293,     0,   294,     0,   295,     0,   296,
     297,     0,     0,     0,     0,     0,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,   314,   315,   316,   317,     0,
     318,   319,   320,   321,     0,   322,   323,     0,     0,     0,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,     0,   332,     0,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,     0,
       0,   345,   346,   347,   348,     0,     0,     0,   349,   350,
       0,     0,     0,   351,     0,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,     0,     0,     0,     0,
       0,     0,     0,     0,   361,   362,   363,     0,     0,   364,
       0,   365,     0,   628,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,     0,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
       0,     0,   388,     0,     0,     0,   389,   390,   391,   392,
     393,     0,     0,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,   402,   403,     0,     0,   404,     0,   405,
       0,   406,   407,     0,   408,   409,     0,   410,     0,   411,
       0,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,     0,     0,
     426,   427,   428,   429,     0,     0,     0,   430,     0,     0,
       0,   431,     0,   432,   433,   434,   435,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,     0,     0,
       0,     0,   444,   445,     0,   446,     0,     0,   447,     0,
       0,   448,   449,     0,     0,     0,   450,     0,     0,   451,
     452,     0,   453,   454,   455,   456,   457,   458,     0,     0,
     459,   460,   461,   462,     0,   463,   464,     0,   465,     0,
     466,   467,   468,   469,     0,     0,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,     0,     0,   476,   477,
     478,     0,     0,     0,   479,   480,   481,   482,     0,   483,
     484,     0,   485,   486,     0,   487,   488,     0,     0,   489,
       0,     0,   490,     0,   491,     0,   492,   493,   494,     0,
       0,     0,     0,     0,     0,   495,     0,     0,   496,     0,
       0,     0,   497,   498,   499,   500,   501,   502,   503,     0,
       0,     0,     0,     0,     0,   504,   505,     0,   506,   507,
     508,     0,     0,   509,     0,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   148,     0,     0,     0,   149,
       0,     0,   150,   561,   151,   152,   153,   154,   155,   156,
     157,   158,     0,   159,     0,     0,     0,   160,     0,     0,
       0,   161,     0,     0,   162,   163,   164,     0,   165,     0,
     166,   167,     0,     0,   168,     0,     0,   169,   170,     0,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,   194,   195,   196,
       0,   197,   198,     0,   199,   200,   201,   202,   203,     0,
     204,     0,     0,   205,     0,     0,   206,     0,   207,     0,
       0,   208,     0,   209,     0,     0,     0,   210,   211,   212,
       0,     0,   213,     0,     0,     0,     0,   214,   215,     0,
       0,     0,     0,   216,     0,   217,     0,     0,     0,   218,
       0,   219,   220,   221,   222,   223,     0,     0,     0,   224,
       0,     0,   225,   226,   227,     0,     0,     0,   228,     0,
     229,   230,     0,   231,   232,   233,     0,     0,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,     0,
     243,   244,   245,     0,     0,   246,   247,     0,   248,   249,
     250,     0,     0,   251,     0,     0,     0,   252,     0,   253,
       0,   254,     0,   255,   256,   257,   258,   259,     0,   260,
       0,   261,     0,     0,     0,   262,   263,   264,     0,   265,
       0,     0,     0,   266,   267,     0,     0,     0,   268,   269,
     270,   271,   272,     0,     0,   273,   274,   275,     0,   276,
       0,   277,     0,     0,     0,     0,   278,   279,     0,     0,
       0,   280,     0,   281,   282,     0,   283,   284,     0,     0,
       0,   285,     0,     0,   286,   287,   288,     0,     0,   289,
       0,     0,   290,   291,     0,     0,     0,     0,     0,   292,
     293,     0,   294,     0,   295,     0,   296,   297,     0,     0,
       0,     0,     0,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,   314,   315,   316,   317,     0,   318,   319,   320,
     321,     0,   322,   323,     0,     0,     0,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,     0,   332,
       0,   333,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,     0,     0,   345,   346,
     347,   348,     0,     0,     0,   349,   350,     0,     0,     0,
     351,     0,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,     0,     0,     0,     0,     0,     0,     0,
       0,   361,   362,   363,     0,     0,   364,     0,   365,     0,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,     0,   379,     0,   380,   381,
     382,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,     0,     0,   389,   390,   391,   392,   393,     0,     0,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
     402,   403,     0,     0,   404,     0,   405,     0,   406,   407,
       0,   408,   409,     0,   410,     0,   411,     0,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,   424,   425,     0,     0,     0,   426,   427,   428,
     429,     0,     0,     0,   430,     0,     0,     0,   431,     0,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,     0,     0,     0,     0,     0,     0,   444,
     445,     0,   446,     0,     0,   447,     0,     0,   448,   449,
       0,     0,     0,   450,     0,     0,   451,   452,     0,   453,
     454,   455,   456,   457,   458,     0,     0,   459,   460,   461,
     462,     0,   463,   464,     0,   465,     0,   466,   467,   468,
     469,     0,     0,   470,   471,     0,   472,   473,   474,   475,
       0,     0,     0,     0,     0,   476,   477,   478,     0,     0,
       0,   479,   480,   481,   482,     0,   483,   484,     0,   485,
     486,     0,   487,   488,     0,     0,   489,     0,     0,   490,
       0,   491,     0,   492,   493,   494,     0,     0,     0,     0,
       0,     0,   495,     0,     0,   496,     0,     0,     0,   497,
     498,   499,   500,   501,   502,   503,     0,     0,     0,     0,
       0,     0,   504,   505,     0,   506,   507,   508,     0,     0,
     509,     0,   141,     0,   142,   143,   144,   145,   146,   147,
       0,     0,   148,     0,     0,     0,   149,     0,     0,   150,
     803,   151,   152,   153,   154,   155,   156,   157,   158,     0,
     159,     0,     0,     0,   160,     0,     0,     0,   161,     0,
       0,   162,   163,   164,     0,   165,     0,   166,   167,     0,
       0,   168,     0,     0,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,   198,
       0,   199,   200,   201,   202,   203,     0,   204,     0,     0,
     205,     0,     0,   206,     0,   207,     0,     0,   208,     0,
     209,     0,     0,     0,   210,   211,   212,     0,     0,   213,
       0,     0,     0,     0,   214,   215,     0,     0,     0,     0,
     216,     0,   217,     0,     0,     0,   218,     0,   219,   220,
     221,   222,   223,     0,     0,     0,   224,     0,     0,   225,
     226,   227,     0,     0,     0,   228,     0,   229,   230,     0,
     231,   232,   233,     0,     0,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,     0,   243,   244,   245,
       0,     0,   246,   247,     0,   248,   249,   250,     0,     0,
     251,     0,     0,     0,   252,     0,   253,     0,   254,     0,
     255,   256,   257,   258,   259,     0,   260,     0,   261,     0,
       0,     0,   262,   263,   264,     0,   265,     0,     0,     0,
     266,   267,     0,     0,     0,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,     0,   276,     0,   277,     0,
       0,     0,     0,   278,   279,     0,     0,     0,   280,     0,
     281,   282,     0,   283,   284,     0,     0,     0,   285,     0,
       0,   286,   287,   288,     0,     0,   289,     0,     0,   290,
     291,     0,     0,     0,     0,     0,   292,   293,     0,   294,
       0,   295,     0,   296,   297,     0,     0,     0,     0,     0,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,
     315,   316,   317,     0,   318,   319,   320,   321,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,     0,   332,     0,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,     0,     0,   345,   346,   347,   348,     0,
       0,     0,   349,   350,     0,     0,     0,   351,     0,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
       0,     0,     0,     0,     0,     0,     0,     0,   361,   362,
     363,     0,     0,   364,     0,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,     0,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,     0,     0,   388,     0,     0,     0,
     389,   390,   391,   392,   393,     0,     0,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   401,   402,   403,     0,
       0,   404,     0,   405,     0,   406,   407,     0,   408,   409,
       0,   410,     0,   411,     0,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,     0,     0,   426,   427,   428,   429,     0,     0,
       0,   430,     0,     0,     0,   431,     0,   432,   433,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,     0,     0,     0,     0,   444,   445,     0,   446,
       0,     0,   447,     0,     0,   448,   449,     0,     0,     0,
     450,     0,     0,   451,   452,     0,   453,   454,   455,   456,
     457,   458,     0,     0,   459,   460,   461,   462,     0,   463,
     464,     0,   465,     0,   466,   467,   468,   469,     0,     0,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
       0,     0,   476,   477,   478,     0,     0,     0,   479,   480,
     481,   482,     0,   483,   484,     0,   485,   486,     0,   487,
     488,     0,     0,   489,     0,     0,   490,     0,   491,     0,
     492,   493,   494,     0,     0,     0,     0,     0,     0,   495,
       0,     0,   496,     0,     0,     0,   497,   498,   499,   500,
     501,   502,   503,     0,     0,     0,     0,     0,     0,   504,
     505,     0,   506,   507,   508,     0,     0,   509,     0,   141,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   148,
       0,     0,     0,   149,     0,     0,   150,  3066,   151,   152,
     153,   154,   155,   156,   157,   158,     0,   159,     0,     0,
       0,   160,     0,     0,     0,   161,     0,     0,   162,   163,
     164,     0,   165,     0,   166,   167,     0,     0,   168,     0,
       0,   169,   170,     0,   171,   945,   946,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,   182,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,   192,
     193,   194,   195,   196,     0,   197,   198,     0,   199,   200,
     201,   202,   203,     0,   204,     0,     0,   205,     0,     0,
     206,     0,   207,     0,     0,   208,     0,   209,     0,     0,
       0,   210,   211,   212,     0,     0,   213,     0,     0,     0,
       0,   214,   215,     0,     0,     0,   947,   216,     0,   217,
       0,     0,     0,   218,     0,   219,   220,   221,   222,   223,
       0,     0,     0,   224,     0,     0,   225,   226,   227,     0,
       0,     0,   228,     0,   229,   230,     0,   231,   232,   233,
       0,     0,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,     0,   243,   244,   245,     0,     0,   246,
     247,     0,   248,   249,   250,     0,     0,   251,     0,     0,
       0,   252,     0,   253,     0,   254,     0,   255,   256,   257,
     258,   259,     0,   948,     0,   261,     0,     0,     0,   262,
     263,   264,     0,   265,     0,     0,     0,   266,   267,     0,
       0,     0,   268,   269,   270,   271,   272,     0,     0,   273,
     274,   275,     0,   276,     0,   277,     0,     0,     0,     0,
     278,   279,     0,     0,     0,   280,     0,   281,   282,     0,
     283,   284,     0,     0,     0,   285,     0,     0,   286,   287,
     288,     0,     0,   289,     0,     0,   290,   291,     0,     0,
       0,     0,     0,   292,   293,     0,   949,     0,   295,     0,
     296,   297,     0,     0,     0,     0,     0,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,   314,   315,   316,   317,
       0,   318,   319,   320,   321,     0,   322,   323,     0,     0,
       0,     0,   324,   325,   326,   327,   328,   329,     0,     0,
     330,   331,     0,   332,     0,   333,     0,   334,   335,   336,
     337,   338,   339,   950,   341,   342,     0,     0,   343,   344,
       0,     0,   345,   346,   347,   348,     0,     0,     0,   349,
     350,     0,     0,     0,   351,     0,   352,   353,   354,     0,
     355,   356,   357,   358,     0,   359,   360,     0,     0,     0,
       0,     0,     0,     0,     0,   361,   362,   363,     0,     0,
     364,     0,   365,     0,   366,   367,   951,   369,   370,   371,
     372,   373,   374,   375,     0,     0,   376,   377,   378,     0,
     379,     0,   380,   381,   382,   383,   384,     0,   385,   386,
     387,     0,     0,   388,     0,     0,     0,   389,   390,   391,
     392,   393,     0,     0,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   401,   402,   403,     0,     0,   404,     0,
     405,     0,   406,   407,     0,   408,   409,     0,   410,     0,
     411,     0,     0,   952,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,   424,   425,     0,     0,
       0,   426,   427,   953,   429,     0,     0,     0,   430,     0,
       0,     0,   431,     0,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,     0,     0,     0,
       0,     0,     0,   444,   445,     0,   446,     0,     0,   447,
       0,     0,   448,   449,     0,     0,     0,   450,     0,     0,
     451,   452,     0,   453,   454,   455,   456,   457,   458,     0,
       0,   459,   460,   461,   462,     0,   463,   464,     0,   465,
       0,   466,   467,   468,   469,     0,     0,   470,   471,     0,
     472,   473,   474,   475,     0,     0,     0,     0,     0,   954,
     477,   478,     0,     0,     0,   479,   480,   481,   482,     0,
     483,   484,     0,   485,   486,     0,   487,   488,     0,     0,
     489,     0,     0,   490,     0,   491,     0,   492,   493,   494,
       0,     0,     0,     0,     0,     0,   495,     0,     0,   496,
       0,     0,     0,   497,   498,   499,   500,   501,   502,   503,
       0,     0,     0,     0,     0,     0,   504,   505,     0,   506,
     507,   508,     0,     0,   509,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   148,     0,     0,     0,   149,
       0,     0,   150,   955,   151,   152,   153,   154,   155,   156,
     157,   158,     0,   159,     0,     0,     0,   160,     0,     0,
       0,   161,     0,     0,   162,   163,   164,     0,   165,     0,
     166,   167,     0,     0,   168,     0,     0,   169,   170,     0,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,   194,   195,   196,
       0,   197,   198,     0,   199,   200,   201,   202,   203,     0,
     204,     0,     0,   205,     0,     0,   206,     0,   207,     0,
       0,   208,     0,   209,     0,     0,     0,   210,   211,   212,
       0,     0,   213,     0,     0,     0,     0,   214,   215,     0,
       0,     0,     0,   216,     0,   217,     0,     0,     0,   218,
       0,   219,   220,   221,   222,   223,     0,     0,     0,   224,
       0,     0,   225,   226,   227,     0,     0,     0,   228,     0,
     229,   230,     0,   231,   232,   233,     0,     0,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,     0,
     243,   244,   245,     0,     0,   246,   247,     0,   248,   249,
     250,     0,     0,   251,     0,     0,     0,   252,     0,   253,
       0,   254,     0,   255,   256,   257,   258,   259,     0,   260,
       0,   261,     0,     0,     0,   262,   263,   264,     0,   265,
       0,     0,     0,   266,   267,     0,     0,     0,   268,   269,
     270,   271,   272,     0,     0,   273,   274,   275,     0,   276,
       0,   277,     0,     0,     0,     0,   278,   279,     0,     0,
       0,   280,     0,   281,   282,     0,   283,   284,     0,     0,
       0,   285,     0,     0,   286,   287,   288,     0,     0,   289,
       0,     0,   290,   291,   639,     0,     0,     0,     0,   292,
     293,     0,   294,     0,   295,     0,   296,   297,     0,     0,
       0,     0,     0,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,   314,   315,   316,   317,     0,   318,   319,   320,
     321,     0,   322,   323,     0,     0,     0,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,     0,   332,
       0,   333,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,     0,     0,   345,   346,
     347,   348,     0,     0,     0,   349,   350,     0,     0,     0,
     351,     0,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,     0,     0,     0,     0,     0,     0,     0,
       0,   361,   362,   363,     0,     0,   364,     0,   365,     0,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,     0,   379,     0,   380,   381,
     382,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,     0,     0,   389,   390,   391,   392,   393,     0,     0,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
     402,   403,     0,     0,   404,     0,   405,     0,   406,   407,
       0,   408,   409,     0,   410,     0,   411,     0,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,   424,   425,     0,     0,     0,   426,   427,   428,
     429,     0,     0,     0,   430,     0,     0,     0,   431,     0,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,     0,     0,     0,     0,     0,     0,   444,
     445,     0,   446,     0,     0,   447,     0,     0,   448,   449,
       0,     0,     0,   450,     0,     0,   451,   452,     0,   453,
     454,   455,   456,   457,   458,     0,     0,   459,   460,   461,
     462,     0,   463,   464,     0,   465,     0,   466,   467,   468,
     469,     0,   138,   470,   471,     0,   472,   473,   474,   475,
       0,     0,     0,     0,     0,   476,   477,   478,     0,     0,
       0,   479,   480,   481,   482,     0,   483,   484,     0,   485,
     486,     0,   487,   488,     0,     0,   489,     0,     0,   490,
       0,   491,     0,   492,   493,   494,     0,     0,     0,     0,
       0,     0,   495,     0,     0,   496,     0,     0,     0,   497,
     498,   499,   500,   501,   502,   503,     0,     0,     0,     0,
       0,     0,   504,   505,     0,   506,   507,   508,     0,     0,
     509,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   148,     0,     0,     0,   149,     0,     0,   150,  1455,
     151,   152,   153,   154,   155,   156,   157,   158,     0,   159,
       0,     0,     0,   160,     0,     0,     0,   161,     0,     0,
     162,   163,   164,     0,   165,     0,   166,   167,     0,     0,
     168,     0,     0,   169,   170,     0,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,   194,   195,   196,     0,   197,   198,     0,
     199,   200,   201,   202,   203,     0,   204,     0,     0,   205,
       0,     0,   206,     0,   207,     0,     0,   208,     0,   209,
       0,     0,     0,   210,   211,   212,     0,     0,   213,     0,
       0,     0,     0,   214,   215,     0,     0,     0,     0,   216,
       0,   217,     0,     0,     0,   218,     0,   219,   220,   221,
     222,   223,     0,     0,     0,   224,     0,     0,   225,   226,
     227,     0,     0,     0,   228,     0,   229,   230,     0,   231,
     232,   233,     0,     0,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,     0,   243,   244,   245,     0,
       0,   246,   247,     0,   248,   249,   250,     0,     0,   251,
       0,     0,     0,   252,     0,   253,     0,   254,     0,   255,
     256,   257,   258,   259,     0,   260,     0,   261,     0,     0,
       0,   262,   263,   264,     0,   265,     0,     0,     0,   266,
     267,     0,     0,     0,   268,   269,   270,   271,   272,     0,
       0,   273,   274,   275,     0,   276,     0,   277,     0,     0,
       0,     0,   278,   279,     0,     0,     0,   280,     0,   281,
     282,     0,   283,   284,     0,     0,     0,   285,     0,     0,
     286,   287,   288,     0,     0,   289,     0,     0,   290,   291,
     639,     0,     0,     0,     0,   292,   293,     0,   294,     0,
     295,     0,   296,   297,     0,     0,     0,     0,     0,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,   314,   315,
     316,   317,     0,   318,   319,   320,   321,     0,   322,   323,
       0,     0,     0,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,     0,   332,     0,   333,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,     0,     0,   345,   346,   347,   348,     0,     0,
       0,   349,   350,     0,     0,     0,   351,     0,   352,   353,
     354,     0,   355,   356,   357,   358,     0,   359,   360,     0,
       0,     0,     0,     0,     0,     0,     0,   361,   362,   363,
       0,     0,   364,     0,   365,     0,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,     0,   376,   377,
     378,     0,   379,     0,   380,   381,   382,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,     0,     0,   389,
     390,   391,   392,   393,     0,     0,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   401,   402,   403,     0,     0,
     404,     0,   405,     0,   406,   407,     0,   408,   409,     0,
     410,     0,   411,     0,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,   424,   425,
       0,     0,     0,   426,   427,   428,   429,     0,     0,     0,
     430,     0,     0,     0,   431,     0,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,     0,
       0,     0,     0,     0,     0,   444,   445,     0,   446,     0,
       0,   447,     0,     0,   448,   449,     0,     0,     0,   450,
       0,     0,   451,   452,     0,   453,   454,   455,   456,   457,
     458,     0,     0,   459,   460,   461,   462,     0,   463,   464,
       0,   465,     0,   466,   467,   468,   469,     0,   138,   470,
     471,     0,   472,   473,   474,   475,     0,     0,     0,     0,
       0,   476,   477,   478,     0,     0,     0,   479,   480,   481,
     482,     0,   483,   484,     0,   485,   486,     0,   487,   488,
       0,     0,   489,     0,     0,   490,     0,   491,     0,   492,
     493,   494,     0,     0,     0,     0,     0,     0,   495,     0,
       0,   496,     0,     0,     0,   497,   498,   499,   500,   501,
     502,   503,     0,     0,     0,     0,     0,     0,   504,   505,
       0,   506,   507,   508,     0,     0,   509,   141,     0,   142,
     143,   144,   145,   146,   147,     0,     0,   148,     0,     0,
       0,   149,     0,     0,   150,  1789,   151,   152,   153,   154,
     155,   156,   157,   158,     0,   159,     0,     0,     0,   160,
       0,     0,     0,   161,     0,     0,   162,   163,   164,     0,
     165,     0,   166,   167,     0,     0,   168,     0,     0,   169,
     170,     0,   171,   945,   946,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
     195,   196,     0,   197,   198,     0,   199,   200,   201,   202,
     203,     0,   204,     0,     0,   205,     0,     0,   206,     0,
     207,     0,     0,   208,     0,   209,     0,     0,     0,   210,
     211,   212,     0,     0,   213,     0,     0,     0,     0,   214,
     215,     0,     0,     0,   947,   216,     0,   217,     0,     0,
       0,   218,     0,   219,   220,   221,   222,   223,     0,     0,
       0,   224,     0,     0,   225,   226,   227,     0,     0,     0,
     228,     0,   229,   230,     0,   231,   232,   233,     0,     0,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,     0,   243,   244,   245,     0,     0,   246,   247,     0,
     248,   249,   250,     0,     0,   251,     0,     0,     0,   252,
       0,   253,     0,   254,     0,   255,   256,   257,   258,   259,
       0,   948,     0,   261,     0,     0,     0,   262,   263,   264,
       0,   265,     0,     0,     0,   266,   267,     0,     0,     0,
     268,   269,   270,   271,   272,     0,     0,   273,   274,   275,
       0,   276,     0,   277,     0,     0,     0,     0,   278,   279,
       0,     0,     0,   280,     0,   281,   282,     0,   283,   284,
       0,     0,     0,   285,     0,     0,   286,   287,   288,     0,
       0,   289,     0,     0,   290,   291,     0,     0,     0,     0,
       0,   292,   293,     0,   949,     0,   295,     0,   296,   297,
       0,     0,     0,     0,     0,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,   314,   315,   316,   317,     0,   318,
     319,   320,   321,     0,   322,   323,     0,     0,     0,     0,
     324,   325,   326,   327,   328,   329,     0,     0,   330,   331,
       0,   332,     0,   333,     0,   334,   335,   336,   337,   338,
     339,   950,   341,   342,     0,     0,   343,   344,     0,     0,
     345,   346,   347,   348,     0,     0,     0,   349,   350,     0,
       0,     0,   351,     0,   352,   353,   354,     0,   355,   356,
     357,   358,     0,   359,   360,     0,     0,     0,     0,     0,
       0,     0,     0,   361,   362,   363,     0,     0,   364,     0,
     365,     0,   366,   367,   951,   369,   370,   371,   372,   373,
     374,   375,     0,     0,   376,   377,   378,     0,   379,     0,
     380,   381,   382,   383,   384,     0,   385,   386,   387,     0,
       0,   388,     0,     0,     0,   389,   390,   391,   392,   393,
       0,     0,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   401,   402,   403,     0,     0,   404,     0,   405,     0,
     406,   407,     0,   408,   409,     0,   410,     0,   411,     0,
       0,   952,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,   424,   425,     0,     0,     0,   426,
     427,   953,   429,     0,     0,     0,   430,     0,     0,     0,
     431,     0,   432,   433,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,     0,     0,     0,     0,     0,
       0,   444,   445,     0,   446,     0,     0,   447,     0,     0,
     448,   449,     0,     0,     0,   450,     0,     0,   451,   452,
       0,   453,   454,   455,   456,   457,   458,     0,     0,   459,
     460,   461,   462,     0,   463,   464,     0,   465,     0,   466,
     467,   468,   469,     0,     0,   470,   471,     0,   472,   473,
     474,   475,     0,     0,     0,     0,     0,   476,   477,   478,
       0,     0,     0,   479,   480,   481,   482,     0,   483,   484,
       0,   485,   486,     0,   487,   488,     0,     0,   489,     0,
       0,   490,     0,   491,     0,   492,   493,   494,     0,     0,
       0,     0,     0,     0,   495,     0,     0,   496,     0,     0,
       0,   497,   498,   499,   500,   501,   502,   503,     0,     0,
       0,     0,     0,     0,   504,   505,     0,   506,   507,   508,
       0,     0,   509,   141,     0,   142,   143,   144,   145,   146,
     147,     0,     0,   148,     0,     0,     0,   149,     0,     0,
     150,   955,   151,   152,   153,   154,   155,   156,   157,   158,
       0,   159,     0,     0,     0,   160,     0,     0,     0,   161,
       0,     0,   162,   163,   164,     0,   165,     0,   166,   167,
       0,     0,   168,     0,     0,   169,   170,     0,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
     198,     0,   199,   200,   201,   202,   203,     0,   204,     0,
       0,   205,     0,     0,   206,     0,   207,     0,     0,   208,
       0,   209,     0,     0,     0,   210,   211,   212,     0,     0,
     213,     0,     0,     0,     0,   214,   215,     0,     0,     0,
       0,   216,     0,   217,     0,     0,     0,   218,     0,   219,
     220,   221,   222,   223,     0,     0,     0,   224,     0,     0,
     225,   226,   227,     0,     0,     0,   228,     0,   229,   230,
       0,   231,   232,   233,     0,     0,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,     0,   243,   244,
     245,     0,     0,   246,   247,     0,   248,   249,   250,     0,
       0,   251,     0,     0,     0,   252,     0,   253,     0,   254,
       0,   255,   256,   257,   258,   259,     0,   260,     0,   261,
       0,     0,     0,   262,   263,   264,     0,   265,     0,     0,
       0,   266,   267,     0,     0,     0,   268,   269,   270,   271,
     272,     0,     0,   273,   274,   275,     0,   276,     0,   277,
       0,     0,     0,     0,   278,   279,     0,     0,     0,   280,
       0,   281,   282,     0,   283,   284,     0,     0,     0,   285,
       0,     0,   286,   287,   288,     0,     0,   289,     0,     0,
     290,   291,   639,     0,     0,     0,     0,   292,   293,     0,
     294,     0,   295,     0,   296,   297,     0,     0,     0,     0,
       0,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
     314,   315,   316,   317,     0,   318,   319,   320,   321,     0,
     322,   323,     0,     0,     0,     0,   324,   325,   326,   327,
     328,   329,     0,     0,   330,   331,     0,   332,     0,   333,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,     0,   343,   344,     0,     0,   345,   346,   347,   348,
       0,     0,     0,   349,   350,     0,     0,     0,   351,     0,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,     0,     0,     0,     0,     0,     0,     0,     0,   361,
     362,   363,     0,     0,   364,     0,   365,     0,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,     0,
     376,   377,   378,     0,   379,     0,   380,   381,   382,   383,
     384,     0,   385,   386,   387,     0,     0,   388,     0,     0,
       0,   389,   390,   391,   392,   393,     0,     0,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,   402,   403,
       0,     0,   404,     0,   405,     0,   406,   407,     0,   408,
     409,     0,   410,     0,   411,     0,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     424,   425,     0,     0,     0,   426,   427,   428,   429,     0,
       0,     0,   430,     0,     0,     0,   431,     0,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,     0,     0,     0,     0,     0,     0,   444,   445,     0,
     446,     0,     0,   447,     0,     0,   448,   449,     0,     0,
       0,   450,     0,     0,   451,   452,     0,   453,   454,   455,
     456,   457,   458,     0,     0,   459,   460,   461,   462,     0,
     463,   464,     0,   465,     0,   466,   467,   468,   469,     0,
     138,   470,   471,     0,   472,   473,   474,   475,     0,     0,
       0,     0,     0,   476,   477,   478,     0,     0,     0,   479,
     480,   481,   482,     0,   483,   484,     0,   485,   486,     0,
     487,   488,     0,     0,   489,     0,     0,   490,     0,   491,
       0,   492,   493,   494,     0,     0,     0,     0,     0,     0,
     495,     0,     0,   496,     0,     0,     0,   497,   498,   499,
     500,   501,   502,   503,     0,     0,     0,     0,     0,     0,
     504,   505,     0,   506,   507,   508,     0,     0,   509,   141,
       0,   142,   143,   144,   145,   146,   147,     0,     0,   148,
       0,     0,     0,   149,     0,     0,   150,  3638,   151,   152,
     153,   154,   155,   156,   157,   158,     0,   159,     0,     0,
       0,   160,     0,     0,     0,   161,     0,     0,   162,   163,
     164,     0,   165,     0,   166,   167,     0,     0,   168,     0,
       0,   169,   170,     0,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,   182,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,   192,
     193,   194,   195,   196,  1335,   197,   198,     0,   199,   200,
     201,   202,   203,     0,   204,     0,     0,   205,     0,     0,
     206,     0,   207,     0,     0,   208,     0,   209,     0,     0,
       0,   210,   211,   212,     0,     0,   213,     0,     0,     0,
       0,   214,   215,     0,     0,     0,     0,   216,     0,   217,
       0,     0,     0,   218,     0,   219,   220,   221,   222,   223,
       0,     0,     0,   224,     0,     0,   225,   226,   227,     0,
       0,     0,   228,     0,   229,   230,     0,   231,   232,   233,
       0,     0,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,     0,   243,   244,   245,     0,     0,   246,
     247,     0,   248,   249,   250,     0,     0,   251,     0,     0,
       0,   252,     0,   253,     0,   254,     0,   255,   256,   257,
     258,   259,     0,   260,     0,   261,     0,     0,     0,   262,
     263,   264,     0,   265,     0,     0,     0,   266,   267,     0,
       0,     0,   268,   269,   270,   271,   272,     0,     0,   273,
     274,   275,     0,   276,     0,   277,     0,     0,     0,     0,
     278,   279,     0,     0,     0,   280,     0,   281,   282,     0,
     283,   284,     0,     0,     0,   285,     0,     0,   286,   287,
     288,     0,     0,   289,     0,     0,   290,   291,     0,     0,
       0,     0,     0,   292,   293,     0,   294,     0,   295,     0,
     296,   297,     0,     0,     0,     0,     0,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,   314,   315,   316,   317,
       0,   318,   319,   320,   321,     0,   322,   323,     0,     0,
       0,     0,   324,   325,   326,   327,   328,   329,     0,     0,
     330,   331,     0,   332,     0,   333,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,     0,   343,   344,
       0,     0,   345,   346,   347,   348,     0,     0,     0,   349,
     350,     0,     0,     0,   351,     0,   352,   353,   354,     0,
     355,   356,   357,   358,     0,   359,   360,     0,     0,     0,
       0,     0,     0,     0,     0,   361,   362,   363,     0,     0,
     364,     0,   365,     0,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,     0,   376,   377,   378,     0,
     379,     0,   380,   381,   382,   383,   384,     0,   385,   386,
     387,     0,     0,   388,     0,     0,     0,   389,   390,   391,
     392,   393,     0,     0,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   401,   402,   403,     0,     0,   404,     0,
     405,     0,   406,   407,     0,   408,   409,     0,   410,     0,
     411,     0,     0,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,   424,   425,     0,     0,
       0,   426,   427,   428,   429,     0,     0,     0,   430,     0,
       0,     0,   431,     0,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,     0,     0,     0,
       0,     0,     0,   444,   445,     0,   446,     0,     0,   447,
       0,     0,   448,   449,     0,     0,     0,   450,     0,     0,
     451,   452,     0,   453,   454,   455,   456,   457,   458,     0,
       0,   459,   460,   461,   462,     0,   463,   464,     0,   465,
       0,   466,   467,   468,   469,     0,     0,   470,   471,     0,
     472,   473,   474,   475,     0,     0,     0,     0,     0,   476,
     477,   478,     0,     0,     0,   479,   480,   481,   482,     0,
     483,   484,     0,   485,   486,     0,   487,   488,     0,     0,
     489,     0,     0,   490,     0,   491,     0,   492,   493,   494,
       0,     0,     0,     0,     0,     0,   495,     0,     0,   496,
       0,     0,     0,   497,   498,   499,   500,   501,   502,   503,
       0,     0,     0,     0,     0,     0,   504,   505,     0,   506,
     507,   508,     0,     0,   509,   141,     0,   142,   143,   144,
     145,   146,   147,     0,     0,   148,     0,     0,     0,   149,
       0,     0,   150,  1336,   151,   152,   153,   154,   155,   156,
     157,   158,     0,   159,     0,     0,     0,   160,     0,     0,
       0,   161,     0,     0,   162,   163,   164,     0,   165,     0,
     166,   167,     0,     0,   168,     0,     0,   169,   170,     0,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,   194,   195,   196,
       0,   197,   198,     0,   199,   200,   201,   202,   203,     0,
     204,     0,     0,   205,     0,     0,   206,     0,   207,     0,
       0,   208,     0,   209,     0,     0,     0,   210,   211,   212,
       0,     0,   213,     0,     0,     0,     0,   214,   215,     0,
       0,     0,     0,   216,     0,   217,     0,     0,     0,   218,
       0,   219,   220,   221,   222,   223,     0,     0,     0,   224,
       0,     0,   225,   226,   227,     0,     0,     0,   228,     0,
     229,   230,     0,   231,   232,   233,     0,     0,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,     0,
     243,   244,   245,     0,     0,   246,   247,     0,   248,   249,
     250,     0,     0,   251,     0,     0,     0,   252,     0,   253,
       0,   254,     0,   255,   256,   257,   258,   259,     0,   260,
       0,   261,     0,     0,     0,   262,   263,   264,     0,   265,
       0,     0,     0,   266,   267,     0,     0,     0,   268,   269,
     270,   271,   272,     0,     0,   273,   274,   275,     0,   276,
       0,   277,     0,     0,     0,     0,   278,   279,     0,     0,
       0,   280,     0,   281,   282,     0,   283,   284,     0,     0,
       0,   285,     0,     0,   286,   287,   288,     0,     0,   289,
       0,     0,   290,   291,     0,     0,     0,     0,     0,   292,
     293,     0,   294,     0,   295,     0,   296,   297,     0,     0,
       0,     0,     0,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,   314,   315,   316,   317,     0,   318,   319,   320,
     321,     0,   322,   323,     0,     0,     0,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,     0,   332,
       0,   333,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,     0,     0,   345,   346,
     347,   348,     0,     0,     0,   349,   350,     0,     0,     0,
     351,     0,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,     0,     0,     0,     0,     0,     0,     0,
       0,   361,   362,   363,     0,     0,   364,     0,   365,     0,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,     0,   379,     0,   380,   381,
     382,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,     0,     0,   389,   390,   391,   392,   393,     0,     0,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
     402,   403,     0,     0,   404,     0,   405,     0,   406,   407,
       0,   408,   409,     0,   410,     0,   411,     0,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,   424,   425,     0,     0,     0,   426,   427,   428,
     429,     0,     0,     0,   430,     0,     0,     0,   431,     0,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,     0,     0,     0,     0,     0,     0,   444,
     445,     0,   446,     0,     0,   447,     0,     0,   448,   449,
       0,     0,     0,   450,     0,     0,   451,   452,     0,   453,
     454,   455,   456,   457,   458,     0,     0,   459,   460,   461,
     462,     0,   463,   464,     0,   465,     0,   466,   467,   468,
     469,     0,     0,   470,   471,     0,   472,   473,   474,   475,
       0,     0,     0,     0,     0,   476,   477,   478,     0,     0,
       0,   479,   480,   481,   482,     0,   483,   484,     0,   485,
     486,     0,   487,   488,     0,     0,   489,     0,     0,   490,
       0,   491,     0,   492,   493,   494,     0,     0,     0,     0,
       0,     0,   495,     0,     0,   496,     0,     0,     0,   497,
     498,   499,   500,   501,   502,   503,     0,     0,     0,     0,
       0,     0,   504,   505,     0,   506,   507,   508,     0,     0,
     509,   141,     0,   142,   143,   144,   145,   146,   147,     0,
       0,   148,     0,     0,     0,   149,     0,     0,     0,  1336,
     151,   152,   153,   154,   155,   156,   157,     0,     0,  -372,
       0,     0,     0,   160,     0,     0,     0,   161,     0,     0,
     162,   163,   164,     0,   165,     0,     0,     0,     0,     0,
     168,  4139,     0,   169,   170,     0,   171,     0,     0,     0,
       0,     0,   175,   176,   177,   178,  4140,   180,   181,     0,
     182,   183,     0,     0,     0,     0,     0,     0,   189,     0,
     191,     0,   193,   194,   195,   196,     0,   197,   198,     0,
     199,   200,   201,     0,   203,     0,   204,     0,     0,   205,
       0,     0,   206,     0,   207,     0,     0,   208,     0,   209,
       0,     0,     0,   210,   211,   212,     0,     0,   213,     0,
       0,     0,     0,   214,     0,     0,     0,     0,     0,   216,
       0,   217,     0,     0,     0,   218,     0,   219,   220,   221,
     222,   223,     0,     0,     0,     0,     0,     0,   225,   226,
     227,     0,     0,     0,   228,     0,     0,   230,     0,   231,
     232,   233,     0,     0,   234,   235,     0,   236,   237,   238,
     239,   240,     0,     0,     0,     0,   243,   244,   245,     0,
       0,   246,   247,  4141,   248,   249,   250,     0,     0,     0,
       0,     0,     0,   252,     0,   253,     0,   254,     0,   255,
     256,   257,   258,   259,     0,   260,     0,   261,     0,     0,
       0,     0,   263,   264,     0,     0,     0,     0,     0,     0,
     267,     0,     0,     0,   268,   269,   270,   271,   272,  4142,
       0,   273,   274,   275,     0,   276,     0,   277,     0,     0,
       0,     0,   278,     0,     0,     0,     0,   280,     0,   281,
     282,     0,   283,   284,  4143,     0,     0,   285,     0,     0,
       0,   287,   288,     0,     0,   289,  4144,     0,   290,   291,
       0,     0,     0,     0,     0,   292,   293,     0,   294,     0,
     295,     0,   296,   297,     0,     0,     0,     0,  -327,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,   314,   315,
     316,   317,     0,   318,   319,   320,   321,     0,   322,   323,
       0,     0,     0,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,     0,   332,     0,   333,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,     0,     0,   345,   346,   347,   348,     0,     0,
       0,     0,   350,     0,     0,     0,   351,     0,   352,   353,
     354,     0,   355,   356,   357,  4145,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   362,   363,
       0,     0,     0,     0,   365,     0,   366,   367,   368,   369,
     370,   371,   372,   373,   374,     0,     0,     0,     0,   377,
     378,     0,   379,     0,   380,   381,   382,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,     0,     0,   389,
     390,   391,   392,   393,     0,     0,   394,   395,   396,   397,
     398,     0,   399,     0,     0,   401,     0,   403,  -327,     0,
     404,     0,     0,     0,   406,     0,     0,   408,   409,     0,
     410,  4146,   411,     0,     0,   412,     0,   414,   415,   416,
     417,   418,   419,   420,     0,   422,   423,     0,   424,     0,
       0,     0,     0,   426,   427,   428,     0,     0,     0,     0,
     430,     0,     0,     0,     0,     0,     0,   433,     0,     0,
     436,   437,     0,   438,     0,   440,     0,   442,   443,     0,
       0,     0,     0,     0,     0,   444,   445,     0,   446,     0,
       0,   447,     0,     0,   448,     0,     0,     0,     0,   450,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,     0,   459,   460,   461,   462,     0,   463,   464,
       0,   465,     0,   466,   467,   468,   469,     0,     0,   470,
     471,     0,   472,   473,   474,   475,     0,     0,     0,     0,
       0,   476,   477,   478,     0,     0,     0,     0,   480,   481,
     482,     0,   483,   484,     0,   485,   486,     0,     0,     0,
       0,     0,   489,     0,     0,   490,     0,     0,     0,   492,
     493,   494,     0,     0,     0,     0,     0,     0,   495,     0,
       0,   496,     0,     0,     0,   497,   498,   499,   500,   501,
     502,   503,     0,     0,  -327,     0,     0,     0,   504,     0,
       0,   506,     0,   508,     0,   141,   509,   142,   143,   144,
     145,   146,   147,     0,     0,   148,     0,     0,     0,   149,
    4752,     0,   150,     0,   151,   152,   153,   154,   155,   156,
     157,   158,     0,   159,     0,     0,     0,   160,     0,     0,
       0,   161,     0,     0,   162,   163,   164,     0,   165,     0,
     166,   167,     0,     0,   168,     0,     0,   169,   170,     0,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,     0,   189,   190,   191,   192,   193,   194,   195,   196,
       0,   197,   198,     0,   199,   200,   201,   202,   203,     0,
     204,     0,     0,   205,     0,     0,   206,     0,   207,  1045,
       0,   208,     0,   209,     0,     0,     0,   210,   211,   212,
       0,     0,   213,     0,     0,     0,     0,   214,   215,     0,
       0,     0,     0,   216,     0,   217,     0,     0,     0,   218,
       0,   219,   220,   221,   222,   223,     0,     0,     0,   224,
       0,     0,   225,   226,   227,     0,     0,     0,   228,     0,
     229,   230,     0,   231,   232,   233,     0,     0,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,     0,     0,
     243,   244,   245,     0,     0,   246,   247,     0,   248,   249,
     250,     0,     0,   251,     0,     0,     0,   252,     0,   253,
       0,   254,     0,   255,   256,   257,   258,   259,     0,   260,
       0,   261,     0,     0,     0,   262,   263,   264,     0,   265,
       0,     0,     0,   266,   267,     0,     0,     0,   268,   269,
     270,   271,   272,     0,     0,   273,   274,   275,     0,   276,
       0,   277,     0,     0,     0,     0,   278,   279,     0,     0,
       0,   280,     0,   281,   282,     0,   283,   284,     0,     0,
       0,   285,     0,     0,   286,   287,   288,     0,     0,   289,
       0,     0,   290,   291,   639,     0,     0,     0,     0,   292,
     293,     0,   294,     0,   295,     0,   296,   297,     0,     0,
       0,     0,     0,     0,     0,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,     0,   314,   315,   316,   317,     0,   318,   319,   320,
     321,     0,   322,   323,     0,     0,     0,     0,   324,   325,
     326,   327,   328,   329,     0,     0,   330,   331,     0,   332,
       0,   333,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,     0,     0,   345,   346,
     347,   348,     0,     0,     0,   349,   350,     0,     0,     0,
     351,     0,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,     0,     0,     0,     0,     0,     0,     0,
       0,   361,   362,   363,     0,     0,   364,     0,   365,     0,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,     0,   376,   377,   378,     0,   379,     0,   380,   381,
     382,   383,   384,     0,   385,   386,   387,     0,     0,   388,
       0,     0,     0,   389,   390,   391,   392,   393,     0,     0,
     394,   395,   396,   397,   398,     0,   399,   400,     0,   401,
     402,   403,     0,     0,   404,     0,   405,     0,   406,   407,
       0,   408,   409,     0,   410,     0,   411,     0,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,   424,   425,     0,     0,     0,   426,   427,   428,
     429,     0,     0,     0,   430,     0,     0,     0,   431,     0,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,     0,     0,     0,     0,     0,     0,   444,
     445,     0,   446,     0,     0,   447,     0,     0,   448,   449,
       0,     0,     0,   450,     0,     0,   451,   452,     0,   453,
     454,   455,   456,   457,   458,     0,     0,   459,   460,   461,
     462,     0,   463,   464,     0,   465,     0,   466,   467,   468,
     469,     0,   138,   470,   471,     0,   472,   473,   474,   475,
       0,     0,     0,     0,     0,   476,   477,   478,     0,     0,
       0,   479,   480,   481,   482,     0,   483,   484,     0,   485,
     486,     0,   487,   488,     0,     0,   489,     0,     0,   490,
       0,   491,     0,   492,   493,   494,     0,     0,     0,     0,
       0,     0,   495,     0,     0,   496,     0,     0,     0,   497,
     498,   499,   500,   501,   502,   503,     0,     0,     0,     0,
       0,     0,   504,   505,     0,   506,   507,   508,     0,   141,
     509,   142,   143,   144,   145,   146,   147,     0,     0,   148,
       0,     0,  1234,   149,     0,     0,   150,     0,   151,   152,
     153,   154,   155,   156,   157,   158,     0,   159,     0,     0,
       0,   160,     0,     0,     0,   161,     0,     0,   162,   163,
     164,     0,   165,     0,   166,   167,     0,     0,   168,     0,
       0,   169,   170,     0,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,   182,   183,
     184,   185,   186,   187,   188,     0,   189,   190,   191,   192,
     193,   194,   195,   196,     0,   197,   198,     0,   199,   200,
     201,   202,   203,     0,   204,     0,     0,   205,     0,     0,
     206,     0,   207,     0,     0,   208,     0,   209,     0,     0,
       0,   210,   211,   212,     0,     0,   213,     0,     0,     0,
       0,   214,   215,     0,     0,     0,     0,   216,     0,   217,
       0,     0,     0,   218,     0,   219,   220,   221,   222,   223,
       0,     0,     0,   224,     0,     0,   225,   226,   227,     0,
       0,     0,   228,     0,   229,   230,     0,   231,   232,   233,
       0,     0,   234,   235,     0,   236,   237,   238,   239,   240,
     241,   242,     0,     0,   243,   244,   245,     0,     0,   246,
     247,     0,   248,   249,   250,     0,     0,   251,     0,     0,
       0,   252,     0,   253,     0,   254,     0,   255,   256,   257,
     258,   259,     0,   260,     0,   261,     0,     0,     0,   262,
     263,   264,     0,   265,     0,     0,     0,   266,   267,     0,
       0,     0,   268,   269,   270,   271,   272,     0,     0,   273,
     274,   275,     0,   276,     0,   277,     0,     0,     0,     0,
     278,   279,     0,     0,     0,   280,     0,   281,   282,     0,
     283,   284,     0,     0,     0,   285,     0,     0,   286,   287,
     288,     0,     0,   289,     0,     0,   290,   291,     0,     0,
       0,     0,     0,   292,   293,     0,   294,     0,   295,     0,
     296,   297,     0,     0,     0,     0,     0,     0,     0,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,     0,   314,   315,   316,   317,
       0,   318,   319,   320,   321,     0,   322,   323,     0,     0,
       0,     0,   324,   325,   326,   327,   328,   329,     0,     0,
     330,   331,     0,   332,     0,   333,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,     0,   343,   344,
       0,     0,   345,   346,   347,   348,     0,     0,     0,   349,
     350,     0,     0,     0,   351,     0,   352,   353,   354,     0,
     355,   356,   357,   358,     0,   359,   360,     0,     0,     0,
       0,     0,     0,     0,     0,   361,   362,   363,     0,     0,
     364,     0,   365,     0,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,     0,   376,   377,   378,     0,
     379,     0,   380,   381,   382,   383,   384,     0,   385,   386,
     387,     0,     0,   388,     0,     0,     0,   389,   390,   391,
     392,   393,     0,     0,   394,   395,   396,   397,   398,     0,
     399,   400,     0,   401,   402,   403,     0,     0,   404,     0,
     405,     0,   406,   407,     0,   408,   409,     0,   410,     0,
     411,     0,     0,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,   424,   425,     0,     0,
       0,   426,   427,   428,   429,     0,     0,     0,   430,     0,
       0,     0,   431,     0,   432,   433,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,     0,     0,     0,
       0,     0,     0,   444,   445,     0,   446,     0,     0,   447,
       0,     0,   448,   449,     0,     0,     0,   450,     0,     0,
     451,   452,     0,   453,   454,   455,   456,   457,   458,     0,
       0,   459,   460,   461,   462,     0,   463,   464,     0,   465,
       0,   466,   467,   468,   469,     0,     0,   470,   471,     0,
     472,   473,   474,   475,     0,     0,     0,     0,     0,   476,
     477,   478,     0,     0,     0,   479,   480,   481,   482,     0,
     483,   484,     0,   485,   486,     0,   487,   488,     0,     0,
     489,     0,     0,   490,     0,   491,     0,   492,   493,   494,
       0,     0,     0,     0,     0,     0,   495,     0,     0,   496,
       0,     0,     0,   497,   498,   499,   500,   501,   502,   503,
       0,     0,     0,     0,     0,     0,   504,   505,     0,   506,
     507,   508,     0,   141,   509,   142,   143,   144,   145,   146,
     147,  2207,     0,   148,     0,     0,     0,   149,     0,     0,
     150,     0,   151,   152,   153,   154,   155,   156,   157,   158,
       0,   159,     0,     0,     0,   160,     0,     0,     0,   161,
       0,     0,   162,   163,   164,     0,   165,     0,   166,   167,
       0,     0,   168,     0,     0,   169,   170,     0,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,   183,   184,   185,   186,   187,   188,     0,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
     198,     0,   199,   200,   201,   202,   203,     0,   204,     0,
       0,   205,     0,     0,   206,     0,   207,     0,     0,   208,
       0,   209,     0,     0,     0,   210,   211,   212,     0,     0,
     213,     0,     0,     0,     0,   214,   215,     0,     0,     0,
       0,   216,     0,   217,     0,     0,     0,   218,     0,   219,
     220,   221,   222,   223,     0,     0,     0,   224,     0,     0,
     225,   226,   227,     0,     0,     0,   228,     0,   229,   230,
       0,   231,   232,   233,     0,     0,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,     0,     0,   243,   244,
     245,     0,     0,   246,   247,     0,   248,   249,   250,     0,
       0,   251,     0,     0,     0,   252,     0,   253,     0,   254,
       0,   255,   256,   257,   258,   259,     0,   260,     0,   261,
       0,     0,     0,   262,   263,   264,     0,   265,     0,     0,
       0,   266,   267,     0,     0,     0,   268,   269,   270,   271,
     272,     0,     0,   273,   274,   275,     0,   276,     0,   277,
       0,     0,     0,     0,   278,   279,     0,     0,     0,   280,
       0,   281,   282,     0,   283,   284,     0,     0,     0,   285,
       0,     0,   286,   287,   288,     0,     0,   289,     0,     0,
     290,   291,     0,     0,     0,     0,     0,   292,   293,     0,
     294,     0,   295,     0,   296,   297,     0,     0,     0,     0,
       0,     0,     0,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,     0,
     314,   315,   316,   317,     0,   318,   319,   320,   321,     0,
     322,   323,     0,     0,     0,     0,   324,   325,   326,   327,
     328,   329,     0,     0,   330,   331,     0,   332,     0,   333,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,     0,   343,   344,     0,     0,   345,   346,   347,   348,
       0,     0,     0,   349,   350,     0,     0,     0,   351,     0,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,     0,     0,     0,     0,     0,     0,     0,     0,   361,
     362,   363,     0,     0,   364,     0,   365,     0,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,     0,
     376,   377,   378,     0,   379,     0,   380,   381,   382,   383,
     384,     0,   385,   386,   387,     0,     0,   388,     0,     0,
       0,   389,   390,   391,   392,   393,     0,     0,   394,   395,
     396,   397,   398,     0,   399,   400,     0,   401,   402,   403,
       0,     0,   404,     0,   405,     0,   406,   407,     0,   408,
     409,     0,   410,     0,   411,     0,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
     424,   425,     0,     0,     0,   426,   427,   428,   429,     0,
       0,     0,   430,     0,     0,     0,   431,     0,   432,   433,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,     0,     0,     0,     0,     0,     0,   444,   445,     0,
     446,     0,     0,   447,     0,     0,   448,   449,     0,     0,
       0,   450,     0,     0,   451,   452,     0,   453,   454,   455,
     456,   457,   458,     0,     0,   459,   460,   461,   462,     0,
     463,   464,     0,   465,     0,   466,   467,   468,   469,     0,
       0,   470,   471,     0,   472,   473,   474,   475,     0,     0,
       0,     0,     0,   476,   477,   478,     0,     0,     0,   479,
     480,   481,   482,     0,   483,   484,     0,   485,   486,     0,
     487,   488,     0,     0,   489,     0,     0,   490,     0,   491,
       0,   492,   493,   494,     0,     0,     0,     0,     0,     0,
     495,     0,     0,   496,     0,     0,     0,   497,   498,   499,
     500,   501,   502,   503,     0,     0,     0,     0,     0,     0,
     504,   505,     0,   506,   507,   508,     0,   141,   509,   142,
     143,   144,   145,   146,   147,  2908,     0,   148,     0,     0,
       0,   149,     0,     0,   150,     0,   151,   152,   153,   154,
     155,   156,   157,   158,     0,   159,     0,     0,     0,   160,
       0,     0,     0,   161,     0,     0,   162,   163,   164,     0,
     165,     0,   166,   167,     0,     0,   168,     0,     0,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,   183,   184,   185,
     186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
     195,   196,     0,   197,   198,     0,   199,   200,   201,   202,
     203,     0,   204,     0,     0,   205,     0,     0,   206,     0,
     207,     0,     0,   208,     0,   209,     0,     0,     0,   210,
     211,   212,     0,     0,   213,     0,     0,     0,     0,   214,
     215,     0,     0,     0,     0,   216,     0,   217,     0,     0,
       0,   218,     0,   219,   220,   221,   222,   223,     0,     0,
       0,   224,     0,     0,   225,   226,   227,     0,     0,     0,
     228,     0,   229,   230,     0,   231,   232,   233,     0,     0,
     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,
       0,     0,   243,   244,   245,     0,     0,   246,   247,     0,
     248,   249,   250,     0,     0,   251,     0,     0,     0,   252,
       0,   253,     0,   254,     0,   255,   256,   257,   258,   259,
       0,   260,     0,   261,     0,     0,     0,   262,   263,   264,
       0,   265,     0,     0,     0,   266,   267,     0,     0,     0,
     268,   269,   270,   271,   272,     0,     0,   273,   274,   275,
       0,   276,     0,   277,     0,     0,     0,     0,   278,   279,
       0,     0,     0,   280,     0,   281,   282,     0,   283,   284,
       0,     0,     0,   285,     0,     0,   286,   287,   288,     0,
       0,   289,     0,     0,   290,   291,     0,     0,     0,     0,
       0,   292,   293,     0,   294,     0,   295,     0,   296,   297,
       0,     0,     0,     0,     0,     0,     0,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,     0,   314,   315,   316,   317,     0,   318,
     319,   320,   321,     0,   322,   323,     0,     0,     0,     0,
     324,   325,   326,   327,   328,   329,     0,     0,   330,   331,
       0,   332,     0,   333,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,     0,   343,   344,     0,     0,
     345,   346,   347,   348,     0,     0,     0,   349,   350,     0,
       0,     0,   351,     0,   352,   353,   354,     0,   355,   356,
     357,   358,     0,   359,   360,     0,     0,     0,     0,     0,
       0,     0,     0,   361,   362,   363,     0,     0,   364,     0,
     365,     0,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,     0,   376,   377,   378,     0,   379,     0,
     380,   381,   382,   383,   384,     0,   385,   386,   387,     0,
       0,   388,     0,     0,     0,   389,   390,   391,   392,   393,
       0,     0,   394,   395,   396,   397,   398,     0,   399,   400,
       0,   401,   402,   403,     0,     0,   404,     0,   405,     0,
     406,   407,     0,   408,   409,     0,   410,     0,   411,     0,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,   424,   425,     0,     0,     0,   426,
     427,   428,   429,     0,     0,     0,   430,     0,     0,     0,
     431,     0,   432,   433,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,     0,     0,     0,     0,     0,
       0,   444,   445,     0,   446,     0,     0,   447,     0,     0,
     448,   449,     0,     0,     0,   450,     0,     0,   451,   452,
       0,   453,   454,   455,   456,   457,   458,     0,     0,   459,
     460,   461,   462,     0,   463,   464,     0,   465,     0,   466,
     467,   468,   469,     0,     0,   470,   471,     0,   472,   473,
     474,   475,     0,     0,     0,     0,     0,   476,   477,   478,
       0,     0,     0,   479,   480,   481,   482,     0,   483,   484,
       0,   485,   486,     0,   487,   488,     0,     0,   489,     0,
       0,   490,     0,   491,     0,   492,   493,   494,     0,     0,
       0,     0,     0,     0,   495,     0,     0,   496,     0,     0,
       0,   497,   498,   499,   500,   501,   502,   503,     0,     0,
       0,     0,     0,     0,   504,   505,     0,   506,   507,   508,
       0,   141,   509,   142,   143,   144,   145,   146,   147,  3285,
       0,   148,     0,     0,     0,   149,     0,     0,   150,     0,
     151,   152,   153,   154,   155,   156,   157,   158,     0,   159,
       0,     0,     0,   160,     0,     0,     0,   161,     0,     0,
     162,   163,   164,     0,   165,     0,   166,   167,     0,     0,
     168,     0,     0,   169,   170,     0,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,   184,   185,   186,   187,   188,     0,   189,   190,
     191,   192,   193,   194,   195,   196,     0,   197,   198,     0,
     199,   200,   201,   202,   203,     0,   204,     0,     0,   205,
       0,     0,   206,     0,   207,     0,     0,   208,     0,   209,
       0,     0,     0,   210,   211,   212,     0,     0,   213,     0,
       0,     0,     0,   214,   215,     0,     0,     0,     0,   216,
       0,   217,     0,     0,     0,   218,     0,   219,   220,   221,
     222,   223,     0,     0,     0,   224,     0,     0,   225,   226,
     227,     0,     0,     0,   228,     0,   229,   230,     0,   231,
     232,   233,     0,     0,   234,   235,     0,   236,   237,   238,
     239,   240,   241,   242,     0,     0,   243,   244,   245,     0,
       0,   246,   247,     0,   248,   249,   250,     0,     0,   251,
       0,     0,     0,   252,     0,   253,     0,   254,     0,   255,
     256,   257,   258,   259,     0,   260,     0,   261,     0,     0,
       0,   262,   263,   264,     0,   265,     0,     0,     0,   266,
     267,     0,     0,     0,   268,   269,   270,   271,   272,     0,
       0,   273,   274,   275,     0,   276,     0,   277,     0,     0,
       0,     0,   278,   279,     0,     0,     0,   280,     0,   281,
     282,     0,   283,   284,     0,     0,     0,   285,     0,     0,
     286,   287,   288,     0,     0,   289,     0,     0,   290,   291,
       0,     0,     0,     0,     0,   292,   293,     0,   294,     0,
     295,     0,   296,   297,     0,     0,     0,     0,     0,     0,
       0,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,     0,   314,   315,
     316,   317,     0,   318,   319,   320,   321,     0,   322,   323,
       0,     0,     0,     0,   324,   325,   326,   327,   328,   329,
       0,     0,   330,   331,     0,   332,     0,   333,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,     0,     0,   345,   346,   347,   348,     0,     0,
       0,   349,   350,     0,     0,     0,   351,     0,   352,   353,
     354,     0,   355,   356,   357,   358,     0,   359,   360,     0,
       0,     0,     0,     0,     0,     0,     0,   361,   362,   363,
       0,     0,   364,     0,   365,     0,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,     0,   376,   377,
     378,     0,   379,     0,   380,   381,   382,   383,   384,     0,
     385,   386,   387,     0,     0,   388,     0,     0,     0,   389,
     390,   391,   392,   393,     0,     0,   394,   395,   396,   397,
     398,     0,   399,   400,     0,   401,   402,   403,     0,     0,
     404,     0,   405,     0,   406,   407,     0,   408,   409,     0,
     410,     0,   411,     0,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,   424,   425,
       0,     0,     0,   426,   427,   428,   429,     0,     0,     0,
     430,     0,     0,     0,   431,     0,   432,   433,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,     0,
       0,     0,     0,     0,     0,   444,   445,     0,   446,     0,
       0,   447,     0,     0,   448,   449,     0,     0,     0,   450,
       0,     0,   451,   452,     0,   453,   454,   455,   456,   457,
     458,     0,     0,   459,   460,   461,   462,     0,   463,   464,
       0,   465,     0,   466,   467,   468,   469,     0,     0,   470,
     471,     0,   472,   473,   474,   475,     0,     0,     0,     0,
       0,   476,   477,   478,     0,     0,     0,   479,   480,   481,
     482,     0,   483,   484,     0,   485,   486,     0,   487,   488,
       0,     0,   489,     0,     0,   490,     0,   491,     0,   492,
     493,   494,     0,     0,     0,     0,     0,     0,   495,     0,
       0,   496,     0,     0,     0,   497,   498,   499,   500,   501,
     502,   503,     0,     0,     0,     0,     0,     0,   504,   505,
       0,   506,   507,   508,     0,     0,   509,     0,     0,     0,
       0,     0,   141,  3643,   142,   143,   144,   145,   146,   147,
     844,   845,   148,     0,     0,     0,   149,     0,     0,   150,
       0,   151,   152,   153,   154,   155,   156,   157,   158,     0,
     159,     0,     0,     0,   160,     0,     0,     0,   161,     0,
       0,   162,   163,   164,     0,   165,     0,   166,   167,     0,
       0,   168,     0,     0,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,   198,
       0,   199,   200,   201,   202,   203,     0,   204,     0,     0,
     205,   846,     0,   206,     0,   207,     0,   847,   208,     0,
     209,     0,     0,     0,   210,   211,   212,     0,     0,   213,
       0,     0,     0,     0,   214,   215,     0,     0,     0,     0,
     216,     0,   217,   848,     0,     0,   218,     0,   219,   220,
     221,   222,   223,     0,     0,     0,   224,   849,     0,   225,
     226,   227,     0,     0,     0,   228,     0,   229,   230,     0,
     231,   232,   233,     0,     0,   234,   235,     0,   236,   237,
     850,   239,   240,   241,   851,     0,     0,   243,   244,   245,
       0,     0,   246,   247,     0,   852,   249,   250,     0,     0,
     251,     0,     0,     0,   252,     0,   253,     0,   254,     0,
     255,   256,   257,   258,   259,     0,   260,   853,   261,     0,
       0,     0,   262,   263,   264,     0,   265,     0,     0,     0,
     266,   267,     0,     0,     0,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,   854,   276,     0,   277,     0,
       0,     0,   855,   278,   279,     0,     0,     0,   280,     0,
     281,   282,     0,   283,   284,     0,     0,     0,   285,     0,
       0,   286,   287,   288,     0,     0,   289,     0,     0,   290,
     291,   639,     0,     0,     0,     0,   292,   293,     0,   294,
       0,   295,   856,   296,   297,     0,     0,     0,     0,     0,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,
     315,   316,   317,     0,   318,   319,   320,   321,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,     0,   332,     0,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,     0,     0,   345,   346,   347,   348,     0,
       0,     0,   349,   350,     0,     0,     0,   351,     0,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
       0,     0,     0,     0,     0,     0,     0,     0,   361,   362,
     363,     0,     0,   364,     0,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,     0,   379,     0,   857,   381,   382,   383,   858,
       0,   385,   386,   387,     0,     0,   388,     0,     0,     0,
     389,   390,   391,   392,   393,   859,     0,   394,   395,   396,
     397,   398,     0,   860,   400,     0,   401,   402,   403,     0,
       0,   861,     0,   405,     0,   406,   407,     0,   408,   409,
       0,   410,     0,   411,     0,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,   862,     0,     0,   426,   427,   428,   429,     0,     0,
       0,   430,     0,     0,   863,   864,     0,   432,   433,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,     0,     0,     0,     0,   444,   445,     0,   446,
       0,     0,   447,     0,     0,   448,   449,     0,     0,     0,
     450,     0,     0,   451,   452,     0,   453,   454,   455,   456,
     457,   458,     0,     0,   865,   460,   461,   462,     0,   463,
     464,     0,   465,     0,   466,   467,   468,   469,     0,   138,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
       0,     0,   476,   477,   478,   866,     0,     0,   479,   480,
     481,   482,     0,   483,   484,     0,   485,   486,     0,   487,
     488,     0,     0,   489,     0,     0,   490,   867,   491,   868,
     492,   493,   494,     0,     0,     0,     0,     0,     0,   495,
       0,     0,   496,     0,     0,     0,   497,   498,   499,   500,
     501,   502,   503,     0,     0,     0,     0,     0,     0,   504,
     505,     0,   506,   507,   508,     0,   141,   509,   921,   143,
     144,   145,   146,   147,   922,   845,   148,     0,     0,     0,
     149,     0,     0,   150,     0,   151,   152,   153,   154,   155,
     156,   157,   158,     0,   159,     0,     0,     0,   160,     0,
       0,     0,   161,     0,     0,   162,   163,   164,     0,   165,
       0,   166,   167,     0,     0,   168,     0,     0,   169,   170,
       0,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,   198,     0,   199,   200,   201,   202,   203,
       0,   204,     0,     0,   205,   846,     0,   206,     0,   207,
       0,   847,   208,     0,   209,     0,     0,     0,   210,   211,
     212,     0,     0,   213,     0,     0,     0,     0,   214,   215,
       0,     0,     0,     0,   216,     0,   217,   848,     0,     0,
     218,     0,   219,   220,   221,   222,   223,     0,     0,     0,
     224,   849,     0,   225,   226,   227,     0,     0,     0,   228,
       0,   229,   230,     0,   231,   232,   233,     0,     0,   234,
     235,     0,   236,   237,   850,   239,   240,   241,   851,     0,
       0,   243,   244,   245,     0,     0,   246,   247,     0,   852,
     249,   250,     0,     0,   251,     0,     0,     0,   252,     0,
     253,     0,   254,     0,   255,   256,   257,   258,   259,     0,
     260,   853,   261,     0,     0,     0,   262,   263,   264,     0,
     265,     0,     0,     0,   266,   267,     0,     0,     0,   268,
     269,   270,   271,   272,     0,     0,   273,   274,   275,   854,
     276,     0,   277,     0,     0,     0,   855,   278,   279,     0,
       0,     0,   280,     0,   281,   282,     0,   283,   284,     0,
       0,     0,   285,     0,     0,   286,   287,   288,     0,     0,
     289,     0,     0,   290,   291,   639,     0,     0,     0,     0,
     292,   293,     0,   294,     0,   295,   856,   296,   297,     0,
       0,     0,     0,     0,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,     0,   314,   315,   316,   317,     0,   318,   319,
     320,   321,     0,   322,   323,     0,     0,     0,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,     0,
     332,     0,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,     0,     0,   345,
     346,   347,   348,     0,     0,     0,   349,   350,     0,     0,
       0,   351,     0,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,     0,     0,     0,     0,     0,     0,
       0,     0,   361,   362,   363,     0,     0,   364,     0,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,     0,   379,     0,   857,
     381,   382,   383,   923,     0,   385,   386,   387,     0,     0,
     388,     0,     0,     0,   389,   390,   391,   392,   393,   859,
       0,   394,   395,   396,   397,   398,     0,   860,   400,     0,
     401,   402,   403,     0,     0,   861,     0,   405,     0,   406,
     407,     0,   408,   409,     0,   410,     0,   411,     0,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,   862,     0,     0,   426,   427,
     428,   429,     0,     0,     0,   430,     0,     0,   863,   864,
       0,   432,   433,   434,   435,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,     0,     0,     0,     0,
     444,   445,     0,   446,     0,     0,   447,     0,     0,   448,
     449,     0,     0,     0,   450,     0,     0,   451,   452,     0,
     453,   454,   455,   456,   457,   458,     0,     0,   865,   460,
     461,   462,     0,   463,   464,     0,   465,     0,   466,   467,
     468,   469,     0,   138,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,     0,     0,   476,   477,   478,   866,
       0,     0,   479,   480,   481,   482,     0,   483,   484,     0,
     485,   486,     0,   487,   488,     0,     0,   489,     0,     0,
     490,   867,   491,   868,   492,   493,   494,     0,     0,     0,
       0,     0,     0,   495,     0,     0,   496,     0,     0,     0,
     497,   498,   499,   500,   501,   502,   503,     0,     0,     0,
       0,     0,     0,   504,   505,     0,   506,   507,   508,     0,
     141,   509,   142,   143,   144,   145,   146,   147,     0,     0,
     148,     0,     0,     0,   149,     0,     0,   150,     0,   151,
     152,   153,   154,   155,   156,   157,   158,     0,   159,     0,
       0,     0,   160,     0,     0,     0,   161,     0,     0,   162,
     163,   164,     0,   165,     0,   166,   167,     0,     0,   168,
       0,     0,   169,   170,     0,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,   198,     0,   199,
     200,   201,   202,   203,     0,   204,     0,     0,   205,     0,
       0,   206,     0,   207,     0,     0,   208,     0,   209,     0,
       0,     0,   210,   211,   212,     0,     0,   213,     0,     0,
       0,     0,   214,   215,  2550,     0,     0,     0,   216,     0,
     217,     0,     0,     0,   218,     0,   219,   220,   221,   222,
     223,     0,     0,     0,   224,     0,     0,   225,   226,   227,
       0,     0,     0,   228,     0,   229,   230,     0,   231,   232,
     233,     0,     0,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,     0,   243,   244,   245,     0,     0,
     246,   247,     0,   248,   249,   250,  2551,     0,   251,     0,
       0,     0,   252,     0,   253,     0,   254,     0,   255,   256,
     257,   258,   259,     0,   260,     0,   261,     0,     0,     0,
     262,   263,   264,     0,   265,  2552,     0,     0,   266,   267,
       0,     0,     0,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,     0,   276,     0,   277,     0,     0,     0,
       0,   278,   279,     0,     0,     0,   280,     0,   281,   282,
       0,   283,   284,     0,     0,     0,   285,     0,     0,   286,
     287,   288,     0,     0,   289,     0,     0,   290,   291,     0,
       0,     0,     0,     0,   292,   293,     0,   294,     0,   295,
       0,   296,   297,     0,     0,  2553,     0,     0,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,     0,   314,   315,   316,
     317,     0,   318,   319,   320,   321,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,     0,   332,     0,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,     0,     0,   345,   346,   347,   348,  1093,  1094,     0,
     349,   350,     0,     0,  2554,   351,     0,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,     0,     0,
       0,     0,     0,     0,     0,     0,   361,   362,   363,     0,
       0,   364,     0,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
       0,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,     0,     0,   389,   390,
     391,   392,   393,     0,     0,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,   402,   403,     0,     0,   404,
       0,   405,     0,   406,   407,     0,   408,   409,     0,   410,
       0,   411,     0,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
       0,     0,   426,   427,   428,   429,     0,     0,     0,   430,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,     0,     0,
    4739,   586,  4740,     0,   444,   445,     0,   446,     0,     0,
     447,     0,     0,   448,   449,     0,     0,     0,   450,     0,
       0,   451,   452,     0,   453,   454,   455,   456,   457,   458,
       0,     0,   459,   460,   461,   462,     0,   463,   464,     0,
     465,     0,   466,   467,   468,   469,     0,     0,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,     0,     0,
     476,   477,   478,     0,     0,     0,   479,   480,   481,   482,
    2555,   483,   484,     0,   485,   486,     0,   487,   488,     0,
       0,   489,     0,     0,   490,     0,   491,     0,   492,   493,
     494,     0,     0,     0,     0,     0,     0,   495,     0,     0,
     496,     0,     0,     0,   497,   498,   499,   500,   501,   502,
     503,     0,     0,     0,     0,     0,     0,   504,   505,     0,
     506,   507,   508,     0,   141,   509,   142,   143,   144,   145,
     146,   147,     0,     0,   148,     0,     0,     0,   149,     0,
       0,   150,     0,   151,   152,   153,   154,   155,   156,   157,
     158,     0,   159,     0,     0,     0,   160,     0,     0,     0,
     161,     0,     0,   162,   163,   164,     0,   165,     0,   166,
     167,     0,     0,   168,     0,     0,   169,   170,     0,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,   198,     0,   199,   200,   201,   202,   203,     0,   204,
       0,     0,   205,     0,     0,   206,     0,   207,     0,     0,
     208,     0,   209,     0,     0,     0,   210,   211,   212,     0,
       0,   213,     0,     0,     0,     0,   214,   215,  1674,     0,
       0,  3474,   216,     0,   217,     0,     0,     0,   218,     0,
     219,   220,   221,   222,   223,     0,     0,     0,   224,     0,
       0,   225,   226,   227,     0,     0,     0,   228,     0,   229,
     230,     0,   231,   232,   233,     0,     0,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,     0,   243,
     244,   245,     0,     0,   246,   247,     0,   248,   249,   250,
    1675,     0,   251,     0,     0,     0,   252,     0,   253,     0,
     254,     0,   255,   256,   257,   258,   259,     0,   260,     0,
     261,     0,     0,     0,   262,   263,   264,     0,   265,  2977,
       0,     0,   266,   267,     0,     0,     0,   268,   269,   270,
     271,   272,     0,     0,   273,   274,   275,     0,   276,     0,
     277,     0,     0,     0,     0,   278,   279,     0,     0,     0,
     280,     0,   281,   282,     0,   283,   284,     0,     0,     0,
     285,     0,     0,   286,   287,   288,     0,     0,   289,     0,
       0,   290,   291,     0,     0,     0,     0,     0,   292,   293,
       0,   294,     0,   295,     0,   296,   297,     0,     0,  2978,
       0,     0,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,   314,   315,   316,   317,     0,   318,   319,   320,   321,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,     0,   332,     0,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,     0,     0,   345,   346,   347,
     348,     0,     0,     0,   349,   350,     0,     0,  2979,   351,
       0,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,     0,     0,     0,     0,     0,     0,     0,     0,
     361,   362,   363,     0,     0,   364,     0,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,     0,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
       0,     0,   389,   390,   391,   392,   393,     0,     0,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   401,   402,
     403,     0,     0,   404,     0,   405,     0,   406,   407,     0,
     408,   409,     0,   410,     0,   411,     0,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,     0,     0,   426,   427,   428,   429,
       0,     0,     0,   430,     0,     0,     0,   431,     0,   432,
     433,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,     0,     0,     0,     0,     0,     0,   444,   445,
       0,   446,     0,     0,   447,     0,     0,   448,   449,     0,
       0,     0,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,   457,   458,     0,     0,   459,   460,   461,   462,
       0,   463,   464,     0,   465,     0,   466,   467,   468,   469,
       0,   138,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,     0,     0,   476,   477,   478,     0,     0,     0,
     479,   480,   481,   482,  2980,   483,   484,     0,   485,   486,
       0,   487,   488,     0,     0,   489,     0,     0,   490,     0,
     491,     0,   492,   493,   494,     0,     0,     0,     0,     0,
       0,   495,     0,     0,   496,     0,     0,     0,   497,   498,
     499,   500,   501,   502,   503,     0,     0,     0,     0,     0,
       0,   504,   505,     0,   506,   507,   508,     0,   141,   509,
     142,   143,   144,   145,   146,   147,     0,     0,   148,     0,
       0,     0,   149,     0,     0,   150,     0,   151,   152,   153,
     154,   155,   156,   157,   158,     0,   159,     0,     0,     0,
     160,     0,     0,     0,   161,     0,     0,   162,   163,   164,
       0,   165,     0,   166,   167,     0,     0,   168,     0,     0,
     169,   170,     0,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,   198,     0,   199,   200,   201,
     202,   203,     0,   204,     0,     0,   205,     0,     0,   206,
       0,   207,     0,     0,   208,     0,   209,     0,     0,     0,
     210,   211,   212,     0,     0,   213,     0,     0,     0,     0,
     214,   215,  1674,     0,     0,  4280,   216,     0,   217,     0,
       0,     0,   218,     0,   219,   220,   221,   222,   223,     0,
       0,     0,   224,     0,     0,   225,   226,   227,     0,     0,
       0,   228,     0,   229,   230,     0,   231,   232,   233,     0,
       0,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,     0,   243,   244,   245,     0,     0,   246,   247,
       0,   248,   249,   250,  1675,     0,   251,     0,     0,     0,
     252,     0,   253,     0,   254,     0,   255,   256,   257,   258,
     259,     0,   260,     0,   261,     0,     0,     0,   262,   263,
     264,     0,   265,  2977,     0,     0,   266,   267,     0,     0,
       0,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,     0,   276,     0,   277,     0,     0,     0,     0,   278,
     279,     0,     0,     0,   280,     0,   281,   282,     0,   283,
     284,     0,     0,     0,   285,     0,     0,   286,   287,   288,
       0,     0,   289,     0,     0,   290,   291,     0,     0,     0,
       0,     0,   292,   293,     0,   294,     0,   295,     0,   296,
     297,     0,     0,  2978,     0,     0,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,   314,   315,   316,   317,     0,
     318,   319,   320,   321,     0,   322,   323,     0,     0,     0,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,     0,   332,     0,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,     0,
       0,   345,   346,   347,   348,     0,     0,     0,   349,   350,
       0,     0,  2979,   351,     0,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,     0,     0,     0,     0,
       0,     0,     0,     0,   361,   362,   363,     0,     0,   364,
       0,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,     0,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
       0,     0,   388,     0,     0,     0,   389,   390,   391,   392,
     393,     0,     0,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,   402,   403,     0,     0,   404,     0,   405,
       0,   406,   407,     0,   408,   409,     0,   410,     0,   411,
       0,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,     0,     0,
     426,   427,   428,   429,     0,     0,     0,   430,     0,     0,
       0,   431,     0,   432,   433,   434,   435,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,     0,     0,
       0,     0,   444,   445,     0,   446,     0,     0,   447,     0,
       0,   448,   449,     0,     0,     0,   450,     0,     0,   451,
     452,     0,   453,   454,   455,   456,   457,   458,     0,     0,
     459,   460,   461,   462,     0,   463,   464,     0,   465,     0,
     466,   467,   468,   469,     0,   138,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,     0,     0,   476,   477,
     478,     0,     0,     0,   479,   480,   481,   482,  2980,   483,
     484,     0,   485,   486,     0,   487,   488,     0,     0,   489,
       0,     0,   490,     0,   491,     0,   492,   493,   494,     0,
       0,     0,     0,     0,     0,   495,     0,     0,   496,     0,
       0,     0,   497,   498,   499,   500,   501,   502,   503,     0,
       0,     0,     0,     0,     0,   504,   505,     0,   506,   507,
     508,     0,   141,   509,   142,   143,   144,   145,   146,   147,
       0,     0,   148,     0,     0,     0,   149,     0,     0,   150,
       0,   151,   152,   153,   154,   155,   156,   157,   158,     0,
     159,     0,     0,     0,   160,     0,     0,     0,   161,     0,
       0,   162,   163,   164,     0,   165,     0,   166,   167,     0,
       0,   168,     0,     0,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,   198,
       0,   199,   200,   201,   202,   203,     0,   204,     0,     0,
     205,     0,     0,   206,     0,   207,     0,     0,   208,     0,
     209,     0,     0,     0,   210,   211,   212,     0,     0,   213,
       0,     0,     0,     0,   214,   215,  1674,     0,     0,  4541,
     216,     0,   217,     0,     0,     0,   218,     0,   219,   220,
     221,   222,   223,     0,     0,     0,   224,     0,     0,   225,
     226,   227,     0,     0,     0,   228,     0,   229,   230,     0,
     231,   232,   233,     0,     0,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,     0,   243,   244,   245,
       0,     0,   246,   247,     0,   248,   249,   250,  1675,     0,
     251,     0,     0,     0,   252,     0,   253,     0,   254,     0,
     255,   256,   257,   258,   259,     0,   260,     0,   261,     0,
       0,     0,   262,   263,   264,     0,   265,  2977,     0,     0,
     266,   267,     0,     0,     0,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,     0,   276,     0,   277,     0,
       0,     0,     0,   278,   279,     0,     0,     0,   280,     0,
     281,   282,     0,   283,   284,     0,     0,     0,   285,     0,
       0,   286,   287,   288,     0,     0,   289,     0,     0,   290,
     291,     0,     0,     0,     0,     0,   292,   293,     0,   294,
       0,   295,     0,   296,   297,     0,     0,  2978,     0,     0,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,
     315,   316,   317,     0,   318,   319,   320,   321,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,     0,   332,     0,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,     0,     0,   345,   346,   347,   348,     0,
       0,     0,   349,   350,     0,     0,  2979,   351,     0,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
       0,     0,     0,     0,     0,     0,     0,     0,   361,   362,
     363,     0,     0,   364,     0,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,     0,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,     0,     0,   388,     0,     0,     0,
     389,   390,   391,   392,   393,     0,     0,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   401,   402,   403,     0,
       0,   404,     0,   405,     0,   406,   407,     0,   408,   409,
       0,   410,     0,   411,     0,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,     0,     0,   426,   427,   428,   429,     0,     0,
       0,   430,     0,     0,     0,   431,     0,   432,   433,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,     0,     0,     0,     0,   444,   445,     0,   446,
       0,     0,   447,     0,     0,   448,   449,     0,     0,     0,
     450,     0,     0,   451,   452,     0,   453,   454,   455,   456,
     457,   458,     0,     0,   459,   460,   461,   462,     0,   463,
     464,     0,   465,     0,   466,   467,   468,   469,     0,   138,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
       0,     0,   476,   477,   478,     0,     0,     0,   479,   480,
     481,   482,  2980,   483,   484,     0,   485,   486,     0,   487,
     488,     0,     0,   489,     0,     0,   490,     0,   491,     0,
     492,   493,   494,     0,     0,     0,     0,     0,     0,   495,
       0,     0,   496,     0,     0,     0,   497,   498,   499,   500,
     501,   502,   503,     0,     0,     0,     0,     0,     0,   504,
     505,     0,   506,   507,   508,     0,   141,   509,   142,   143,
     144,   145,   146,   147,     0,     0,   148,     0,     0,     0,
     149,     0,     0,   150,     0,   151,   152,   153,   154,   155,
     156,   157,   158,     0,   159,     0,     0,  1443,   160,     0,
       0,     0,   161,     0,     0,   162,   163,   164,     0,   165,
       0,   166,   167,     0,     0,   168,     0,     0,   169,   170,
       0,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,   198,     0,   199,   200,   201,   202,   203,
       0,   204,     0,     0,   205,     0,     0,   206,     0,   207,
       0,     0,   208,     0,   209,     0,     0,     0,   210,   211,
     212,     0,     0,   213,     0,     0,     0,     0,   214,   215,
       0,     0,     0,  1444,   216,     0,   217,     0,     0,     0,
     218,     0,   219,   220,   221,   222,   223,     0,     0,     0,
     224,     0,     0,   225,   226,   227,     0,     0,     0,   228,
       0,   229,   230,     0,   231,   232,   233,  1445,     0,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
       0,   243,   244,   245,     0,     0,   246,   247,     0,   248,
     249,   250,     0,     0,   251,     0,     0,     0,   252,     0,
     253,     0,   254,     0,   255,   256,   257,   258,   259,     0,
     260,     0,   261,     0,     0,     0,   262,   263,   264,     0,
     265,     0,     0,     0,   266,   267,     0,     0,     0,   268,
     269,   270,   271,   272,     0,     0,   273,   274,   275,     0,
     276,     0,   277,     0,     0,     0,     0,   278,   279,     0,
       0,     0,   280,     0,   281,   282,     0,   283,   284,     0,
       0,     0,   285,     0,     0,   286,   287,   288,     0,     0,
     289,     0,     0,   290,   291,   639,     0,     0,     0,     0,
     292,   293,     0,   294,     0,   295,     0,   296,   297,     0,
       0,     0,     0,     0,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,     0,   314,   315,   316,   317,     0,   318,   319,
     320,   321,     0,   322,   323,     0,     0,     0,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,     0,
     332,     0,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,     0,     0,   345,
     346,   347,   348,     0,     0,     0,   349,   350,     0,     0,
       0,   351,     0,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,     0,     0,     0,     0,     0,     0,
       0,     0,   361,   362,   363,     0,     0,   364,     0,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,     0,   379,     0,   380,
     381,   382,   383,   384,     0,   385,   386,   387,     0,     0,
     388,     0,     0,     0,   389,   390,   391,   392,   393,     0,
       0,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     401,   402,   403,     0,     0,   404,     0,   405,     0,   406,
     407,     0,   408,   409,     0,   410,     0,   411,     0,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,     0,     0,   426,   427,
     428,   429,     0,     0,  1446,   430,     0,     0,     0,   431,
       0,   432,   433,   434,   435,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,     0,     0,     0,     0,
     444,   445,     0,   446,     0,     0,   447,     0,     0,   448,
     449,     0,     0,     0,   450,     0,     0,   451,   452,     0,
     453,   454,   455,   456,   457,   458,     0,     0,   459,   460,
     461,   462,     0,   463,   464,     0,   465,     0,   466,   467,
     468,   469,     0,   138,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,     0,     0,   476,   477,   478,     0,
       0,     0,   479,   480,   481,   482,     0,   483,   484,     0,
     485,   486,     0,   487,   488,     0,     0,   489,     0,     0,
     490,     0,   491,     0,   492,   493,   494,     0,     0,     0,
       0,     0,     0,   495,     0,     0,   496,     0,     0,     0,
     497,   498,   499,   500,   501,   502,   503,     0,     0,     0,
       0,     0,     0,   504,   505,     0,   506,   507,   508,     0,
     141,   509,   142,   143,   144,   145,   146,   147,     0,     0,
     148,     0,     0,     0,   149,     0,     0,   150,     0,   151,
     152,   153,   154,   155,   156,   157,   158,     0,   159,     0,
       0,     0,   160,     0,     0,     0,   161,     0,     0,   162,
     163,   164,     0,   165,     0,   166,   167,     0,     0,   168,
       0,     0,   169,   170,     0,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,   198,     0,   199,
     200,   201,   202,   203,     0,   204,     0,     0,   205,     0,
       0,   206,     0,   207,  1045,   847,   208,     0,   209,     0,
       0,     0,   210,   211,   212,     0,     0,   213,     0,     0,
       0,     0,   214,   215,     0,     0,     0,     0,   216,     0,
     217,     0,     0,     0,   218,     0,   219,   220,   221,   222,
     223,     0,     0,     0,   224,     0,     0,   225,   226,   227,
       0,     0,     0,   228,     0,   229,   230,     0,   231,   232,
     233,     0,     0,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,     0,   243,   244,   245,     0,     0,
     246,   247,     0,   248,   249,   250,     0,     0,   251,     0,
       0,     0,   252,     0,   253,     0,   254,     0,   255,   256,
     257,   258,   259,     0,   260,     0,   261,     0,     0,     0,
     262,   263,   264,     0,   265,     0,     0,     0,   266,   267,
       0,     0,     0,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,     0,   276,     0,   277,     0,     0,     0,
       0,   278,   279,     0,     0,     0,   280,     0,   281,   282,
       0,   283,   284,     0,     0,     0,   285,     0,     0,   286,
     287,   288,     0,     0,   289,     0,     0,   290,   291,   639,
       0,     0,     0,     0,   292,   293,     0,   294,     0,   295,
       0,   296,   297,     0,     0,     0,     0,     0,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,     0,   314,   315,   316,
     317,     0,   318,   319,   320,   321,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,     0,   332,     0,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,     0,     0,   345,   346,   347,   348,     0,     0,     0,
     349,   350,     0,     0,     0,   351,     0,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,     0,     0,
       0,     0,     0,     0,     0,     0,   361,   362,   363,     0,
       0,   364,     0,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
       0,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,     0,     0,   389,   390,
     391,   392,   393,     0,     0,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,   402,   403,     0,     0,   404,
       0,   405,     0,   406,   407,     0,   408,   409,     0,   410,
       0,   411,     0,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
       0,     0,   426,   427,   428,   429,     0,     0,     0,   430,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,     0,     0,
       0,     0,     0,     0,   444,   445,     0,   446,     0,     0,
     447,     0,     0,   448,   449,     0,     0,     0,   450,     0,
       0,   451,   452,     0,   453,   454,   455,   456,   457,   458,
       0,     0,   459,   460,   461,   462,     0,   463,   464,     0,
     465,     0,   466,   467,   468,   469,     0,   138,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,     0,     0,
     476,   477,   478,     0,     0,     0,   479,   480,   481,   482,
       0,   483,   484,     0,   485,   486,     0,   487,   488,     0,
       0,   489,     0,     0,   490,     0,   491,     0,   492,   493,
     494,     0,     0,     0,     0,     0,     0,   495,     0,     0,
     496,     0,     0,     0,   497,   498,   499,   500,   501,   502,
     503,     0,     0,     0,     0,     0,     0,   504,   505,     0,
     506,   507,   508,     0,   141,   509,   142,   143,   144,   145,
     146,   147,     0,     0,   148,     0,     0,     0,   149,     0,
       0,   150,     0,   151,   152,   153,   154,   155,   156,   157,
     158,     0,   159,     0,     0,  1457,   160,     0,     0,     0,
     161,     0,     0,   162,   163,   164,     0,   165,     0,   166,
     167,     0,     0,   168,     0,     0,   169,   170,     0,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,   198,     0,   199,   200,   201,   202,   203,     0,   204,
       0,     0,   205,     0,     0,   206,     0,   207,     0,     0,
     208,     0,   209,     0,     0,     0,   210,   211,   212,     0,
       0,   213,     0,     0,     0,     0,   214,   215,     0,     0,
       0,  1458,   216,     0,   217,     0,     0,     0,   218,     0,
     219,   220,   221,   222,   223,     0,     0,     0,   224,     0,
       0,   225,   226,   227,     0,     0,     0,   228,     0,   229,
     230,     0,   231,   232,   233,     0,     0,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,     0,   243,
     244,   245,     0,     0,   246,   247,     0,   248,   249,   250,
       0,     0,   251,     0,     0,     0,   252,     0,   253,     0,
     254,     0,   255,   256,   257,   258,   259,     0,   260,     0,
     261,     0,     0,     0,   262,   263,   264,     0,   265,     0,
       0,     0,   266,   267,     0,     0,     0,   268,   269,   270,
     271,   272,     0,     0,   273,   274,   275,     0,   276,     0,
     277,     0,     0,     0,     0,   278,   279,     0,     0,     0,
     280,     0,   281,   282,     0,   283,   284,     0,     0,     0,
     285,     0,     0,   286,   287,   288,     0,     0,   289,     0,
       0,   290,   291,   639,     0,     0,     0,     0,   292,   293,
       0,   294,     0,   295,     0,   296,   297,     0,     0,     0,
       0,     0,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,   314,   315,   316,   317,     0,   318,   319,   320,   321,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,     0,   332,     0,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,     0,     0,   345,   346,   347,
     348,     0,     0,     0,   349,   350,     0,     0,     0,   351,
       0,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,     0,     0,     0,     0,     0,     0,     0,     0,
     361,   362,   363,     0,     0,   364,     0,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,     0,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
       0,     0,   389,   390,   391,   392,   393,     0,     0,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   401,   402,
     403,     0,     0,   404,     0,   405,     0,   406,   407,     0,
     408,   409,     0,   410,     0,   411,     0,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,     0,     0,   426,   427,   428,   429,
       0,     0,     0,   430,     0,     0,     0,   431,     0,   432,
     433,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,     0,     0,     0,     0,     0,     0,   444,   445,
       0,   446,     0,     0,   447,     0,     0,   448,   449,     0,
       0,     0,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,   457,   458,     0,     0,   459,   460,   461,   462,
       0,   463,   464,     0,   465,     0,   466,   467,   468,   469,
       0,   138,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,     0,     0,   476,   477,   478,     0,     0,     0,
     479,   480,   481,   482,     0,   483,   484,     0,   485,   486,
       0,   487,   488,     0,     0,   489,     0,     0,   490,     0,
     491,     0,   492,   493,   494,     0,     0,     0,     0,     0,
       0,   495,     0,     0,   496,     0,     0,     0,   497,   498,
     499,   500,   501,   502,   503,     0,     0,     0,     0,     0,
       0,   504,   505,     0,   506,   507,   508,     0,   141,   509,
     142,   143,   144,   145,   146,   147,     0,     0,   148,     0,
       0,     0,   149,     0,     0,   150,     0,   151,   152,   153,
     154,   155,   156,   157,   158,     0,   159,     0,     0,     0,
     160,  1022,     0,     0,   161,     0,     0,   162,   163,   164,
       0,   165,     0,   166,   167,     0,     0,   168,     0,     0,
     169,   170,     0,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,   198,     0,   199,   200,   201,
     202,   203,     0,   204,     0,     0,   205,     0,     0,   206,
       0,   207,     0,     0,   208,     0,   209,     0,     0,     0,
     210,   211,   212,     0,     0,   213,     0,     0,     0,     0,
     214,   215,     0,     0,     0,     0,   216,     0,   217,     0,
       0,     0,   218,     0,   219,   220,   221,   222,   223,     0,
       0,     0,   224,     0,     0,   225,   226,   227,     0,     0,
       0,   228,     0,   229,   230,     0,   231,   232,   233,     0,
       0,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,     0,   243,   244,   245,     0,     0,   246,   247,
       0,   248,   249,   250,     0,     0,   251,     0,     0,     0,
     252,     0,   253,     0,   254,     0,   255,   256,   257,   258,
     259,     0,   260,     0,   261,     0,     0,     0,   262,   263,
     264,     0,   265,  1023,  1024,     0,   266,   267,     0,     0,
       0,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,     0,   276,     0,   277,     0,     0,     0,     0,   278,
     279,     0,     0,     0,   280,     0,   281,   282,     0,   283,
     284,     0,     0,     0,   285,     0,     0,   286,   287,   288,
       0,     0,   289,     0,     0,   290,   291,     0,     0,     0,
       0,     0,   292,   293,     0,   294,     0,   295,     0,   296,
     297,     0,     0,     0,     0,     0,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,   314,   315,   316,   317,     0,
     318,   319,   320,   321,     0,   322,   323,     0,     0,     0,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,     0,   332,     0,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,     0,
       0,   345,   346,   347,   348,     0,     0,     0,   349,   350,
       0,     0,     0,   351,     0,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,     0,     0,     0,     0,
       0,     0,     0,     0,   361,   362,   363,     0,     0,   364,
       0,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,     0,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
       0,     0,   388,     0,     0,     0,   389,   390,   391,   392,
     393,     0,     0,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,   402,   403,     0,     0,   404,     0,   405,
       0,   406,   407,     0,   408,   409,     0,   410,     0,   411,
       0,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,     0,     0,
     426,   427,   428,   429,     0,     0,     0,   430,     0,     0,
       0,   431,     0,   432,   433,   434,   435,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,     0,     0,
       0,     0,   444,   445,     0,   446,     0,     0,   447,     0,
       0,   448,   449,     0,     0,     0,   450,     0,     0,   451,
     452,     0,   453,   454,   455,   456,   457,   458,     0,     0,
     459,   460,   461,   462,     0,   463,   464,     0,   465,     0,
     466,   467,   468,   469,     0,  1025,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,     0,     0,   476,   477,
     478,     0,     0,     0,   479,   480,   481,   482,     0,   483,
     484,     0,   485,   486,     0,   487,   488,     0,     0,   489,
       0,     0,   490,     0,   491,     0,   492,   493,   494,     0,
       0,     0,     0,     0,     0,   495,     0,     0,   496,     0,
       0,     0,   497,   498,   499,   500,   501,   502,   503,     0,
       0,     0,     0,     0,     0,   504,   505,     0,   506,   507,
     508,     0,   141,   509,   142,   143,   144,   145,   146,   147,
       0,     0,   148,     0,     0,     0,   149,     0,     0,   150,
       0,   151,   152,   153,   154,   155,   156,   157,   158,     0,
     159,     0,     0,     0,   160,     0,     0,     0,   161,     0,
       0,   162,   163,   164,     0,   165,     0,   166,   167,     0,
       0,   168,     0,     0,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,   198,
       0,   199,   200,   201,   202,   203,     0,   204,     0,     0,
     205,     0,     0,   206,     0,   207,     0,     0,   208,     0,
     209,     0,     0,     0,   210,   211,   212,     0,     0,   213,
       0,     0,     0,     0,   214,   215,     0,     0,     0,     0,
     216,     0,   217,     0,     0,     0,   218,     0,   219,   220,
     221,   222,   223,     0,     0,     0,   224,     0,     0,   225,
     226,   227,     0,     0,     0,   228,     0,   229,   230,     0,
     231,   232,   233,     0,     0,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,     0,   243,   244,   245,
       0,     0,   246,   247,     0,   248,   249,   250,     0,     0,
     251,     0,     0,     0,   252,     0,   253,     0,   254,     0,
     255,   256,   257,   258,   259,     0,   260,     0,   261,     0,
       0,     0,   262,   263,   264,     0,   265,     0,     0,     0,
     266,   267,     0,     0,     0,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,     0,   276,     0,   277,     0,
       0,     0,     0,   278,   279,     0,     0,     0,   280,     0,
     281,   282,     0,   283,   284,     0,     0,     0,   285,     0,
       0,   286,   287,   288,     0,     0,   289,     0,     0,   290,
     291,     0,     0,     0,     0,     0,   292,   293,     0,   294,
       0,   295,     0,   296,   297,     0,     0,  2005,     0,     0,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,
     315,   316,   317,     0,   318,   319,   320,   321,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,     0,   332,     0,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,     0,     0,   345,   346,   347,   348,     0,
       0,     0,   349,   350,     0,     0,  2006,   351,     0,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
       0,     0,     0,     0,     0,     0,     0,     0,   361,   362,
     363,     0,   757,   364,     0,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,     0,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,     0,     0,   388,     0,     0,     0,
     389,   390,   391,   392,   393,     0,     0,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   401,   402,   403,     0,
       0,   404,     0,   405,     0,   406,   407,     0,   408,   409,
       0,   410,     0,   411,     0,     0,   412,   413,   414,   415,
    2007,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,     0,     0,   426,   427,   428,   429,     0,     0,
       0,   430,     0,     0,     0,   431,     0,   432,   433,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,     0,     0,     0,     0,   444,   445,     0,   446,
       0,     0,   447,     0,     0,   448,   449,     0,     0,     0,
     450,     0,     0,   451,   452,     0,   453,   454,   455,   456,
     457,   458,     0,     0,   459,   460,   461,   462,     0,   463,
     464,     0,   465,     0,   466,   467,   468,   469,     0,     0,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
       0,     0,   476,   477,   478,     0,     0,     0,   479,   480,
     481,   482,  2008,   483,   484,     0,   485,   486,     0,   487,
     488,     0,     0,   489,     0,     0,   490,     0,   491,     0,
     492,   493,   494,     0,     0,     0,     0,     0,     0,   495,
       0,     0,   496,     0,     0,     0,   497,   498,   499,   500,
     501,   502,   503,     0,     0,     0,     0,     0,     0,   504,
     505,     0,   506,   507,   508,     0,   141,   509,   142,   143,
     144,   145,   146,   147,     0,     0,   148,     0,     0,     0,
     149,     0,     0,   150,     0,   151,   152,   153,   154,   155,
     156,   157,   158,     0,   159,     0,     0,     0,   160,     0,
       0,     0,   161,     0,     0,   162,   163,   164,     0,   165,
       0,   166,   167,     0,     0,   168,     0,     0,   169,   170,
       0,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,   198,     0,   199,   200,   201,   202,   203,
       0,   204,     0,     0,   205,     0,     0,   206,     0,   207,
       0,     0,   208,     0,   209,     0,     0,     0,   210,   211,
     212,     0,     0,   213,     0,     0,     0,     0,   214,   215,
       0,     0,     0,     0,   216,     0,   217,     0,     0,     0,
     218,     0,   219,   220,   221,   222,   223,     0,     0,     0,
     224,     0,     0,   225,   226,   227,     0,     0,     0,   228,
       0,   229,   230,     0,   231,   232,   233,     0,     0,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
       0,   243,   244,   245,     0,     0,   246,   247,     0,   248,
     249,   250,     0,     0,   251,     0,     0,     0,   252,     0,
     253,     0,   254,     0,   255,   256,   257,   258,   259,     0,
     260,     0,   261,     0,     0,     0,   262,   263,   264,     0,
     265,     0,     0,     0,   266,   267,     0,     0,     0,   268,
     269,   270,   271,   272,     0,     0,   273,   274,   275,     0,
     276,     0,   277,     0,     0,     0,     0,   278,   279,     0,
       0,     0,   280,     0,   281,   282,     0,   283,   284,     0,
       0,     0,   285,     0,     0,   286,   287,   288,     0,     0,
     289,     0,     0,   290,   291,     0,     0,     0,     0,     0,
     292,   293,     0,   294,     0,   295,     0,   296,   297,     0,
       0,  2005,     0,     0,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,     0,   314,   315,   316,   317,     0,   318,   319,
     320,   321,     0,   322,   323,     0,     0,     0,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,     0,
     332,     0,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,     0,     0,   345,
     346,   347,   348,     0,     0,     0,   349,   350,     0,     0,
    2006,   351,     0,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,     0,     0,     0,     0,     0,     0,
       0,     0,   361,   362,   363,     0,   757,   364,     0,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,     0,   379,     0,   380,
     381,   382,   383,   384,     0,   385,   386,   387,     0,     0,
     388,     0,     0,     0,   389,   390,   391,   392,   393,     0,
       0,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     401,   402,   403,     0,     0,   404,     0,   405,     0,   406,
     407,     0,   408,   409,     0,   410,     0,   411,     0,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,     0,     0,   426,   427,
     428,   429,     0,     0,     0,   430,     0,     0,     0,   431,
       0,   432,   433,   434,   435,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,     0,     0,     0,     0,
     444,   445,     0,   446,     0,     0,   447,     0,     0,   448,
     449,     0,     0,     0,   450,     0,     0,   451,   452,     0,
     453,   454,   455,   456,   457,   458,     0,     0,   459,   460,
     461,   462,     0,   463,   464,     0,   465,     0,   466,   467,
     468,   469,     0,     0,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,     0,     0,   476,   477,   478,     0,
       0,     0,   479,   480,   481,   482,  2008,   483,   484,     0,
     485,   486,     0,   487,   488,     0,     0,   489,     0,     0,
     490,     0,   491,     0,   492,   493,   494,     0,     0,     0,
       0,     0,     0,   495,     0,     0,   496,     0,     0,     0,
     497,   498,   499,   500,   501,   502,   503,     0,     0,     0,
       0,     0,     0,   504,   505,     0,   506,   507,   508,     0,
     141,   509,   142,   143,   144,   145,   146,   147,     0,     0,
     148,     0,     0,     0,   149,     0,     0,   150,     0,   151,
     152,   153,   154,   155,   156,   157,   158,     0,   159,     0,
       0,  1443,   160,     0,     0,     0,   161,     0,     0,   162,
     163,   164,     0,   165,     0,   166,   167,     0,     0,   168,
       0,     0,   169,   170,     0,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,   198,     0,   199,
     200,   201,   202,   203,     0,   204,     0,     0,   205,     0,
       0,   206,     0,   207,     0,     0,   208,     0,   209,     0,
       0,     0,   210,   211,   212,     0,     0,   213,     0,     0,
       0,     0,   214,   215,     0,     0,     0,  1444,   216,     0,
     217,     0,     0,     0,   218,     0,   219,   220,   221,   222,
     223,     0,     0,     0,   224,     0,     0,   225,   226,   227,
       0,     0,     0,   228,     0,   229,   230,     0,   231,   232,
     233,     0,     0,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,     0,   243,   244,   245,     0,     0,
     246,   247,     0,   248,   249,   250,     0,     0,   251,     0,
       0,     0,   252,     0,   253,     0,   254,     0,   255,   256,
     257,   258,   259,     0,   260,     0,   261,     0,     0,     0,
     262,   263,   264,     0,   265,     0,     0,     0,   266,   267,
       0,     0,     0,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,     0,   276,     0,   277,     0,     0,     0,
       0,   278,   279,     0,     0,     0,   280,     0,   281,   282,
       0,   283,   284,     0,     0,     0,   285,     0,     0,   286,
     287,   288,     0,     0,   289,     0,     0,   290,   291,   639,
       0,     0,     0,     0,   292,   293,     0,   294,     0,   295,
       0,   296,   297,     0,     0,     0,     0,     0,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,     0,   314,   315,   316,
     317,     0,   318,   319,   320,   321,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,     0,   332,     0,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,     0,     0,   345,   346,   347,   348,     0,     0,     0,
     349,   350,     0,     0,     0,   351,     0,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,     0,     0,
       0,     0,     0,     0,     0,     0,   361,   362,   363,     0,
       0,   364,     0,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
       0,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,     0,     0,   389,   390,
     391,   392,   393,     0,     0,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,   402,   403,     0,     0,   404,
       0,   405,     0,   406,   407,     0,   408,   409,     0,   410,
       0,   411,     0,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
       0,     0,   426,   427,   428,   429,     0,     0,     0,   430,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,     0,     0,
       0,     0,     0,     0,   444,   445,     0,   446,     0,     0,
     447,     0,     0,   448,   449,     0,     0,     0,   450,     0,
       0,   451,   452,     0,   453,   454,   455,   456,   457,   458,
       0,     0,   459,   460,   461,   462,     0,   463,   464,     0,
     465,     0,   466,   467,   468,   469,     0,   138,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,     0,     0,
     476,   477,   478,     0,     0,     0,   479,   480,   481,   482,
       0,   483,   484,     0,   485,   486,     0,   487,   488,     0,
       0,   489,     0,     0,   490,     0,   491,     0,   492,   493,
     494,     0,     0,     0,     0,     0,     0,   495,     0,     0,
     496,     0,     0,     0,   497,   498,   499,   500,   501,   502,
     503,     0,     0,     0,     0,     0,     0,   504,   505,     0,
     506,   507,   508,     0,   141,   509,   142,   143,   144,   145,
     146,   147,     0,     0,   148,     0,     0,     0,   149,     0,
       0,   150,     0,   151,   152,   153,   154,   155,   156,   157,
     158,     0,   159,     0,     0,     0,   160,     0,     0,     0,
     161,     0,     0,   162,   163,   164,     0,   165,     0,   166,
     167,     0,     0,   168,     0,     0,   169,   170,     0,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,   198,     0,   199,   200,   201,   202,   203,     0,   204,
       0,     0,   205,     0,     0,   206,     0,   207,     0,     0,
     208,     0,   209,     0,     0,     0,   210,   211,   212,     0,
       0,   213,     0,     0,     0,     0,   214,   215,     0,     0,
       0,     0,   216,     0,   217,     0,     0,     0,   218,     0,
     219,   220,   221,   222,   223,     0,     0,     0,   224,     0,
       0,   225,   226,   227,     0,     0,     0,   228,     0,   229,
     230,     0,   231,   232,   233,     0,     0,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,     0,   243,
     244,   245,     0,     0,   246,   247,     0,   248,   249,   250,
       0,     0,   251,     0,     0,     0,   252,     0,   253,     0,
     254,     0,   255,   256,   257,   258,   259,     0,   260,     0,
     261,     0,     0,     0,   262,   263,   264,     0,   265,     0,
       0,     0,   266,   267,     0,     0,     0,   268,   269,   270,
     271,   272,     0,     0,   273,   274,   275,     0,   276,     0,
     277,     0,     0,     0,     0,   278,   279,     0,     0,     0,
     280,     0,   281,   282,     0,   283,   284,     0,     0,     0,
     285,     0,     0,   286,   287,   288,     0,     0,   289,     0,
       0,   290,   291,     0,     0,     0,     0,     0,   292,   293,
       0,   294,     0,   295,     0,   296,   297,     0,     0,  2005,
       0,     0,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,   314,   315,   316,   317,     0,   318,   319,   320,   321,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,     0,   332,     0,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,     0,     0,   345,   346,   347,
     348,     0,     0,     0,   349,   350,     0,     0,  2006,   351,
       0,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,     0,     0,     0,     0,     0,     0,     0,     0,
     361,   362,   363,     0,   757,   364,     0,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,     0,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
       0,     0,   389,   390,   391,   392,   393,     0,     0,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   401,   402,
     403,     0,     0,   404,     0,   405,     0,   406,   407,     0,
     408,   409,     0,   410,     0,   411,     0,     0,   412,   413,
     414,   415,  4012,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,     0,     0,   426,   427,   428,   429,
       0,     0,     0,   430,     0,     0,     0,   431,     0,   432,
     433,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,     0,     0,     0,     0,     0,     0,   444,   445,
       0,   446,     0,     0,   447,     0,     0,   448,   449,     0,
       0,     0,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,   457,   458,     0,     0,   459,   460,   461,   462,
       0,   463,   464,     0,   465,     0,   466,   467,   468,   469,
       0,     0,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,     0,     0,   476,   477,   478,     0,     0,     0,
     479,   480,   481,   482,  2008,   483,   484,     0,   485,   486,
       0,   487,   488,     0,     0,   489,     0,     0,   490,     0,
     491,     0,   492,   493,   494,     0,     0,     0,     0,     0,
       0,   495,     0,     0,   496,     0,     0,     0,   497,   498,
     499,   500,   501,   502,   503,     0,     0,     0,     0,     0,
       0,   504,   505,     0,   506,   507,   508,     0,   141,   509,
     142,   143,   144,   145,   146,   147,     0,     0,   148,     0,
       0,     0,   149,     0,     0,   150,     0,   151,   152,   153,
     154,   155,   156,   157,   158,     0,   159,     0,     0,     0,
     160,     0,     0,     0,   161,     0,     0,   162,   163,   164,
       0,   165,     0,   166,   167,     0,     0,   168,     0,     0,
     169,   170,     0,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,   198,     0,   199,   200,   201,
     202,   203,     0,   204,     0,     0,   205,     0,     0,   206,
       0,   207,     0,   847,   208,     0,   209,     0,     0,     0,
     210,   211,   212,     0,     0,   213,     0,     0,     0,     0,
     214,   215,     0,     0,     0,     0,   216,     0,   217,     0,
       0,     0,   218,     0,   219,   220,   221,   222,   223,     0,
       0,     0,   224,     0,     0,   225,   226,   227,     0,     0,
       0,   228,     0,   229,   230,     0,   231,   232,   233,     0,
       0,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,     0,   243,   244,   245,     0,     0,   246,   247,
       0,   248,   249,   250,     0,     0,   251,     0,     0,     0,
     252,     0,   253,     0,   254,     0,   255,   256,   257,   258,
     259,     0,   260,     0,   261,     0,     0,     0,   262,   263,
     264,     0,   265,     0,     0,     0,   266,   267,     0,     0,
       0,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,     0,   276,     0,   277,     0,     0,     0,     0,   278,
     279,     0,     0,     0,   280,     0,   281,   282,     0,   283,
     284,     0,     0,     0,   285,     0,     0,   286,   287,   288,
       0,     0,   289,     0,     0,   290,   291,   639,     0,     0,
       0,     0,   292,   293,     0,   294,     0,   295,     0,   296,
     297,     0,     0,     0,     0,     0,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,   314,   315,   316,   317,     0,
     318,   319,   320,   321,     0,   322,   323,     0,     0,     0,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,     0,   332,     0,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,     0,
       0,   345,   346,   347,   348,     0,     0,     0,   349,   350,
       0,     0,     0,   351,     0,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,     0,     0,     0,     0,
       0,     0,     0,     0,   361,   362,   363,     0,     0,   364,
       0,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,     0,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
       0,     0,   388,     0,     0,     0,   389,   390,   391,   392,
     393,     0,     0,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,   402,   403,     0,     0,   404,     0,   405,
       0,   406,   407,     0,   408,   409,     0,   410,     0,   411,
       0,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,     0,     0,
     426,   427,   428,   429,     0,     0,     0,   430,     0,     0,
       0,   431,     0,   432,   433,   434,   435,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,     0,     0,
       0,     0,   444,   445,     0,   446,     0,     0,   447,     0,
       0,   448,   449,     0,     0,     0,   450,     0,     0,   451,
     452,     0,   453,   454,   455,   456,   457,   458,     0,     0,
     459,   460,   461,   462,     0,   463,   464,     0,   465,     0,
     466,   467,   468,   469,     0,   138,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,     0,     0,   476,   477,
     478,     0,     0,     0,   479,   480,   481,   482,     0,   483,
     484,     0,   485,   486,     0,   487,   488,     0,     0,   489,
       0,     0,   490,     0,   491,     0,   492,   493,   494,     0,
       0,     0,     0,     0,     0,   495,     0,     0,   496,     0,
       0,     0,   497,   498,   499,   500,   501,   502,   503,     0,
       0,     0,     0,     0,     0,   504,   505,     0,   506,   507,
     508,     0,   141,   509,   142,   143,   144,   145,   146,   147,
       0,     0,   148,     0,     0,     0,   149,     0,     0,   150,
       0,   151,   152,   153,   154,   155,   156,   157,   158,     0,
     159,     0,     0,     0,   160,     0,     0,     0,   161,     0,
       0,   162,   163,   164,     0,   165,     0,   166,   167,     0,
       0,   168,     0,     0,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,   198,
       0,   199,   200,   201,   202,   203,     0,   204,     0,     0,
     205,     0,     0,   206,     0,   207,  1045,     0,   208,     0,
     209,     0,     0,     0,   210,   211,   212,     0,     0,   213,
       0,     0,     0,     0,   214,   215,     0,     0,     0,     0,
     216,     0,   217,     0,     0,     0,   218,     0,   219,   220,
     221,   222,   223,     0,     0,     0,   224,     0,     0,   225,
     226,   227,     0,     0,     0,   228,     0,   229,   230,     0,
     231,   232,   233,     0,     0,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,     0,   243,   244,   245,
       0,     0,   246,   247,     0,   248,   249,   250,     0,     0,
     251,     0,     0,     0,   252,     0,   253,     0,   254,     0,
     255,   256,   257,   258,   259,     0,   260,     0,   261,     0,
       0,     0,   262,   263,   264,     0,   265,     0,     0,     0,
     266,   267,     0,     0,     0,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,     0,   276,     0,   277,     0,
       0,     0,     0,   278,   279,     0,     0,     0,   280,     0,
     281,   282,     0,   283,   284,     0,     0,     0,   285,     0,
       0,   286,   287,   288,     0,     0,   289,     0,     0,   290,
     291,   639,     0,     0,     0,     0,   292,   293,     0,   294,
       0,   295,     0,   296,   297,     0,     0,     0,     0,     0,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,
     315,   316,   317,     0,   318,   319,   320,   321,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,     0,   332,     0,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,     0,     0,   345,   346,   347,   348,     0,
       0,     0,   349,   350,     0,     0,     0,   351,     0,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
       0,     0,     0,     0,     0,     0,     0,     0,   361,   362,
     363,     0,     0,   364,     0,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,     0,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,     0,     0,   388,     0,     0,     0,
     389,   390,   391,   392,   393,     0,     0,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   401,   402,   403,     0,
       0,   404,     0,   405,     0,   406,   407,     0,   408,   409,
       0,   410,     0,   411,     0,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,     0,     0,   426,   427,   428,   429,     0,     0,
       0,   430,     0,     0,     0,   431,     0,   432,   433,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,     0,     0,     0,     0,   444,   445,     0,   446,
       0,     0,   447,     0,     0,   448,   449,     0,     0,     0,
     450,     0,     0,   451,   452,     0,   453,   454,   455,   456,
     457,   458,     0,     0,   459,   460,   461,   462,     0,   463,
     464,     0,   465,     0,   466,   467,   468,   469,     0,   138,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
       0,     0,   476,   477,   478,     0,     0,     0,   479,   480,
     481,   482,     0,   483,   484,     0,   485,   486,     0,   487,
     488,     0,     0,   489,     0,     0,   490,     0,   491,     0,
     492,   493,   494,     0,     0,     0,     0,     0,     0,   495,
       0,     0,   496,     0,     0,     0,   497,   498,   499,   500,
     501,   502,   503,     0,     0,     0,     0,     0,     0,   504,
     505,     0,   506,   507,   508,     0,   141,   509,   142,   143,
     144,   145,   146,   147,  1480,     0,   148,     0,     0,     0,
     149,     0,     0,   150,     0,   151,   152,   153,   154,   155,
     156,   157,   158,     0,   159,     0,     0,     0,   160,     0,
       0,     0,   161,     0,     0,   162,   163,   164,     0,   165,
       0,   166,   167,     0,     0,   168,     0,     0,   169,   170,
       0,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,   198,     0,   199,   200,   201,   202,   203,
       0,   204,     0,     0,   205,     0,     0,   206,     0,   207,
       0,     0,   208,     0,   209,     0,     0,     0,   210,   211,
     212,     0,     0,   213,     0,     0,     0,     0,   214,   215,
       0,     0,     0,     0,   216,     0,   217,     0,     0,     0,
     218,     0,   219,   220,   221,   222,   223,     0,     0,     0,
     224,     0,     0,   225,   226,   227,     0,     0,     0,   228,
       0,   229,   230,     0,   231,   232,   233,     0,     0,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
       0,   243,   244,   245,     0,     0,   246,   247,     0,   248,
     249,   250,     0,     0,   251,     0,     0,     0,   252,     0,
     253,     0,   254,     0,   255,   256,   257,   258,   259,     0,
     260,     0,   261,     0,     0,     0,   262,   263,   264,     0,
     265,     0,     0,     0,   266,   267,     0,     0,     0,   268,
     269,   270,   271,   272,     0,     0,   273,   274,   275,     0,
     276,     0,   277,     0,     0,     0,     0,   278,   279,     0,
       0,     0,   280,     0,   281,   282,     0,   283,   284,     0,
       0,     0,   285,     0,     0,   286,   287,   288,     0,     0,
     289,     0,     0,   290,   291,   639,     0,     0,     0,     0,
     292,   293,     0,   294,     0,   295,     0,   296,   297,     0,
       0,     0,     0,     0,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,     0,   314,   315,   316,   317,     0,   318,   319,
     320,   321,     0,   322,   323,     0,     0,     0,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,     0,
     332,     0,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,     0,     0,   345,
     346,   347,   348,     0,     0,     0,   349,   350,     0,     0,
       0,   351,     0,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,     0,     0,     0,     0,     0,     0,
       0,     0,   361,   362,   363,     0,     0,   364,     0,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,     0,   379,     0,   380,
     381,   382,   383,   384,     0,   385,   386,   387,     0,     0,
     388,     0,     0,     0,   389,   390,   391,   392,   393,     0,
       0,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     401,   402,   403,     0,     0,   404,     0,   405,     0,   406,
     407,     0,   408,   409,     0,   410,     0,   411,     0,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,     0,     0,   426,   427,
     428,   429,     0,     0,     0,   430,     0,     0,     0,   431,
       0,   432,   433,   434,   435,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,     0,     0,     0,     0,
     444,   445,     0,   446,     0,     0,   447,     0,     0,   448,
     449,     0,     0,     0,   450,     0,     0,   451,   452,     0,
     453,   454,   455,   456,   457,   458,     0,     0,   459,   460,
     461,   462,     0,   463,   464,     0,   465,     0,   466,   467,
     468,   469,     0,   138,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,     0,     0,   476,   477,   478,     0,
       0,     0,   479,   480,   481,   482,     0,   483,   484,     0,
     485,   486,     0,   487,   488,     0,     0,   489,     0,     0,
     490,     0,   491,     0,   492,   493,   494,     0,     0,     0,
       0,     0,     0,   495,     0,     0,   496,     0,     0,     0,
     497,   498,   499,   500,   501,   502,   503,     0,     0,     0,
       0,     0,     0,   504,   505,     0,   506,   507,   508,     0,
     141,   509,   142,   143,   144,   145,   146,   147,     0,     0,
     148,     0,     0,     0,   149,     0,     0,   150,     0,   151,
     152,   153,   154,   155,   156,   157,   158,     0,   159,     0,
       0,     0,   160,     0,     0,     0,   161,     0,     0,   162,
     163,   164,     0,   165,     0,   166,   167,     0,     0,   168,
       0,     0,   169,   170,     0,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,   198,     0,   199,
     200,   201,   202,   203,     0,   204,     0,     0,   205,     0,
       0,   206,     0,   207,     0,     0,   208,     0,   209,     0,
       0,     0,   210,   211,   212,     0,     0,   213,     0,     0,
       0,     0,   214,   215,     0,     0,     0,  2467,   216,     0,
     217,     0,     0,     0,   218,     0,   219,   220,   221,   222,
     223,     0,     0,     0,   224,     0,     0,   225,   226,   227,
       0,     0,     0,   228,     0,   229,   230,     0,   231,   232,
     233,     0,     0,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,     0,   243,   244,   245,     0,     0,
     246,   247,     0,   248,   249,   250,     0,     0,   251,     0,
       0,     0,   252,     0,   253,     0,   254,     0,   255,   256,
     257,   258,   259,     0,   260,     0,   261,     0,     0,     0,
     262,   263,   264,     0,   265,     0,     0,     0,   266,   267,
       0,     0,     0,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,     0,   276,     0,   277,     0,     0,     0,
       0,   278,   279,     0,     0,     0,   280,     0,   281,   282,
       0,   283,   284,     0,     0,     0,   285,     0,     0,   286,
     287,   288,     0,     0,   289,     0,     0,   290,   291,   639,
       0,     0,     0,     0,   292,   293,     0,   294,     0,   295,
       0,   296,   297,     0,     0,     0,     0,     0,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,     0,   314,   315,   316,
     317,     0,   318,   319,   320,   321,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,     0,   332,     0,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,     0,     0,   345,   346,   347,   348,     0,     0,     0,
     349,   350,     0,     0,     0,   351,     0,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,     0,     0,
       0,     0,     0,     0,     0,     0,   361,   362,   363,     0,
       0,   364,     0,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
       0,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,     0,     0,   389,   390,
     391,   392,   393,     0,     0,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,   402,   403,     0,     0,   404,
       0,   405,     0,   406,   407,     0,   408,   409,     0,   410,
       0,   411,     0,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
       0,     0,   426,   427,   428,   429,     0,     0,     0,   430,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,     0,     0,
       0,     0,     0,     0,   444,   445,     0,   446,     0,     0,
     447,     0,     0,   448,   449,     0,     0,     0,   450,     0,
       0,   451,   452,     0,   453,   454,   455,   456,   457,   458,
       0,     0,   459,   460,   461,   462,     0,   463,   464,     0,
     465,     0,   466,   467,   468,   469,     0,   138,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,     0,     0,
     476,   477,   478,     0,     0,     0,   479,   480,   481,   482,
       0,   483,   484,     0,   485,   486,     0,   487,   488,     0,
       0,   489,     0,     0,   490,     0,   491,     0,   492,   493,
     494,     0,     0,     0,     0,     0,     0,   495,     0,     0,
     496,     0,     0,     0,   497,   498,   499,   500,   501,   502,
     503,     0,     0,     0,     0,     0,     0,   504,   505,     0,
     506,   507,   508,     0,   141,   509,   142,   143,   144,   145,
     146,   147,     0,     0,   148,     0,     0,     0,   149,     0,
       0,   150,     0,   151,   152,   153,   154,   155,   156,   157,
     158,     0,   159,     0,     0,  1443,   160,     0,     0,     0,
     161,     0,     0,   162,   163,   164,     0,   165,     0,   166,
     167,     0,     0,   168,     0,     0,   169,   170,     0,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,   198,     0,   199,   200,   201,   202,   203,     0,   204,
       0,     0,   205,     0,     0,   206,     0,   207,     0,     0,
     208,     0,   209,     0,     0,     0,   210,   211,   212,     0,
       0,   213,     0,     0,     0,     0,   214,   215,     0,     0,
       0,     0,   216,     0,   217,     0,     0,     0,   218,     0,
     219,   220,   221,   222,   223,     0,     0,     0,   224,     0,
       0,   225,   226,   227,     0,     0,     0,   228,     0,   229,
     230,     0,   231,   232,   233,     0,     0,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,     0,   243,
     244,   245,     0,     0,   246,   247,     0,   248,   249,   250,
       0,     0,   251,     0,     0,     0,   252,     0,   253,     0,
     254,     0,   255,   256,   257,   258,   259,     0,   260,     0,
     261,     0,     0,     0,   262,   263,   264,     0,   265,     0,
       0,     0,   266,   267,     0,     0,     0,   268,   269,   270,
     271,   272,     0,     0,   273,   274,   275,     0,   276,     0,
     277,     0,     0,     0,     0,   278,   279,     0,     0,     0,
     280,     0,   281,   282,     0,   283,   284,     0,     0,     0,
     285,     0,     0,   286,   287,   288,     0,     0,   289,     0,
       0,   290,   291,   639,     0,     0,     0,     0,   292,   293,
       0,   294,     0,   295,     0,   296,   297,     0,     0,     0,
       0,     0,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,   314,   315,   316,   317,     0,   318,   319,   320,   321,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,     0,   332,     0,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,     0,     0,   345,   346,   347,
     348,     0,     0,     0,   349,   350,     0,     0,     0,   351,
       0,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,     0,     0,     0,     0,     0,     0,     0,     0,
     361,   362,   363,     0,     0,   364,     0,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,     0,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
       0,     0,   389,   390,   391,   392,   393,     0,     0,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   401,   402,
     403,     0,     0,   404,     0,   405,     0,   406,   407,     0,
     408,   409,     0,   410,     0,   411,     0,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,     0,     0,   426,   427,   428,   429,
       0,     0,     0,   430,     0,     0,     0,   431,     0,   432,
     433,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,     0,     0,     0,     0,     0,     0,   444,   445,
       0,   446,     0,     0,   447,     0,     0,   448,   449,     0,
       0,     0,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,   457,   458,     0,     0,   459,   460,   461,   462,
       0,   463,   464,     0,   465,     0,   466,   467,   468,   469,
       0,   138,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,     0,     0,   476,   477,   478,     0,     0,     0,
     479,   480,   481,   482,     0,   483,   484,     0,   485,   486,
       0,   487,   488,     0,     0,   489,     0,     0,   490,     0,
     491,     0,   492,   493,   494,     0,     0,     0,     0,     0,
       0,   495,     0,     0,   496,     0,     0,     0,   497,   498,
     499,   500,   501,   502,   503,     0,     0,     0,     0,     0,
       0,   504,   505,     0,   506,   507,   508,     0,   141,   509,
     142,   143,   144,   145,   146,   147,     0,     0,   148,     0,
       0,     0,   149,     0,     0,   150,     0,   151,   152,   153,
     154,   155,   156,   157,   158,     0,   159,     0,     0,     0,
     160,     0,     0,     0,   161,     0,     0,   162,   163,   164,
       0,   165,     0,   166,   167,     0,     0,   168,     0,     0,
     169,   170,     0,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,   198,     0,   199,   200,   201,
     202,   203,     0,   204,     0,     0,   205,     0,     0,   206,
       0,   207,     0,     0,   208,     0,   209,     0,     0,     0,
     210,   211,   212,     0,     0,   213,     0,     0,     0,     0,
     214,   215,     0,     0,     0,     0,   216,     0,   217,     0,
       0,     0,   218,     0,   219,   220,   221,   222,   223,     0,
       0,     0,   224,     0,     0,   225,   226,   227,     0,     0,
       0,   228,     0,   229,   230,     0,   231,   232,   233,     0,
       0,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,     0,   243,   244,   245,     0,     0,   246,   247,
       0,   248,   249,   250,     0,     0,   251,     0,     0,     0,
     252,     0,   253,     0,   254,     0,   255,   256,   257,   258,
     259,     0,   260,     0,   261,     0,     0,     0,   262,   263,
     264,     0,   265,     0,     0,     0,   266,   267,     0,     0,
       0,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,     0,   276,     0,   277,     0,     0,     0,     0,   278,
     279,     0,     0,     0,   280,     0,   281,   282,     0,   283,
     284,     0,     0,     0,   285,     0,     0,   286,   287,   288,
       0,     0,   289,     0,     0,   290,   291,   639,     0,     0,
       0,     0,   292,   293,     0,   294,     0,   295,     0,   296,
     297,     0,     0,     0,     0,     0,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,   314,   315,   316,   317,     0,
     318,   319,   320,   321,     0,   322,   323,     0,     0,     0,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,     0,   332,     0,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,     0,
       0,   345,   346,   347,   348,     0,     0,     0,   349,   350,
       0,     0,     0,   351,     0,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,     0,     0,     0,     0,
       0,     0,     0,     0,   361,   362,   363,     0,     0,   364,
       0,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,     0,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
       0,     0,   388,     0,     0,     0,   389,   390,   391,   392,
     393,     0,     0,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,   402,   403,     0,     0,   404,     0,   405,
       0,   406,   407,     0,   408,   409,     0,   410,     0,   411,
       0,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,     0,     0,
     426,   427,   428,   429,     0,     0,     0,   430,     0,     0,
       0,   431,     0,   432,   433,   434,   435,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,     0,     0,
       0,     0,   444,   445,     0,   446,     0,     0,   447,     0,
       0,   448,   449,     0,     0,     0,   450,     0,     0,   451,
     452,     0,   453,   454,   455,   456,   457,   458,     0,     0,
     459,   460,   461,   462,     0,   463,   464,     0,   465,     0,
     466,   467,   468,   469,     0,   138,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,     0,     0,   476,   477,
     478,     0,     0,     0,   479,   480,   481,   482,     0,   483,
     484,     0,   485,   486,     0,   487,   488,     0,     0,   489,
       0,     0,   490,     0,   491,     0,   492,   493,   494,     0,
       0,     0,     0,     0,     0,   495,     0,     0,   496,     0,
       0,     0,   497,   498,   499,   500,   501,   502,   503,     0,
       0,     0,     0,     0,     0,   504,   505,     0,   506,   507,
     508,     0,   141,   509,   142,   143,   144,   145,   146,   147,
       0,     0,   148,     0,     0,     0,   149,  2904,     0,   150,
       0,   151,   152,   153,   154,   155,   156,   157,   158,     0,
     159,     0,     0,     0,   160,     0,     0,     0,   161,     0,
       0,   162,   163,   164,     0,   165,     0,   166,   167,     0,
       0,   168,     0,     0,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,   198,
       0,   199,   200,   201,   202,   203,     0,   204,     0,     0,
     205,     0,     0,   206,     0,   207,     0,     0,   208,     0,
     209,     0,     0,     0,   210,   211,   212,     0,     0,   213,
       0,     0,     0,     0,   214,   215,     0,     0,     0,     0,
     216,     0,   217,     0,     0,     0,   218,     0,   219,   220,
     221,   222,   223,     0,     0,     0,   224,     0,     0,   225,
     226,   227,     0,     0,     0,   228,     0,   229,   230,     0,
     231,   232,   233,     0,     0,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,     0,   243,   244,   245,
       0,     0,   246,   247,     0,   248,   249,   250,     0,     0,
     251,     0,     0,     0,   252,     0,   253,     0,   254,     0,
     255,   256,   257,   258,   259,     0,   260,     0,   261,     0,
       0,     0,   262,   263,   264,     0,   265,     0,     0,     0,
     266,   267,     0,     0,     0,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,     0,   276,     0,   277,     0,
       0,     0,     0,   278,   279,     0,     0,     0,   280,     0,
     281,   282,     0,   283,   284,     0,     0,     0,   285,     0,
       0,   286,   287,   288,     0,     0,   289,     0,     0,   290,
     291,     0,     0,     0,     0,     0,   292,   293,     0,   294,
       0,   295,     0,   296,   297,     0,     0,     0,     0,     0,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,
     315,   316,   317,     0,   318,   319,   320,   321,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,     0,   332,     0,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,     0,     0,   345,   346,   347,   348,     0,
       0,     0,   349,   350,     0,     0,     0,   351,     0,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
       0,     0,     0,     0,     0,     0,     0,     0,   361,   362,
     363,     0,     0,   364,     0,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,     0,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,     0,     0,   388,     0,     0,     0,
     389,   390,   391,   392,   393,     0,     0,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   401,   402,   403,     0,
       0,   404,     0,   405,     0,   406,   407,     0,   408,   409,
       0,   410,     0,   411,     0,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,     0,     0,   426,   427,   428,   429,     0,     0,
       0,   430,     0,     0,     0,   431,     0,   432,   433,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,     0,     0,     0,     0,   444,   445,     0,   446,
       0,     0,   447,     0,     0,   448,   449,     0,     0,     0,
     450,     0,     0,   451,   452,     0,   453,   454,   455,   456,
     457,   458,     0,     0,   459,   460,   461,   462,     0,   463,
     464,     0,   465,     0,   466,   467,   468,   469,     0,   138,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
       0,     0,   476,   477,   478,     0,     0,     0,   479,   480,
     481,   482,     0,   483,   484,     0,   485,   486,     0,   487,
     488,     0,     0,   489,     0,     0,   490,     0,   491,     0,
     492,   493,   494,     0,     0,     0,     0,     0,     0,   495,
       0,     0,   496,     0,     0,     0,   497,   498,   499,   500,
     501,   502,   503,     0,     0,     0,     0,     0,     0,   504,
     505,     0,   506,   507,   508,     0,   141,   509,   142,   143,
     144,   145,   146,   147,     0,     0,   148,     0,     0,     0,
     149,     0,     0,   150,     0,   151,   152,   153,   154,   155,
     156,   157,   158,     0,   159,     0,     0,     0,   160,     0,
       0,     0,   161,     0,     0,   162,   163,   164,     0,   165,
       0,   166,   167,     0,     0,   168,     0,     0,   169,   170,
       0,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,   198,     0,   199,   200,   201,   202,   203,
    4651,   204,     0,     0,   205,     0,     0,   206,     0,   207,
       0,     0,   208,     0,   209,     0,     0,     0,   210,   211,
     212,     0,     0,   213,     0,     0,     0,     0,   214,   215,
       0,     0,     0,     0,   216,     0,   217,     0,     0,     0,
     218,     0,   219,   220,   221,   222,   223,     0,     0,     0,
     224,     0,     0,   225,   226,   227,     0,     0,     0,   228,
       0,   229,   230,     0,   231,   232,   233,     0,     0,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
    4652,   243,   244,   245,     0,     0,   246,   247,     0,   248,
     249,   250,     0,     0,   251,     0,     0,     0,   252,     0,
     253,     0,   254,     0,   255,   256,   257,   258,   259,     0,
     260,     0,   261,     0,     0,     0,   262,   263,   264,     0,
     265,     0,     0,     0,   266,   267,     0,     0,     0,   268,
     269,   270,   271,   272,     0,     0,   273,   274,   275,     0,
     276,     0,   277,     0,     0,     0,     0,   278,   279,     0,
       0,     0,   280,     0,   281,   282,     0,   283,   284,     0,
       0,     0,   285,     0,     0,   286,   287,   288,     0,     0,
     289,     0,     0,   290,   291,     0,     0,     0,     0,     0,
     292,   293,     0,   294,     0,   295,     0,   296,   297,     0,
       0,     0,     0,     0,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,     0,   314,   315,   316,   317,     0,   318,   319,
     320,   321,     0,   322,   323,     0,     0,     0,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,     0,
     332,     0,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,     0,     0,   345,
     346,   347,   348,     0,     0,     0,   349,   350,     0,     0,
       0,   351,     0,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,     0,     0,     0,     0,     0,     0,
       0,     0,   361,   362,   363,     0,     0,   364,     0,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,     0,   379,     0,   380,
     381,   382,   383,   384,     0,   385,   386,   387,     0,     0,
     388,     0,     0,     0,   389,   390,   391,   392,   393,     0,
       0,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     401,   402,   403,     0,     0,   404,     0,   405,     0,   406,
     407,     0,   408,   409,     0,   410,     0,   411,     0,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,     0,     0,   426,   427,
     428,   429,     0,     0,     0,   430,     0,     0,     0,   431,
       0,   432,   433,   434,   435,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,     0,     0,     0,     0,
     444,   445,     0,   446,     0,     0,   447,     0,     0,   448,
     449,     0,     0,     0,   450,     0,     0,   451,   452,     0,
     453,   454,   455,   456,   457,   458,     0,     0,   459,   460,
     461,   462,     0,   463,   464,     0,   465,     0,   466,   467,
     468,   469,     0,     0,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,     0,     0,   476,   477,   478,     0,
       0,     0,   479,   480,   481,   482,     0,   483,   484,     0,
     485,   486,     0,   487,   488,     0,     0,   489,     0,     0,
     490,     0,   491,     0,   492,   493,   494,     0,     0,     0,
       0,     0,     0,   495,     0,     0,   496,     0,     0,     0,
     497,   498,   499,   500,   501,   502,   503,     0,     0,     0,
       0,     0,     0,   504,   505,     0,   506,   507,   508,     0,
     141,   509,   142,   143,   144,   145,   146,   147,     0,     0,
     148,     0,     0,     0,   149,     0,     0,   150,     0,   151,
     152,   153,   154,   155,   156,   157,   158,     0,   159,     0,
       0,     0,   160,     0,     0,     0,   161,     0,     0,   162,
     163,   164,     0,   165,     0,   166,   167,     0,     0,   168,
       0,     0,   169,   170,     0,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,   198,     0,   199,
     200,   201,   202,   203,     0,   204,     0,     0,   205,     0,
       0,   206,     0,   207,     0,     0,   208,     0,   209,     0,
       0,     0,   210,   211,   212,     0,     0,   213,     0,     0,
       0,     0,   214,   215,     0,     0,     0,     0,   216,     0,
     217,     0,     0,     0,   218,     0,   219,   220,   221,   222,
     223,     0,     0,     0,   224,     0,     0,   225,   226,   227,
       0,     0,     0,   228,     0,   229,   230,     0,   231,   232,
     233,     0,     0,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,     0,   243,   244,   245,     0,     0,
     246,   247,     0,   248,   249,   250,     0,     0,   251,     0,
       0,     0,   252,     0,   253,     0,   254,     0,   255,   256,
     257,   258,   259,     0,   260,     0,   261,     0,     0,     0,
     262,   263,   264,     0,   265,     0,     0,     0,   266,   267,
       0,     0,     0,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,     0,   276,     0,   277,     0,     0,     0,
       0,   278,   279,     0,     0,     0,   280,     0,   281,   282,
       0,   283,   284,     0,     0,     0,   285,     0,     0,   286,
     287,   288,     0,     0,   289,     0,     0,   290,   291,     0,
       0,     0,     0,     0,   292,   293,     0,   294,     0,   295,
       0,   296,   297,     0,     0,     0,     0,     0,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,     0,   314,   315,   316,
     317,     0,   318,   319,   320,   321,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,     0,   332,     0,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,     0,     0,   345,   346,   347,   348,     0,     0,     0,
     349,   350,     0,     0,     0,   351,     0,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,     0,     0,
       0,     0,     0,     0,     0,     0,   361,   362,   363,     0,
       0,   364,     0,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
       0,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,     0,     0,   389,   390,
     391,   392,   393,     0,     0,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,   402,   403,     0,     0,   404,
       0,   405,     0,   406,   407,     0,   408,   409,     0,   410,
       0,   411,     0,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
       0,     0,   426,   427,   428,   429,     0,     0,     0,   430,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,     0,     0,
       0,   586,     0,     0,   444,   445,     0,   446,     0,     0,
     447,     0,     0,   448,   449,     0,     0,     0,   450,     0,
       0,   451,   452,     0,   453,   454,   455,   456,   457,   458,
       0,     0,   459,   460,   461,   462,     0,   463,   464,     0,
     465,     0,   466,   467,   468,   469,     0,     0,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,     0,     0,
     476,   477,   478,     0,     0,     0,   479,   480,   481,   482,
       0,   483,   484,     0,   485,   486,     0,   487,   488,     0,
       0,   489,     0,     0,   490,     0,   491,     0,   492,   493,
     494,     0,     0,     0,     0,     0,     0,   495,     0,     0,
     496,     0,     0,     0,   497,   498,   499,   500,   501,   502,
     503,     0,     0,     0,     0,     0,     0,   504,   505,     0,
     506,   507,   508,     0,   141,   509,   142,   143,   144,   145,
     146,   147,     0,     0,   148,     0,     0,     0,   149,     0,
       0,   150,     0,   151,   152,   153,   154,   155,   156,   157,
     158,     0,   159,     0,     0,     0,   160,     0,     0,     0,
     161,     0,     0,   162,   163,   164,     0,   165,     0,   166,
     167,     0,     0,   168,     0,     0,   169,   170,     0,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,   198,     0,   199,   200,   201,   202,   203,     0,   204,
       0,     0,   205,     0,     0,   206,     0,   207,     0,     0,
     208,     0,   209,     0,     0,     0,   210,   211,   212,     0,
       0,   213,     0,     0,     0,     0,   214,   215,     0,     0,
       0,     0,   216,     0,   217,     0,     0,     0,   218,     0,
     219,   220,   221,   222,   223,     0,     0,     0,   224,     0,
       0,   225,   226,   227,     0,     0,     0,   228,     0,   229,
     230,     0,   231,   232,   233,     0,     0,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,     0,   243,
     244,   245,     0,     0,   246,   247,     0,   248,   249,   250,
       0,     0,   251,     0,     0,     0,   252,  1132,   253,     0,
     254,     0,   255,   256,   257,   258,   259,     0,   260,     0,
     261,     0,     0,     0,   262,   263,   264,     0,   265,     0,
       0,     0,   266,   267,     0,     0,     0,   268,   269,   270,
     271,   272,     0,     0,   273,   274,   275,     0,   276,     0,
     277,     0,     0,     0,     0,   278,   279,     0,     0,     0,
     280,     0,   281,   282,     0,   283,   284,     0,     0,     0,
     285,     0,     0,   286,   287,   288,     0,     0,   289,     0,
       0,   290,   291,     0,     0,     0,     0,     0,   292,   293,
       0,   294,     0,   295,     0,   296,   297,     0,     0,     0,
       0,     0,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,   314,   315,   316,   317,     0,   318,   319,   320,   321,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,     0,   332,     0,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,     0,     0,   345,   346,   347,
     348,     0,     0,     0,   349,   350,     0,     0,     0,   351,
       0,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,     0,     0,     0,     0,     0,     0,     0,     0,
     361,   362,   363,     0,     0,   364,     0,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,     0,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
       0,     0,   389,   390,   391,   392,   393,     0,     0,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   401,   402,
     403,     0,     0,   404,     0,   405,     0,   406,   407,     0,
     408,   409,     0,   410,     0,   411,     0,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,     0,     0,   426,   427,   428,   429,
       0,     0,     0,   430,     0,     0,     0,   431,     0,   432,
     433,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,     0,     0,     0,     0,     0,     0,   444,   445,
       0,   446,     0,     0,   447,     0,     0,   448,   449,     0,
       0,     0,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,   457,   458,     0,     0,   459,   460,   461,   462,
       0,   463,   464,     0,   465,     0,   466,   467,   468,   469,
       0,     0,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,     0,     0,   476,   477,   478,     0,     0,     0,
     479,   480,   481,   482,     0,   483,   484,     0,   485,   486,
       0,   487,   488,     0,     0,   489,     0,     0,   490,     0,
     491,     0,   492,   493,   494,     0,     0,     0,     0,     0,
       0,   495,     0,     0,   496,     0,     0,     0,   497,   498,
     499,   500,   501,   502,   503,     0,     0,     0,     0,     0,
       0,   504,   505,     0,   506,   507,   508,     0,   141,   509,
     142,   143,   144,   145,   146,   147,     0,     0,   148,     0,
       0,     0,   149,     0,     0,   150,     0,   151,   152,   153,
     154,   155,   156,   157,   158,     0,   159,     0,     0,     0,
     160,     0,     0,     0,   161,     0,     0,   162,   163,   164,
       0,   165,     0,   166,   167,     0,     0,   168,     0,     0,
     169,   170,     0,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,   198,     0,   199,   200,   201,
     202,   203,     0,   204,     0,     0,   205,     0,     0,   206,
       0,   207,     0,     0,   208,     0,   209,     0,     0,     0,
     210,   211,   212,     0,     0,   213,     0,     0,     0,     0,
     214,   215,     0,     0,     0,   947,   216,     0,   217,     0,
       0,     0,   218,     0,   219,   220,   221,   222,   223,     0,
       0,     0,   224,     0,     0,   225,   226,   227,     0,     0,
       0,   228,     0,   229,   230,     0,   231,   232,   233,     0,
       0,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,     0,   243,   244,   245,     0,     0,   246,   247,
       0,   248,   249,   250,     0,     0,   251,     0,     0,     0,
     252,     0,   253,     0,   254,     0,   255,   256,   257,   258,
     259,     0,   260,     0,   261,     0,     0,     0,   262,   263,
     264,     0,   265,     0,     0,     0,   266,   267,     0,     0,
       0,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,     0,   276,     0,   277,     0,     0,     0,     0,   278,
     279,     0,     0,     0,   280,     0,   281,   282,     0,   283,
     284,     0,     0,     0,   285,     0,     0,   286,   287,   288,
       0,     0,   289,     0,     0,   290,   291,     0,     0,     0,
       0,     0,   292,   293,     0,   294,     0,   295,     0,   296,
     297,     0,     0,     0,     0,     0,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,   314,   315,   316,   317,     0,
     318,   319,   320,   321,     0,   322,   323,     0,     0,     0,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,     0,   332,     0,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,     0,
       0,   345,   346,   347,   348,     0,     0,     0,   349,   350,
       0,     0,     0,   351,     0,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,     0,     0,     0,     0,
       0,     0,     0,     0,   361,   362,   363,     0,     0,   364,
       0,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,     0,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
       0,     0,   388,     0,     0,     0,   389,   390,   391,   392,
     393,     0,     0,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,   402,   403,     0,     0,   404,     0,   405,
       0,   406,   407,     0,   408,   409,     0,   410,     0,   411,
       0,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,     0,     0,
     426,   427,   428,   429,     0,     0,     0,   430,     0,     0,
       0,   431,     0,   432,   433,   434,   435,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,     0,     0,
       0,     0,   444,   445,     0,   446,     0,     0,   447,     0,
       0,   448,   449,     0,     0,     0,   450,     0,     0,   451,
     452,     0,   453,   454,   455,   456,   457,   458,     0,     0,
     459,   460,   461,   462,     0,   463,   464,     0,   465,     0,
     466,   467,   468,   469,     0,     0,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,     0,     0,  1975,   477,
     478,     0,     0,     0,   479,   480,   481,   482,     0,   483,
     484,     0,   485,   486,     0,   487,   488,     0,     0,   489,
       0,     0,   490,     0,   491,     0,   492,   493,   494,     0,
       0,     0,     0,     0,     0,   495,     0,     0,   496,     0,
       0,     0,   497,   498,   499,   500,   501,   502,   503,     0,
       0,     0,     0,     0,     0,   504,   505,     0,   506,   507,
     508,     0,   141,   509,   142,   143,   144,   145,   146,   147,
       0,     0,   148,     0,     0,     0,   149,     0,     0,   150,
       0,   151,   152,   153,   154,   155,   156,   157,   158,     0,
     159,     0,     0,     0,   160,     0,     0,     0,   161,     0,
       0,   162,   163,   164,     0,   165,     0,   166,   167,     0,
       0,   168,     0,     0,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,   198,
       0,   199,   200,   201,   202,   203,     0,   204,     0,     0,
     205,     0,     0,   206,     0,   207,     0,     0,   208,     0,
     209,     0,     0,     0,   210,   211,   212,     0,     0,   213,
       0,     0,     0,     0,   214,   215,     0,     0,     0,  2123,
     216,     0,   217,     0,     0,     0,   218,     0,   219,   220,
     221,   222,   223,     0,     0,     0,   224,     0,     0,   225,
     226,   227,     0,     0,     0,   228,     0,   229,   230,     0,
     231,   232,   233,     0,     0,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,     0,   243,   244,   245,
       0,     0,   246,   247,     0,   248,   249,   250,     0,     0,
     251,     0,     0,     0,   252,     0,   253,     0,   254,     0,
     255,   256,   257,   258,   259,     0,   260,     0,   261,     0,
       0,     0,   262,   263,   264,     0,   265,     0,     0,     0,
     266,   267,     0,     0,     0,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,     0,   276,     0,   277,     0,
       0,     0,     0,   278,   279,     0,     0,     0,   280,     0,
     281,   282,     0,   283,   284,     0,     0,     0,   285,     0,
       0,   286,   287,   288,     0,     0,   289,     0,     0,   290,
     291,     0,     0,     0,     0,     0,   292,   293,     0,   294,
       0,   295,     0,   296,   297,     0,     0,     0,     0,     0,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,
     315,   316,   317,     0,   318,   319,   320,   321,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,     0,   332,     0,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,     0,     0,   345,   346,   347,   348,     0,
       0,     0,   349,   350,     0,     0,     0,   351,     0,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
       0,     0,     0,     0,     0,     0,     0,     0,   361,   362,
     363,     0,     0,   364,     0,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,     0,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,     0,     0,   388,     0,     0,     0,
     389,   390,   391,   392,   393,     0,     0,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   401,   402,   403,     0,
       0,   404,     0,   405,     0,   406,   407,     0,   408,   409,
       0,   410,     0,   411,     0,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,     0,     0,   426,   427,   428,   429,     0,     0,
       0,   430,     0,     0,     0,   431,     0,   432,   433,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,     0,     0,     0,     0,   444,   445,     0,   446,
       0,     0,   447,     0,     0,   448,   449,     0,     0,     0,
     450,     0,     0,   451,   452,     0,   453,   454,   455,   456,
     457,   458,     0,     0,   459,   460,   461,   462,     0,   463,
     464,     0,   465,     0,   466,   467,   468,   469,     0,     0,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
       0,     0,   476,   477,   478,     0,     0,     0,   479,   480,
     481,   482,     0,   483,   484,     0,   485,   486,     0,   487,
     488,     0,     0,   489,     0,     0,   490,     0,   491,     0,
     492,   493,   494,     0,     0,     0,     0,     0,     0,   495,
       0,     0,   496,     0,     0,     0,   497,   498,   499,   500,
     501,   502,   503,     0,     0,     0,     0,     0,     0,   504,
     505,     0,   506,   507,   508,     0,   141,   509,   142,   143,
     144,   145,   146,   147,     0,     0,   148,     0,     0,     0,
     149,     0,     0,   150,     0,   151,   152,   153,   154,   155,
     156,   157,   158,     0,   159,     0,     0,     0,   160,     0,
       0,     0,   161,     0,     0,   162,   163,   164,     0,   165,
       0,   166,   167,     0,     0,   168,     0,     0,   169,   170,
       0,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,   198,     0,   199,   200,   201,   202,   203,
       0,   204,     0,     0,   205,     0,     0,   206,     0,   207,
       0,     0,   208,     0,   209,     0,     0,     0,   210,   211,
     212,     0,     0,   213,     0,     0,     0,     0,   214,   215,
       0,     0,     0,   947,   216,     0,   217,     0,     0,     0,
     218,     0,   219,   220,   221,   222,   223,     0,     0,     0,
     224,     0,     0,   225,   226,   227,     0,     0,     0,   228,
       0,   229,   230,     0,   231,   232,   233,     0,     0,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
       0,   243,   244,   245,     0,     0,   246,   247,     0,   248,
     249,   250,     0,     0,   251,     0,     0,     0,   252,     0,
     253,     0,   254,     0,   255,   256,   257,   258,   259,     0,
     260,     0,   261,     0,     0,     0,   262,   263,   264,     0,
     265,     0,     0,     0,   266,   267,     0,     0,     0,   268,
     269,   270,   271,   272,     0,     0,   273,   274,   275,     0,
     276,     0,   277,     0,     0,     0,     0,   278,   279,     0,
       0,     0,   280,     0,   281,   282,     0,   283,   284,     0,
       0,     0,   285,     0,     0,   286,   287,   288,     0,     0,
     289,     0,     0,   290,   291,     0,     0,     0,     0,     0,
     292,   293,     0,   294,     0,   295,     0,   296,   297,     0,
       0,     0,     0,     0,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,     0,   314,   315,   316,   317,     0,   318,   319,
     320,   321,     0,   322,   323,     0,     0,     0,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,     0,
     332,     0,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,     0,     0,   345,
     346,   347,   348,     0,     0,     0,   349,   350,     0,     0,
       0,   351,     0,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,     0,     0,     0,     0,     0,     0,
       0,     0,   361,   362,   363,     0,     0,   364,     0,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,     0,   379,     0,   380,
     381,   382,   383,   384,     0,   385,   386,   387,     0,     0,
     388,     0,     0,     0,   389,   390,   391,   392,   393,     0,
       0,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     401,   402,   403,     0,     0,   404,     0,   405,     0,   406,
     407,     0,   408,   409,     0,   410,     0,   411,     0,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,     0,     0,   426,   427,
     428,   429,     0,     0,     0,   430,     0,     0,     0,   431,
       0,   432,   433,   434,   435,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,     0,     0,     0,     0,
     444,   445,     0,   446,     0,     0,   447,     0,     0,   448,
     449,     0,     0,     0,   450,     0,     0,   451,   452,     0,
     453,   454,   455,   456,   457,   458,     0,     0,   459,   460,
     461,   462,     0,   463,   464,     0,   465,     0,   466,   467,
     468,   469,     0,     0,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,     0,     0,   476,   477,   478,     0,
       0,     0,   479,   480,   481,   482,     0,   483,   484,     0,
     485,   486,     0,   487,   488,     0,     0,   489,     0,     0,
     490,     0,   491,     0,   492,   493,   494,     0,     0,     0,
       0,     0,     0,   495,     0,     0,   496,     0,     0,     0,
     497,   498,   499,   500,   501,   502,   503,     0,     0,     0,
       0,     0,     0,   504,   505,     0,   506,   507,   508,     0,
     141,   509,   142,   143,   144,   145,   146,   147,     0,     0,
     148,     0,     0,     0,   149,     0,     0,   150,     0,   151,
     152,   153,   154,   155,   156,   157,   158,     0,   159,     0,
       0,     0,   160,     0,     0,     0,   161,     0,     0,   162,
     163,   164,     0,   165,     0,   166,   167,     0,     0,   168,
       0,     0,   169,   170,     0,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,   198,     0,   199,
     200,   201,   202,   203,     0,   204,     0,     0,   205,     0,
       0,   206,     0,   207,     0,     0,   208,     0,   209,     0,
       0,     0,   210,   211,   212,     0,     0,   213,     0,     0,
       0,     0,   214,   215,     0,     0,     0,     0,   216,     0,
     217,     0,     0,     0,   218,     0,   219,   220,   221,   222,
     223,     0,     0,     0,   224,     0,     0,   225,   226,   227,
       0,     0,     0,   228,     0,   229,   230,     0,   231,   232,
     233,     0,     0,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,     0,   243,   244,   245,     0,     0,
     246,   247,     0,   248,   249,   250,     0,     0,   251,     0,
       0,     0,   252,     0,   253,     0,   254,     0,   255,   256,
     257,   258,   259,     0,   260,     0,   261,     0,     0,     0,
     262,   263,   264,     0,   265,     0,     0,     0,   266,   267,
       0,     0,     0,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,     0,   276,     0,   277,     0,     0,     0,
       0,   278,   279,     0,     0,     0,   280,     0,   281,   282,
       0,   283,   284,     0,     0,     0,   285,     0,     0,   286,
     287,   288,     0,     0,   289,     0,     0,   290,   291,     0,
       0,     0,     0,     0,   292,   293,     0,   294,     0,   295,
       0,   296,   297,     0,     0,     0,     0,     0,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,     0,   314,   315,   316,
     317,     0,   318,   319,   320,   321,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,     0,   332,     0,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,     0,     0,   345,   346,   347,   348,     0,     0,     0,
     349,   350,     0,     0,     0,   351,     0,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,     0,     0,
       0,     0,     0,     0,     0,     0,   361,   362,   363,     0,
       0,   364,     0,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
    3087,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,     0,     0,   389,   390,
     391,   392,   393,     0,     0,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,   402,   403,     0,     0,   404,
       0,   405,     0,   406,   407,     0,   408,   409,     0,   410,
       0,   411,     0,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
       0,     0,   426,   427,   428,   429,     0,     0,     0,   430,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,     0,     0,
       0,     0,     0,     0,   444,   445,     0,   446,     0,     0,
     447,     0,     0,   448,   449,     0,     0,     0,   450,     0,
       0,   451,   452,     0,   453,   454,   455,   456,   457,   458,
       0,     0,   459,   460,   461,   462,     0,   463,   464,     0,
     465,     0,   466,   467,   468,   469,     0,     0,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,     0,     0,
     476,   477,   478,     0,     0,     0,   479,   480,   481,   482,
       0,   483,   484,     0,   485,   486,     0,   487,   488,     0,
       0,   489,     0,     0,   490,     0,   491,     0,   492,   493,
     494,     0,     0,     0,     0,     0,     0,   495,     0,     0,
     496,     0,     0,     0,   497,   498,   499,   500,   501,   502,
     503,     0,     0,     0,     0,     0,     0,   504,   505,     0,
     506,   507,   508,     0,   141,   509,   142,   143,   144,   145,
     146,   147,     0,     0,   148,     0,     0,     0,   149,     0,
       0,   150,     0,   151,   152,   153,   154,   155,   156,   157,
     158,     0,   159,     0,     0,     0,   160,     0,     0,     0,
     161,     0,     0,   162,   163,   164,     0,   165,     0,   166,
     167,     0,     0,   168,     0,     0,   169,   170,     0,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,   198,     0,   199,   200,   201,   202,   203,     0,   204,
       0,     0,   205,     0,     0,   206,     0,   207,     0,     0,
     208,     0,   209,     0,     0,     0,   210,   211,   212,     0,
       0,   213,     0,     0,     0,     0,   214,   215,     0,     0,
       0,     0,   216,     0,   217,     0,     0,     0,   218,     0,
     219,   220,   221,   222,   223,     0,     0,     0,   224,     0,
       0,   225,   226,   227,     0,     0,     0,   228,     0,   229,
     230,     0,   231,   232,   233,     0,     0,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,     0,   243,
     244,   245,     0,     0,   246,   247,     0,   248,   249,   250,
       0,     0,   251,     0,     0,     0,   252,     0,   253,     0,
     254,     0,   255,   256,   257,   258,   259,     0,   260,     0,
     261,     0,     0,     0,   262,   263,   264,     0,   265,     0,
       0,     0,   266,   267,     0,     0,     0,   268,   269,   270,
     271,   272,     0,     0,   273,   274,   275,     0,   276,     0,
     277,     0,     0,     0,     0,   278,   279,     0,     0,     0,
     280,     0,   281,   282,     0,   283,   284,     0,     0,     0,
     285,     0,     0,   286,   287,   288,     0,     0,   289,     0,
       0,   290,   291,     0,     0,     0,     0,     0,   292,   293,
       0,   294,     0,   295,     0,   296,   297,     0,     0,     0,
       0,     0,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,   314,   315,   316,   317,     0,   318,   319,   320,   321,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,     0,   332,     0,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,     0,     0,   345,   346,   347,
     348,     0,     0,     0,   349,   350,     0,     0,     0,   351,
       0,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,     0,     0,     0,     0,     0,     0,     0,     0,
     361,   362,   363,     0,     0,   364,     0,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,     0,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
       0,     0,   389,   390,   391,   392,   393,     0,     0,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   401,   402,
     403,     0,     0,   404,     0,   405,     0,   406,   407,     0,
     408,   409,     0,   410,     0,   411,     0,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,     0,     0,   426,   427,   428,   429,
       0,     0,     0,   430,     0,     0,     0,   431,     0,   432,
     433,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,     0,     0,     0,     0,     0,     0,   444,   445,
       0,   446,     0,     0,   447,     0,     0,   448,   449,     0,
       0,     0,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,   457,   458,     0,     0,   459,   460,   461,   462,
       0,   463,   464,     0,   465,     0,   466,   467,   468,   469,
       0,   138,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,     0,     0,   476,   477,   478,     0,     0,     0,
     479,   480,   481,   482,     0,   483,   484,     0,   485,   486,
       0,   487,   488,     0,     0,   489,     0,     0,   490,     0,
     491,     0,   492,   493,   494,     0,     0,     0,     0,     0,
       0,   495,     0,     0,   496,     0,     0,     0,   497,   498,
     499,   500,   501,   502,   503,     0,     0,     0,     0,     0,
       0,   504,   505,     0,   506,   507,   508,     0,   141,   509,
     142,   143,   144,   145,   146,   147,     0,     0,   148,     0,
       0,     0,   149,     0,     0,   150,     0,   151,   152,   153,
     154,   155,   156,   157,   158,     0,   159,     0,     0,     0,
     160,     0,     0,     0,   161,     0,     0,   162,   163,   164,
       0,   165,     0,   166,   167,     0,     0,   168,     0,     0,
     169,   170,     0,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,   198,     0,   199,   200,   201,
     202,   203,     0,   204,     0,     0,   205,     0,     0,   206,
       0,   207,     0,     0,   208,     0,   209,     0,     0,     0,
     210,   211,   212,     0,     0,   213,     0,     0,     0,     0,
     214,   215,     0,     0,     0,  3390,   216,     0,   217,     0,
       0,     0,   218,     0,   219,   220,   221,   222,   223,     0,
       0,     0,   224,     0,     0,   225,   226,   227,     0,     0,
       0,   228,     0,   229,   230,     0,   231,   232,   233,     0,
       0,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,     0,   243,   244,   245,     0,     0,   246,   247,
       0,   248,   249,   250,     0,     0,   251,     0,     0,     0,
     252,     0,   253,     0,   254,     0,   255,   256,   257,   258,
     259,     0,   260,     0,   261,     0,     0,     0,   262,   263,
     264,     0,   265,     0,     0,     0,   266,   267,     0,     0,
       0,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,     0,   276,     0,   277,     0,     0,     0,     0,   278,
     279,     0,     0,     0,   280,     0,   281,   282,     0,   283,
     284,     0,     0,     0,   285,     0,     0,   286,   287,   288,
       0,     0,   289,     0,     0,   290,   291,     0,     0,     0,
       0,     0,   292,   293,     0,   294,     0,   295,     0,   296,
     297,     0,     0,     0,     0,     0,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,   314,   315,   316,   317,     0,
     318,   319,   320,   321,     0,   322,   323,     0,     0,     0,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,     0,   332,     0,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,     0,
       0,   345,   346,   347,   348,     0,     0,     0,   349,   350,
       0,     0,     0,   351,     0,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,     0,     0,     0,     0,
       0,     0,     0,     0,   361,   362,   363,     0,     0,   364,
       0,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,     0,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
       0,     0,   388,     0,     0,     0,   389,   390,   391,   392,
     393,     0,     0,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,   402,   403,     0,     0,   404,     0,   405,
       0,   406,   407,     0,   408,   409,     0,   410,     0,   411,
       0,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,     0,     0,
     426,   427,   428,   429,     0,     0,     0,   430,     0,     0,
       0,   431,     0,   432,   433,   434,   435,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,     0,     0,
       0,     0,   444,   445,     0,   446,     0,     0,   447,     0,
       0,   448,   449,     0,     0,     0,   450,     0,     0,   451,
     452,     0,   453,   454,   455,   456,   457,   458,     0,     0,
     459,   460,   461,   462,     0,   463,   464,     0,   465,     0,
     466,   467,   468,   469,     0,     0,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,     0,     0,   476,   477,
     478,     0,     0,     0,   479,   480,   481,   482,     0,   483,
     484,     0,   485,   486,     0,   487,   488,     0,     0,   489,
       0,     0,   490,     0,   491,     0,   492,   493,   494,     0,
       0,     0,     0,     0,     0,   495,     0,     0,   496,     0,
       0,     0,   497,   498,   499,   500,   501,   502,   503,     0,
       0,     0,     0,     0,     0,   504,   505,     0,   506,   507,
     508,     0,   141,   509,   142,   143,   144,   145,   146,   147,
    3398,     0,   148,     0,     0,     0,   149,     0,     0,   150,
       0,   151,   152,   153,   154,   155,   156,   157,   158,     0,
     159,     0,     0,     0,   160,     0,     0,     0,   161,     0,
       0,   162,   163,   164,     0,   165,     0,   166,   167,     0,
       0,   168,     0,     0,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,     0,   189,
     190,   191,   192,   193,   194,   195,   196,     0,   197,   198,
       0,   199,   200,   201,   202,   203,     0,   204,     0,     0,
     205,     0,     0,   206,     0,   207,     0,     0,   208,     0,
     209,     0,     0,     0,   210,   211,   212,     0,     0,   213,
       0,     0,     0,     0,   214,   215,     0,     0,     0,     0,
     216,     0,   217,     0,     0,     0,   218,     0,   219,   220,
     221,   222,   223,     0,     0,     0,   224,     0,     0,   225,
     226,   227,     0,     0,     0,   228,     0,   229,   230,     0,
     231,   232,   233,     0,     0,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,     0,     0,   243,   244,   245,
       0,     0,   246,   247,     0,   248,   249,   250,     0,     0,
     251,     0,     0,     0,   252,     0,   253,     0,   254,     0,
     255,   256,   257,   258,   259,     0,   260,     0,   261,     0,
       0,     0,   262,   263,   264,     0,   265,     0,     0,     0,
     266,   267,     0,     0,     0,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,     0,   276,     0,   277,     0,
       0,     0,     0,   278,   279,     0,     0,     0,   280,     0,
     281,   282,     0,   283,   284,     0,     0,     0,   285,     0,
       0,   286,   287,   288,     0,     0,   289,     0,     0,   290,
     291,     0,     0,     0,     0,     0,   292,   293,     0,   294,
       0,   295,     0,   296,   297,     0,     0,     0,     0,     0,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,
     315,   316,   317,     0,   318,   319,   320,   321,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,     0,   332,     0,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,     0,     0,   345,   346,   347,   348,     0,
       0,     0,   349,   350,     0,     0,     0,   351,     0,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
       0,     0,     0,     0,     0,     0,     0,     0,   361,   362,
     363,     0,     0,   364,     0,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,     0,   376,
     377,   378,     0,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,     0,     0,   388,     0,     0,     0,
     389,   390,   391,   392,   393,     0,     0,   394,   395,   396,
     397,   398,     0,   399,   400,     0,   401,   402,   403,     0,
       0,   404,     0,   405,     0,   406,   407,     0,   408,   409,
       0,   410,     0,   411,     0,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,     0,     0,   426,   427,   428,   429,     0,     0,
       0,   430,     0,     0,     0,   431,     0,   432,   433,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
       0,     0,     0,     0,     0,     0,   444,   445,     0,   446,
       0,     0,   447,     0,     0,   448,   449,     0,     0,     0,
     450,     0,     0,   451,   452,     0,   453,   454,   455,   456,
     457,   458,     0,     0,   459,   460,   461,   462,     0,   463,
     464,     0,   465,     0,   466,   467,   468,   469,     0,     0,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
       0,     0,   476,   477,   478,     0,     0,     0,   479,   480,
     481,   482,     0,   483,   484,     0,   485,   486,     0,   487,
     488,     0,     0,   489,     0,     0,   490,     0,   491,     0,
     492,   493,   494,     0,     0,     0,     0,     0,     0,   495,
       0,     0,   496,     0,     0,     0,   497,   498,   499,   500,
     501,   502,   503,     0,     0,     0,     0,     0,     0,   504,
     505,     0,   506,   507,   508,     0,   141,   509,   142,   143,
     144,   145,   146,   147,     0,     0,   148,     0,     0,     0,
     149,     0,     0,   150,     0,   151,   152,   153,   154,   155,
     156,   157,   158,     0,   159,     0,     0,     0,   160,     0,
       0,     0,   161,     0,     0,   162,   163,   164,     0,   165,
       0,   166,   167,     0,     0,   168,     0,     0,   169,   170,
       0,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,     0,   197,   198,     0,   199,   200,   201,   202,   203,
       0,   204,     0,     0,   205,     0,     0,   206,     0,   207,
       0,     0,   208,     0,   209,     0,     0,     0,   210,   211,
     212,     0,     0,   213,     0,     0,     0,     0,   214,   215,
       0,     0,     0,  3422,   216,     0,   217,     0,     0,     0,
     218,     0,   219,   220,   221,   222,   223,     0,     0,     0,
     224,     0,     0,   225,   226,   227,     0,     0,     0,   228,
       0,   229,   230,     0,   231,   232,   233,     0,     0,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,
       0,   243,   244,   245,     0,     0,   246,   247,     0,   248,
     249,   250,     0,     0,   251,     0,     0,     0,   252,     0,
     253,     0,   254,     0,   255,   256,   257,   258,   259,     0,
     260,     0,   261,     0,     0,     0,   262,   263,   264,     0,
     265,     0,     0,     0,   266,   267,     0,     0,     0,   268,
     269,   270,   271,   272,     0,     0,   273,   274,   275,     0,
     276,     0,   277,     0,     0,     0,     0,   278,   279,     0,
       0,     0,   280,     0,   281,   282,     0,   283,   284,     0,
       0,     0,   285,     0,     0,   286,   287,   288,     0,     0,
     289,     0,     0,   290,   291,     0,     0,     0,     0,     0,
     292,   293,     0,   294,     0,   295,     0,   296,   297,     0,
       0,     0,     0,     0,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,     0,   314,   315,   316,   317,     0,   318,   319,
     320,   321,     0,   322,   323,     0,     0,     0,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,     0,
     332,     0,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,     0,     0,   345,
     346,   347,   348,     0,     0,     0,   349,   350,     0,     0,
       0,   351,     0,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,     0,     0,     0,     0,     0,     0,
       0,     0,   361,   362,   363,     0,     0,   364,     0,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,     0,   376,   377,   378,     0,   379,     0,   380,
     381,   382,   383,   384,     0,   385,   386,   387,     0,     0,
     388,     0,     0,     0,   389,   390,   391,   392,   393,     0,
       0,   394,   395,   396,   397,   398,     0,   399,   400,     0,
     401,   402,   403,     0,     0,   404,     0,   405,     0,   406,
     407,     0,   408,   409,     0,   410,     0,   411,     0,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,     0,     0,   426,   427,
     428,   429,     0,     0,     0,   430,     0,     0,     0,   431,
       0,   432,   433,   434,   435,   436,   437,     0,   438,   439,
     440,   441,   442,   443,     0,     0,     0,     0,     0,     0,
     444,   445,     0,   446,     0,     0,   447,     0,     0,   448,
     449,     0,     0,     0,   450,     0,     0,   451,   452,     0,
     453,   454,   455,   456,   457,   458,     0,     0,   459,   460,
     461,   462,     0,   463,   464,     0,   465,     0,   466,   467,
     468,   469,     0,     0,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,     0,     0,   476,   477,   478,     0,
       0,     0,   479,   480,   481,   482,     0,   483,   484,     0,
     485,   486,     0,   487,   488,     0,     0,   489,     0,     0,
     490,     0,   491,     0,   492,   493,   494,     0,     0,     0,
       0,     0,     0,   495,     0,     0,   496,     0,     0,     0,
     497,   498,   499,   500,   501,   502,   503,     0,     0,     0,
       0,     0,     0,   504,   505,     0,   506,   507,   508,     0,
     141,   509,   142,   143,   144,   145,   146,   147,     0,     0,
     148,     0,     0,     0,   149,     0,     0,   150,     0,   151,
     152,   153,   154,   155,   156,   157,   158,     0,   159,     0,
       0,     0,   160,     0,     0,     0,   161,     0,     0,   162,
     163,   164,     0,   165,     0,   166,   167,     0,     0,   168,
       0,     0,   169,   170,     0,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,     0,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,   198,     0,   199,
     200,   201,   202,   203,     0,   204,     0,     0,   205,     0,
       0,   206,     0,   207,     0,     0,   208,     0,   209,     0,
       0,     0,   210,   211,   212,     0,     0,   213,     0,     0,
       0,     0,   214,   215,     0,     0,     0,     0,   216,     0,
     217,     0,     0,     0,   218,     0,   219,   220,   221,   222,
     223,     0,     0,     0,   224,     0,     0,   225,   226,   227,
       0,     0,     0,   228,     0,   229,   230,     0,   231,   232,
     233,     0,     0,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,     0,     0,   243,   244,   245,     0,     0,
     246,   247,     0,   248,   249,   250,     0,     0,   251,     0,
       0,     0,   252,     0,   253,     0,   254,     0,   255,   256,
     257,   258,   259,     0,   260,     0,   261,     0,     0,     0,
     262,   263,   264,     0,   265,     0,     0,     0,   266,   267,
       0,     0,     0,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,     0,   276,     0,   277,     0,     0,     0,
       0,   278,   279,     0,     0,     0,   280,     0,   281,   282,
       0,   283,   284,     0,     0,     0,   285,     0,     0,   286,
     287,   288,     0,     0,   289,     0,     0,   290,   291,     0,
       0,     0,     0,     0,   292,   293,     0,   294,     0,   295,
       0,   296,   297,     0,     0,     0,     0,     0,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,     0,   314,   315,   316,
     317,     0,   318,   319,   320,   321,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,     0,   332,     0,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,     0,     0,   345,   346,   347,   348,     0,     0,     0,
     349,   350,     0,     0,     0,   351,     0,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,     0,     0,
       0,     0,     0,     0,     0,     0,   361,   362,   363,     0,
       0,   364,     0,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,     0,   376,   377,   378,
    4311,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,     0,     0,   389,   390,
     391,   392,   393,     0,     0,   394,   395,   396,   397,   398,
       0,   399,   400,     0,   401,   402,   403,     0,     0,   404,
       0,   405,     0,   406,   407,     0,   408,   409,     0,   410,
       0,   411,     0,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
       0,     0,   426,   427,   428,   429,     0,     0,     0,   430,
       0,     0,     0,   431,     0,   432,   433,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,     0,     0,
       0,     0,     0,     0,   444,   445,     0,   446,     0,     0,
     447,     0,     0,   448,   449,     0,     0,     0,   450,     0,
       0,   451,   452,     0,   453,   454,   455,   456,   457,   458,
       0,     0,   459,   460,   461,   462,     0,   463,   464,     0,
     465,     0,   466,   467,   468,   469,     0,     0,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,     0,     0,
     476,   477,   478,     0,     0,     0,   479,   480,   481,   482,
       0,   483,   484,     0,   485,   486,     0,   487,   488,     0,
       0,   489,     0,     0,   490,     0,   491,     0,   492,   493,
     494,     0,     0,     0,     0,     0,     0,   495,     0,     0,
     496,     0,     0,     0,   497,   498,   499,   500,   501,   502,
     503,     0,     0,     0,     0,     0,     0,   504,   505,     0,
     506,   507,   508,     0,   141,   509,   142,   143,   144,   145,
     146,   147,     0,     0,   148,     0,     0,     0,   149,     0,
       0,   150,     0,   151,   152,   153,   154,   155,   156,   157,
     158,     0,   159,     0,     0,     0,   160,     0,     0,     0,
     161,     0,     0,   162,   163,   164,     0,   165,     0,   166,
     167,     0,     0,   168,     0,     0,   169,   170,     0,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
       0,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,   198,     0,   199,   200,   201,   202,   203,     0,   204,
       0,     0,   205,     0,     0,   206,     0,   207,     0,     0,
     208,     0,   209,     0,     0,     0,   210,   211,   212,     0,
       0,   213,     0,     0,     0,     0,   214,   215,     0,     0,
       0,     0,   216,     0,   217,     0,     0,     0,   218,     0,
     219,   220,   221,   222,   223,     0,     0,     0,   224,     0,
       0,   225,   226,   227,     0,     0,     0,   228,     0,   229,
     230,     0,   231,   232,   233,     0,     0,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,     0,     0,   243,
     244,   245,     0,     0,   246,   247,     0,   248,   249,   250,
       0,     0,   251,     0,     0,     0,   252,     0,   253,     0,
     254,     0,   255,   256,   257,   258,   259,     0,   260,     0,
     261,     0,     0,     0,   262,   263,   264,     0,   265,     0,
       0,     0,   266,   267,     0,     0,     0,   268,   269,   270,
     271,   272,     0,     0,   273,   274,   275,     0,   276,     0,
     277,     0,     0,     0,     0,   278,   279,     0,     0,     0,
     280,     0,   281,   282,     0,   283,   284,     0,     0,     0,
     285,     0,     0,   286,   287,   288,     0,     0,   289,     0,
       0,   290,   291,     0,     0,     0,     0,     0,   292,   293,
       0,   294,     0,   295,     0,   296,   297,     0,     0,     0,
       0,     0,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,   314,   315,   316,   317,     0,   318,   319,   320,   321,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,     0,   332,     0,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,     0,     0,   345,   346,   347,
     348,     0,     0,     0,   349,   350,     0,     0,     0,   351,
       0,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,     0,     0,     0,     0,     0,     0,     0,     0,
     361,   362,   363,     0,     0,   364,     0,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
       0,   376,   377,   378,     0,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
       0,     0,   389,   390,   391,   392,   393,     0,     0,   394,
     395,   396,   397,   398,     0,   399,   400,     0,   401,   402,
     403,     0,     0,   404,     0,   405,     0,   406,   407,     0,
     408,   409,     0,   410,     0,   411,     0,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,     0,     0,   426,   427,   428,   429,
       0,     0,     0,   430,     0,     0,     0,   431,     0,   432,
     433,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,     0,     0,     0,     0,     0,     0,   444,   445,
       0,   446,     0,     0,   447,     0,     0,   448,   449,     0,
       0,     0,   450,     0,     0,   451,   452,     0,   453,   454,
     455,   456,   457,   458,     0,     0,   459,   460,   461,   462,
       0,   463,   464,     0,   465,     0,   466,   467,   468,   469,
       0,     0,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,     0,     0,   476,   477,   478,     0,     0,     0,
     479,   480,   481,   482,     0,   483,   484,     0,   485,   486,
       0,   487,   488,     0,     0,   489,     0,     0,   490,     0,
     491,     0,   492,   493,   494,     0,     0,     0,     0,     0,
       0,   495,     0,     0,   496,     0,     0,     0,   497,   498,
     499,   500,   501,   502,   503,     0,     0,     0,     0,     0,
       0,   504,   505,     0,   506,   507,   508,     0,   141,   509,
     142,   143,   144,   145,   146,   147,     0,     0,   148,     0,
       0,     0,   149,     0,     0,   150,     0,   151,   152,   153,
     154,   155,   156,   157,   158,     0,   159,     0,     0,     0,
     160,     0,     0,     0,   161,     0,     0,   162,   163,   164,
       0,   165,     0,   166,   167,     0,     0,   168,     0,     0,
     169,   170,     0,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,   198,     0,   199,   200,   201,
     202,   203,     0,   204,     0,     0,   205,     0,     0,   206,
       0,   207,     0,     0,   208,     0,   209,     0,     0,     0,
     210,   211,   212,     0,     0,   213,     0,     0,     0,     0,
     214,   215,     0,     0,     0,     0,   216,     0,   217,     0,
       0,     0,   218,     0,   219,   220,   221,   222,   223,     0,
       0,     0,   224,     0,     0,   225,   226,   227,     0,     0,
       0,   228,     0,   229,   230,     0,   231,   232,   233,     0,
       0,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,     0,     0,   243,   244,   245,     0,     0,   246,   247,
       0,   248,  1891,   250,     0,     0,   251,     0,     0,     0,
     252,     0,   253,     0,   254,     0,   255,   256,   257,   258,
     259,     0,   260,     0,   261,     0,     0,     0,   262,   263,
     264,     0,   265,     0,     0,     0,   266,   267,     0,     0,
       0,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,     0,   276,     0,   277,     0,     0,     0,     0,   278,
     279,     0,     0,     0,   280,     0,   281,   282,     0,   283,
     284,     0,     0,     0,   285,     0,     0,   286,   287,   288,
       0,     0,   289,     0,     0,   290,   291,     0,     0,     0,
       0,     0,   292,   293,     0,   294,     0,   295,     0,   296,
     297,     0,     0,     0,     0,     0,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,   314,   315,   316,   317,     0,
     318,   319,   320,   321,     0,   322,   323,     0,     0,     0,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,     0,   332,     0,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,     0,
       0,   345,  1892,   347,   348,     0,     0,     0,   349,   350,
       0,     0,     0,   351,     0,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,     0,     0,     0,     0,
       0,     0,     0,     0,   361,   362,   363,     0,     0,   364,
       0,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,     0,   376,   377,   378,     0,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
       0,     0,   388,     0,     0,     0,   389,   390,   391,   392,
     393,     0,     0,   394,   395,   396,   397,   398,     0,   399,
     400,     0,   401,   402,   403,     0,     0,   404,     0,   405,
       0,   406,   407,     0,   408,   409,     0,   410,     0,   411,
       0,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,     0,     0,
     426,   427,   428,   429,     0,     0,     0,   430,     0,     0,
       0,   431,     0,   432,   433,   434,   435,   436,   437,     0,
     438,   439,   440,   441,   442,   443,     0,     0,     0,     0,
       0,     0,   444,   445,     0,   446,     0,     0,   447,     0,
       0,   448,   449,     0,     0,     0,   450,     0,     0,   451,
     452,     0,   453,   454,   455,   456,   457,   458,     0,     0,
     459,   460,   461,   462,     0,   463,   464,     0,   465,     0,
     466,   467,   468,   469,     0,     0,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,     0,     0,   476,   477,
     478,     0,     0,     0,   479,   480,   481,   482,     0,   483,
     484,     0,   485,   486,     0,   487,   488,     0,     0,   489,
       0,     0,   490,     0,   491,     0,   492,   493,   494,     0,
       0,     0,     0,     0,     0,   495,     0,     0,   496,     0,
       0,     0,   497,   498,   499,   500,   501,   502,   503,     0,
       0,     0,     0,     0,     0,   504,   505,     0,   506,   507,
     508,     0,   141,   509,   142,   143,   144,   145,   146,   147,
       0,     0,   148,     0,     0,     0,   149,     0,     0,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,     0,
    -372,     0,     0,     0,   160,     0,     0,     0,   161,     0,
       0,   162,   163,   164,     0,   165,     0,     0,     0,     0,
       0,   168,  4139,     0,   169,   170,     0,   171,     0,     0,
       0,     0,     0,   175,   176,   177,   178,  4140,   180,   181,
       0,   182,   183,     0,     0,     0,     0,     0,     0,   189,
       0,   191,     0,   193,   194,   195,   196,     0,   197,   198,
       0,   199,   200,   201,     0,   203,     0,   204,     0,     0,
     205,     0,     0,   206,     0,   207,     0,     0,   208,     0,
     209,     0,     0,     0,   210,   211,   212,     0,     0,   213,
       0,     0,     0,     0,   214,     0,     0,     0,     0,     0,
     216,     0,   217,     0,     0,     0,   218,     0,   219,   220,
     221,   222,   223,     0,     0,     0,     0,     0,     0,   225,
     226,   227,     0,  -342,  -342,   228,     0,  -342,   230,     0,
     231,   232,   233,     0,     0,   234,   235,     0,   236,   237,
     238,   239,   240,     0,     0,     0,     0,   243,   244,   245,
       0,     0,   246,   247,  4141,   248,   249,   250,     0,     0,
       0,     0,     0,     0,   252,     0,   253,     0,   254,     0,
     255,   256,   257,   258,   259,     0,   260,     0,   261,     0,
       0,     0,     0,   263,   264,     0,     0,     0,     0,     0,
       0,   267,     0,     0,     0,   268,   269,   270,   271,   272,
    4142,     0,   273,   274,   275,     0,   276,     0,   277,     0,
       0,     0,     0,   278,     0,     0,     0,     0,   280,     0,
     281,   282,     0,   283,   284,  4143,     0,     0,   285,     0,
       0,     0,   287,   288,     0,     0,   289,  4144,     0,   290,
     291,     0,     0,     0,     0,     0,   292,   293,     0,   294,
       0,   295,     0,   296,   297,     0,     0,     0,     0,  -327,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,
     315,   316,   317,     0,   318,   319,   320,   321,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,     0,   332,     0,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,     0,     0,   345,   346,   347,   348,     0,
       0,     0,     0,   350,     0,     0,     0,   351,     0,   352,
     353,   354,     0,   355,   356,   357,  4145,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   362,
     363,     0,     0,     0,     0,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     377,   378,     0,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,     0,     0,   388,     0,     0,     0,
     389,   390,   391,   392,   393,     0,     0,   394,   395,   396,
     397,   398,     0,   399,     0,     0,   401,     0,   403,  -327,
       0,   404,     0,     0,     0,   406,     0,     0,   408,   409,
       0,   410,  4146,   411,     0,     0,   412,     0,   414,   415,
     416,   417,   418,   419,   420,     0,   422,   423,     0,   424,
       0,     0,     0,     0,   426,   427,   428,     0,     0,     0,
       0,   430,     0,     0,     0,     0,     0,     0,   433,     0,
       0,   436,   437,     0,   438,     0,   440,     0,   442,   443,
       0,     0,     0,     0,     0,     0,   444,   445,     0,   446,
       0,     0,   447,     0,     0,   448,     0,     0,     0,     0,
     450,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,     0,   459,   460,   461,   462,     0,   463,
     464,     0,   465,     0,   466,   467,   468,   469,     0,     0,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
       0,     0,   476,   477,   478,     0,     0,     0,     0,   480,
     481,   482,     0,   483,   484,     0,   485,   486,     0,     0,
       0,     0,     0,   489,     0,     0,   490,     0,     0,     0,
     492,   493,   494,     0,     0,     0,     0,     0,     0,   495,
       0,     0,   496,     0,     0,     0,   497,   498,   499,   500,
     501,   502,   503,     0,     0,  -327,     0,     0,     0,   504,
       0,     0,   506,     0,   508,     0,   141,   509,   142,   143,
     144,   145,   146,   147,     0,     0,   148,     0,     0,     0,
     149,     0,     0,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,     0,  -372,     0,     0,     0,   160,     0,
       0,     0,   161,     0,     0,   162,   163,   164,     0,   165,
       0,     0,     0,     0,     0,   168,  4139,     0,   169,   170,
       0,   171,     0,     0,     0,     0,     0,   175,   176,   177,
     178,  4140,   180,   181,     0,   182,   183,     0,     0,     0,
       0,     0,     0,   189,     0,   191,     0,   193,   194,   195,
     196,     0,   197,   198,     0,   199,   200,   201,     0,   203,
       0,   204,     0,     0,   205,     0,     0,   206,     0,   207,
       0,     0,   208,     0,   209,     0,     0,     0,   210,   211,
     212,     0,     0,   213,     0,     0,     0,     0,   214,     0,
       0,     0,     0,     0,   216,     0,   217,     0,     0,     0,
     218,     0,   219,   220,   221,   222,   223,     0,     0,     0,
       0,     0,     0,   225,   226,   227,     0,  -363,     0,   228,
       0,  -363,   230,     0,   231,   232,   233,     0,     0,   234,
     235,     0,   236,   237,   238,   239,   240,     0,     0,     0,
       0,   243,   244,   245,     0,     0,   246,   247,  4141,   248,
     249,   250,     0,     0,     0,     0,     0,     0,   252,     0,
     253,     0,   254,     0,   255,   256,   257,   258,   259,     0,
     260,     0,   261,     0,     0,     0,     0,   263,   264,     0,
       0,     0,     0,     0,     0,   267,     0,     0,     0,   268,
     269,   270,   271,   272,  4142,     0,   273,   274,   275,     0,
     276,     0,   277,     0,     0,     0,     0,   278,     0,     0,
       0,     0,   280,     0,   281,   282,     0,   283,   284,  4143,
       0,     0,   285,     0,     0,     0,   287,   288,     0,     0,
     289,  4144,     0,   290,   291,     0,     0,     0,     0,     0,
     292,   293,     0,   294,     0,   295,     0,   296,   297,     0,
       0,     0,     0,  -327,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,     0,   314,   315,   316,   317,     0,   318,   319,
     320,   321,     0,   322,   323,     0,     0,     0,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,     0,
     332,     0,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,     0,     0,   345,
     346,   347,   348,     0,     0,     0,     0,   350,     0,     0,
       0,   351,     0,   352,   353,   354,     0,   355,   356,   357,
    4145,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   362,   363,     0,     0,     0,     0,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   377,   378,     0,   379,     0,   380,
     381,   382,   383,   384,     0,   385,   386,   387,     0,     0,
     388,     0,     0,     0,   389,   390,   391,   392,   393,     0,
       0,   394,   395,   396,   397,   398,     0,   399,     0,     0,
     401,     0,   403,  -327,     0,   404,     0,     0,     0,   406,
       0,     0,   408,   409,     0,   410,  4146,   411,     0,     0,
     412,     0,   414,   415,   416,   417,   418,   419,   420,     0,
     422,   423,     0,   424,     0,     0,     0,     0,   426,   427,
     428,     0,     0,     0,     0,   430,     0,     0,     0,     0,
       0,     0,   433,     0,     0,   436,   437,     0,   438,     0,
     440,     0,   442,   443,     0,     0,     0,     0,     0,     0,
     444,   445,     0,   446,     0,     0,   447,     0,     0,   448,
       0,     0,     0,     0,   450,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,     0,   459,   460,
     461,   462,     0,   463,   464,     0,   465,     0,   466,   467,
     468,   469,     0,     0,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,     0,     0,   476,   477,   478,     0,
       0,     0,     0,   480,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,     0,     0,     0,   489,     0,     0,
     490,     0,     0,     0,   492,   493,   494,     0,     0,     0,
       0,     0,     0,   495,     0,     0,   496,     0,     0,     0,
     497,   498,   499,   500,   501,   502,   503,  -363,     0,  -327,
       0,     0,     0,   504,     0,     0,   506,     0,   508,     0,
     141,   509,   142,   143,   144,   145,   146,   147,     0,     0,
     148,     0,     0,     0,   149,     0,     0,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,     0,  -372,     0,
       0,     0,   160,     0,     0,     0,   161,     0,     0,   162,
     163,   164,     0,   165,     0,     0,     0,     0,     0,   168,
    4139,     0,   169,   170,     0,   171,     0,     0,     0,     0,
       0,   175,   176,   177,   178,  4140,   180,   181,     0,   182,
     183,     0,     0,     0,     0,     0,     0,   189,     0,   191,
       0,   193,   194,   195,   196,     0,   197,   198,     0,   199,
     200,   201,     0,   203,     0,   204,     0,     0,   205,     0,
       0,   206,     0,   207,     0,     0,   208,     0,   209,     0,
       0,     0,   210,   211,   212,     0,     0,   213,     0,     0,
       0,     0,   214,     0,     0,     0,     0,     0,   216,     0,
     217,     0,     0,     0,   218,     0,   219,   220,   221,   222,
     223,     0,     0,     0,     0,     0,     0,   225,   226,   227,
       0,  -360,     0,   228,     0,  -360,   230,     0,   231,   232,
     233,     0,     0,   234,   235,     0,   236,   237,   238,   239,
     240,     0,     0,     0,     0,   243,   244,   245,     0,     0,
     246,   247,  4141,   248,   249,   250,     0,     0,     0,     0,
       0,     0,   252,     0,   253,     0,   254,     0,   255,   256,
     257,   258,   259,     0,   260,     0,   261,     0,     0,     0,
       0,   263,   264,     0,     0,     0,     0,     0,     0,   267,
       0,     0,     0,   268,   269,   270,   271,   272,  4142,     0,
     273,   274,   275,     0,   276,     0,   277,     0,     0,     0,
       0,   278,     0,     0,     0,     0,   280,     0,   281,   282,
       0,   283,   284,  4143,     0,     0,   285,     0,     0,     0,
     287,   288,     0,     0,   289,  4144,     0,   290,   291,     0,
       0,     0,     0,     0,   292,   293,     0,   294,     0,   295,
       0,   296,   297,     0,     0,     0,     0,  -327,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,     0,   314,   315,   316,
     317,     0,   318,   319,   320,   321,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,     0,   332,     0,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,     0,     0,   345,   346,   347,   348,     0,     0,     0,
       0,   350,     0,     0,     0,   351,     0,   352,   353,   354,
       0,   355,   356,   357,  4145,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   362,   363,     0,
       0,     0,     0,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   377,   378,
       0,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,     0,     0,   389,   390,
     391,   392,   393,     0,     0,   394,   395,   396,   397,   398,
       0,   399,     0,     0,   401,     0,   403,  -327,     0,   404,
       0,     0,     0,   406,     0,     0,   408,   409,     0,   410,
    4146,   411,     0,     0,   412,     0,   414,   415,   416,   417,
     418,   419,   420,     0,   422,   423,     0,   424,     0,     0,
       0,     0,   426,   427,   428,     0,     0,     0,     0,   430,
       0,     0,     0,     0,     0,     0,   433,     0,     0,   436,
     437,     0,   438,     0,   440,     0,   442,   443,     0,     0,
       0,     0,     0,     0,   444,   445,     0,   446,     0,     0,
     447,     0,     0,   448,     0,     0,     0,     0,   450,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,     0,   459,   460,   461,   462,     0,   463,   464,     0,
     465,     0,   466,   467,   468,   469,     0,     0,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,     0,     0,
     476,   477,   478,     0,     0,     0,     0,   480,   481,   482,
       0,   483,   484,     0,   485,   486,     0,     0,     0,     0,
       0,   489,     0,     0,   490,     0,     0,     0,   492,   493,
     494,     0,     0,     0,     0,     0,     0,   495,     0,     0,
     496,     0,     0,     0,   497,   498,   499,   500,   501,   502,
     503,  -360,     0,  -327,     0,     0,     0,   504,     0,     0,
     506,     0,   508,     0,   141,   509,   142,   143,   144,   145,
     146,   147,     0,     0,   148,     0,     0,     0,   149,     0,
       0,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,     0,  -372,     0,     0,     0,   160,     0,     0,     0,
     161,     0,     0,   162,   163,   164,     0,   165,     0,     0,
       0,     0,     0,   168,  4139,     0,   169,   170,     0,   171,
       0,     0,     0,     0,     0,   175,   176,   177,   178,  4140,
     180,   181,     0,   182,   183,     0,     0,     0,     0,     0,
       0,   189,     0,   191,     0,   193,   194,   195,   196,     0,
     197,   198,     0,   199,   200,   201,     0,   203,     0,   204,
       0,     0,   205,     0,     0,   206,     0,   207,     0,     0,
     208,     0,   209,     0,     0,     0,   210,   211,   212,     0,
       0,   213,     0,     0,     0,     0,   214,     0,     0,     0,
       0,     0,   216,     0,   217,     0,     0,     0,   218,     0,
     219,   220,   221,   222,   223,     0,     0,     0,     0,     0,
       0,   225,   226,   227,     0,     0,     0,   228,     0,  4520,
     230,     0,   231,   232,   233,     0,     0,   234,   235,     0,
     236,   237,   238,   239,   240,     0,     0,     0,     0,   243,
     244,   245,     0,     0,   246,   247,  4141,   248,   249,   250,
       0,     0,     0,     0,     0,     0,   252,     0,   253,     0,
     254,     0,   255,   256,   257,   258,   259,     0,   260,     0,
     261,     0,     0,     0,     0,   263,   264,     0,     0,     0,
       0,     0,     0,   267,     0,     0,     0,   268,   269,   270,
     271,   272,  4142,     0,   273,   274,   275,     0,   276,     0,
     277,     0,     0,     0,     0,   278,     0,     0,     0,     0,
     280,     0,   281,   282,     0,   283,   284,  4143,     0,     0,
     285,     0,     0,     0,   287,   288,     0,     0,   289,  4144,
       0,   290,   291,     0,     0,     0,     0,     0,   292,   293,
       0,   294,     0,   295,     0,   296,   297,     0,     0,     0,
       0,  -327,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,   314,   315,   316,   317,     0,   318,   319,   320,   321,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,     0,   332,     0,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,     0,     0,   345,   346,   347,
     348,     0,     0,     0,     0,   350,     0,     0,     0,   351,
       0,   352,   353,   354,     0,   355,   356,   357,  4145,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   362,   363,     0,     0,     0,     0,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   377,   378,     0,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
       0,     0,   389,   390,   391,   392,   393,     0,     0,   394,
     395,   396,   397,   398,     0,   399,     0,     0,   401,     0,
     403,  -327,     0,   404,     0,     0,     0,   406,     0,     0,
     408,   409,     0,   410,  4146,   411,     0,     0,   412,     0,
     414,   415,   416,   417,   418,   419,   420,     0,   422,   423,
       0,   424,     0,     0,     0,     0,   426,   427,   428,     0,
       0,     0,     0,   430,     0,     0,     0,     0,     0,     0,
     433,     0,     0,   436,   437,     0,   438,     0,   440,     0,
     442,   443,     0,     0,     0,     0,     0,     0,   444,   445,
       0,   446,     0,     0,   447,     0,     0,   448,     0,     0,
       0,     0,   450,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,     0,   459,   460,   461,   462,
       0,   463,   464,     0,   465,     0,   466,   467,   468,   469,
       0,     0,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,     0,     0,   476,   477,   478,     0,     0,     0,
       0,   480,   481,   482,     0,   483,   484,     0,   485,   486,
       0,     0,     0,     0,     0,   489,     0,     0,   490,     0,
       0,     0,   492,   493,   494,     0,     0,     0,     0,     0,
       0,   495,     0,     0,   496,     0,     0,     0,   497,   498,
     499,   500,   501,   502,   503,     0,     0,  -327,     0,     0,
       0,   504,     0,     0,   506,     0,   508,     0,   141,   509,
     142,   143,   144,   145,   146,   147,     0,     0,   148,     0,
       0,     0,   149,     0,     0,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,     0,  -372,     0,     0,     0,
     160,     0,     0,     0,   161,     0,     0,   162,   163,   164,
       0,   165,     0,     0,     0,     0,     0,   168,  4139,     0,
     169,   170,     0,   171,     0,     0,     0,     0,     0,   175,
     176,   177,   178,  4140,   180,   181,     0,   182,   183,     0,
       0,     0,     0,     0,     0,   189,     0,   191,     0,   193,
     194,   195,   196,     0,   197,   198,     0,   199,   200,   201,
       0,   203,     0,   204,     0,     0,   205,     0,     0,   206,
       0,   207,     0,     0,   208,     0,   209,     0,     0,     0,
     210,   211,   212,     0,     0,   213,     0,     0,     0,     0,
     214,     0,     0,     0,     0,     0,   216,     0,   217,     0,
       0,     0,   218,     0,   219,   220,   221,   222,   223,     0,
       0,     0,     0,     0,     0,   225,   226,   227,     0,     0,
       0,   228,     0,  -365,   230,     0,   231,   232,   233,     0,
       0,   234,   235,     0,   236,   237,   238,   239,   240,     0,
       0,     0,     0,   243,   244,   245,     0,     0,   246,   247,
    4141,   248,   249,   250,     0,     0,     0,     0,     0,     0,
     252,     0,   253,     0,   254,     0,   255,   256,   257,   258,
     259,     0,   260,     0,   261,     0,     0,     0,     0,   263,
     264,     0,     0,     0,     0,     0,     0,   267,     0,     0,
       0,   268,   269,   270,   271,   272,  4142,     0,   273,   274,
     275,     0,   276,     0,   277,     0,     0,     0,     0,   278,
       0,     0,     0,     0,   280,     0,   281,   282,     0,   283,
     284,  4143,     0,     0,   285,     0,     0,     0,   287,   288,
       0,     0,   289,  4144,     0,   290,   291,     0,     0,     0,
       0,     0,   292,   293,     0,   294,     0,   295,     0,   296,
     297,     0,     0,     0,     0,  -327,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,   314,   315,   316,   317,     0,
     318,   319,   320,   321,     0,   322,   323,     0,     0,     0,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,     0,   332,     0,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,     0,
       0,   345,   346,   347,   348,     0,     0,     0,     0,   350,
       0,     0,     0,   351,     0,   352,   353,   354,     0,   355,
     356,   357,  4145,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   362,   363,     0,     0,     0,
       0,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   377,   378,     0,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
       0,     0,   388,     0,     0,     0,   389,   390,   391,   392,
     393,     0,     0,   394,   395,   396,   397,   398,     0,   399,
       0,     0,   401,     0,   403,  -327,     0,   404,     0,     0,
       0,   406,     0,     0,   408,   409,     0,   410,  4146,   411,
       0,     0,   412,     0,   414,   415,   416,   417,   418,   419,
     420,     0,   422,   423,     0,   424,     0,     0,     0,     0,
     426,   427,   428,     0,     0,     0,     0,   430,     0,     0,
       0,     0,     0,     0,   433,     0,     0,   436,   437,     0,
     438,     0,   440,     0,   442,   443,     0,     0,     0,     0,
       0,     0,   444,   445,     0,   446,     0,     0,   447,     0,
       0,   448,     0,     0,     0,     0,   450,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,     0,
     459,   460,   461,   462,     0,   463,   464,     0,   465,     0,
     466,   467,   468,   469,     0,     0,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,     0,     0,   476,   477,
     478,     0,     0,     0,     0,   480,   481,   482,     0,   483,
     484,     0,   485,   486,     0,     0,     0,     0,     0,   489,
       0,     0,   490,     0,     0,     0,   492,   493,   494,     0,
       0,     0,     0,     0,     0,   495,     0,     0,   496,     0,
       0,     0,   497,   498,   499,   500,   501,   502,   503,     0,
       0,  -327,     0,     0,     0,   504,     0,     0,   506,     0,
     508,     0,   141,   509,   142,   143,   144,   145,   146,   147,
       0,     0,   148,     0,     0,     0,   149,     0,     0,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,     0,
    -372,     0,     0,     0,   160,     0,     0,     0,   161,     0,
       0,   162,   163,   164,     0,   165,     0,     0,     0,     0,
       0,   168,  4139,     0,   169,   170,     0,   171,     0,     0,
       0,     0,     0,   175,   176,   177,   178,  4140,   180,   181,
       0,   182,   183,     0,     0,     0,     0,     0,     0,   189,
       0,   191,     0,   193,   194,   195,   196,     0,   197,   198,
       0,   199,   200,   201,     0,   203,     0,   204,     0,     0,
     205,     0,     0,   206,     0,   207,     0,     0,   208,     0,
     209,     0,     0,     0,   210,   211,   212,     0,     0,   213,
       0,     0,     0,     0,   214,     0,     0,     0,     0,     0,
     216,     0,   217,     0,     0,     0,   218,     0,   219,   220,
     221,   222,   223,     0,     0,     0,     0,     0,     0,   225,
     226,   227,     0,     0,     0,   228,     0,  4656,   230,     0,
     231,   232,   233,     0,     0,   234,   235,     0,   236,   237,
     238,   239,   240,     0,     0,     0,     0,   243,   244,   245,
       0,     0,   246,   247,  4141,   248,   249,   250,     0,     0,
       0,     0,     0,     0,   252,     0,   253,     0,   254,     0,
     255,   256,   257,   258,   259,     0,   260,     0,   261,     0,
       0,     0,     0,   263,   264,     0,     0,     0,     0,     0,
       0,   267,     0,     0,     0,   268,   269,   270,   271,   272,
    4142,     0,   273,   274,   275,     0,   276,     0,   277,     0,
       0,     0,     0,   278,     0,     0,     0,     0,   280,     0,
     281,   282,     0,   283,   284,  4143,     0,     0,   285,     0,
       0,     0,   287,   288,     0,     0,   289,  4144,     0,   290,
     291,     0,     0,     0,     0,     0,   292,   293,     0,   294,
       0,   295,     0,   296,   297,     0,     0,     0,     0,  -327,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,
     315,   316,   317,     0,   318,   319,   320,   321,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,     0,   332,     0,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,     0,     0,   345,   346,   347,   348,     0,
       0,     0,     0,   350,     0,     0,     0,   351,     0,   352,
     353,   354,     0,   355,   356,   357,  4145,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   362,
     363,     0,     0,     0,     0,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     377,   378,     0,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,     0,     0,   388,     0,     0,     0,
     389,   390,   391,   392,   393,     0,     0,   394,   395,   396,
     397,   398,     0,   399,     0,     0,   401,     0,   403,  -327,
       0,   404,     0,     0,     0,   406,     0,     0,   408,   409,
       0,   410,  4146,   411,     0,     0,   412,     0,   414,   415,
     416,   417,   418,   419,   420,     0,   422,   423,     0,   424,
       0,     0,     0,     0,   426,   427,   428,     0,     0,     0,
       0,   430,     0,     0,     0,     0,     0,     0,   433,     0,
       0,   436,   437,     0,   438,     0,   440,     0,   442,   443,
       0,     0,     0,     0,     0,     0,   444,   445,     0,   446,
       0,     0,   447,     0,     0,   448,     0,     0,     0,     0,
     450,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,     0,   459,   460,   461,   462,     0,   463,
     464,     0,   465,     0,   466,   467,   468,   469,     0,     0,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
       0,     0,   476,   477,   478,     0,     0,     0,     0,   480,
     481,   482,     0,   483,   484,     0,   485,   486,     0,     0,
       0,     0,     0,   489,     0,     0,   490,     0,     0,     0,
     492,   493,   494,     0,     0,     0,     0,     0,     0,   495,
       0,     0,   496,     0,     0,     0,   497,   498,   499,   500,
     501,   502,   503,     0,     0,  -327,     0,     0,     0,   504,
       0,     0,   506,     0,   508,     0,   141,   509,   142,   143,
     144,   145,   146,   147,     0,     0,   148,     0,     0,     0,
     149,     0,     0,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,     0,  -372,     0,     0,     0,   160,     0,
       0,     0,   161,     0,     0,   162,   163,   164,     0,   165,
       0,     0,     0,     0,     0,   168,  4139,     0,   169,   170,
       0,   171,     0,     0,     0,     0,     0,   175,   176,   177,
     178,  4140,   180,   181,     0,   182,   183,     0,     0,     0,
       0,     0,     0,   189,     0,   191,     0,   193,   194,   195,
     196,     0,   197,   198,     0,   199,   200,   201,     0,   203,
       0,   204,     0,     0,   205,     0,     0,   206,     0,   207,
       0,     0,   208,     0,   209,     0,     0,     0,   210,   211,
     212,     0,     0,   213,     0,     0,     0,     0,   214,     0,
       0,     0,     0,     0,   216,     0,   217,     0,     0,     0,
     218,     0,   219,   220,   221,   222,   223,     0,     0,     0,
       0,     0,     0,   225,   226,   227,     0,     0,     0,   228,
       0,  4709,   230,     0,   231,   232,   233,     0,     0,   234,
     235,     0,   236,   237,   238,   239,   240,     0,     0,     0,
       0,   243,   244,   245,     0,     0,   246,   247,  4141,   248,
     249,   250,     0,     0,     0,     0,     0,     0,   252,     0,
     253,     0,   254,     0,   255,   256,   257,   258,   259,     0,
     260,     0,   261,     0,     0,     0,     0,   263,   264,     0,
       0,     0,     0,     0,     0,   267,     0,     0,     0,   268,
     269,   270,   271,   272,  4142,     0,   273,   274,   275,     0,
     276,     0,   277,     0,     0,     0,     0,   278,     0,     0,
       0,     0,   280,     0,   281,   282,     0,   283,   284,  4143,
       0,     0,   285,     0,     0,     0,   287,   288,     0,     0,
     289,  4144,     0,   290,   291,     0,     0,     0,     0,     0,
     292,   293,     0,   294,     0,   295,     0,   296,   297,     0,
       0,     0,     0,  -327,     0,     0,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,     0,   314,   315,   316,   317,     0,   318,   319,
     320,   321,     0,   322,   323,     0,     0,     0,     0,   324,
     325,   326,   327,   328,   329,     0,     0,   330,   331,     0,
     332,     0,   333,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,     0,     0,   345,
     346,   347,   348,     0,     0,     0,     0,   350,     0,     0,
       0,   351,     0,   352,   353,   354,     0,   355,   356,   357,
    4145,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   362,   363,     0,     0,     0,     0,   365,
       0,   366,   367,   368,   369,   370,   371,   372,   373,   374,
       0,     0,     0,     0,   377,   378,     0,   379,     0,   380,
     381,   382,   383,   384,     0,   385,   386,   387,     0,     0,
     388,     0,     0,     0,   389,   390,   391,   392,   393,     0,
       0,   394,   395,   396,   397,   398,     0,   399,     0,     0,
     401,     0,   403,  -327,     0,   404,     0,     0,     0,   406,
       0,     0,   408,   409,     0,   410,  4146,   411,     0,     0,
     412,     0,   414,   415,   416,   417,   418,   419,   420,     0,
     422,   423,     0,   424,     0,     0,     0,     0,   426,   427,
     428,     0,     0,     0,     0,   430,     0,     0,     0,     0,
       0,     0,   433,     0,     0,   436,   437,     0,   438,     0,
     440,     0,   442,   443,     0,     0,     0,     0,     0,     0,
     444,   445,     0,   446,     0,     0,   447,     0,     0,   448,
       0,     0,     0,     0,   450,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,     0,   459,   460,
     461,   462,     0,   463,   464,     0,   465,     0,   466,   467,
     468,   469,     0,     0,   470,   471,     0,   472,   473,   474,
     475,     0,     0,     0,     0,     0,   476,   477,   478,     0,
       0,     0,     0,   480,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,     0,     0,     0,   489,     0,     0,
     490,     0,     0,     0,   492,   493,   494,     0,     0,     0,
       0,     0,     0,   495,     0,     0,   496,     0,     0,     0,
     497,   498,   499,   500,   501,   502,   503,     0,     0,  -327,
       0,     0,     0,   504,     0,     0,   506,     0,   508,     0,
     141,   509,   142,   143,   144,   145,   146,   147,     0,     0,
     148,     0,     0,     0,   149,     0,     0,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,     0,  -372,     0,
       0,     0,   160,     0,     0,     0,   161,     0,     0,   162,
     163,   164,     0,   165,     0,     0,     0,     0,     0,   168,
    4139,     0,   169,   170,     0,   171,     0,     0,     0,     0,
       0,   175,   176,   177,   178,  4140,   180,   181,     0,   182,
     183,     0,     0,     0,     0,     0,     0,   189,     0,   191,
       0,   193,   194,   195,   196,     0,   197,   198,     0,   199,
     200,   201,     0,   203,     0,   204,     0,     0,   205,     0,
       0,   206,     0,   207,     0,     0,   208,     0,   209,     0,
       0,     0,   210,   211,   212,     0,     0,   213,     0,     0,
       0,     0,   214,     0,     0,     0,     0,     0,   216,     0,
     217,     0,     0,     0,   218,     0,   219,   220,   221,   222,
     223,     0,     0,     0,     0,     0,     0,   225,   226,   227,
       0,     0,     0,   228,     0,  -346,   230,     0,   231,   232,
     233,     0,     0,   234,   235,     0,   236,   237,   238,   239,
     240,     0,     0,     0,     0,   243,   244,   245,     0,     0,
     246,   247,  4141,   248,   249,   250,     0,     0,     0,     0,
       0,     0,   252,     0,   253,     0,   254,     0,   255,   256,
     257,   258,   259,     0,   260,     0,   261,     0,     0,     0,
       0,   263,   264,     0,     0,     0,     0,     0,     0,   267,
       0,     0,     0,   268,   269,   270,   271,   272,  4142,     0,
     273,   274,   275,     0,   276,     0,   277,     0,     0,     0,
       0,   278,     0,     0,     0,     0,   280,     0,   281,   282,
       0,   283,   284,  4143,     0,     0,   285,     0,     0,     0,
     287,   288,     0,     0,   289,  4144,     0,   290,   291,     0,
       0,     0,     0,     0,   292,   293,     0,   294,     0,   295,
       0,   296,   297,     0,     0,     0,     0,  -327,     0,     0,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,     0,   314,   315,   316,
     317,     0,   318,   319,   320,   321,     0,   322,   323,     0,
       0,     0,     0,   324,   325,   326,   327,   328,   329,     0,
       0,   330,   331,     0,   332,     0,   333,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,     0,     0,   345,   346,   347,   348,     0,     0,     0,
       0,   350,     0,     0,     0,   351,     0,   352,   353,   354,
       0,   355,   356,   357,  4145,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   362,   363,     0,
       0,     0,     0,   365,     0,   366,   367,   368,   369,   370,
     371,   372,   373,   374,     0,     0,     0,     0,   377,   378,
       0,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     386,   387,     0,     0,   388,     0,     0,     0,   389,   390,
     391,   392,   393,     0,     0,   394,   395,   396,   397,   398,
       0,   399,     0,     0,   401,     0,   403,  -327,     0,   404,
       0,     0,     0,   406,     0,     0,   408,   409,     0,   410,
    4146,   411,     0,     0,   412,     0,   414,   415,   416,   417,
     418,   419,   420,     0,   422,   423,     0,   424,     0,     0,
       0,     0,   426,   427,   428,     0,     0,     0,     0,   430,
       0,     0,     0,     0,     0,     0,   433,     0,     0,   436,
     437,     0,   438,     0,   440,     0,   442,   443,     0,     0,
       0,     0,     0,     0,   444,   445,     0,   446,     0,     0,
     447,     0,     0,   448,     0,     0,     0,     0,   450,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,     0,   459,   460,   461,   462,     0,   463,   464,     0,
     465,     0,   466,   467,   468,   469,     0,     0,   470,   471,
       0,   472,   473,   474,   475,     0,     0,     0,     0,     0,
     476,   477,   478,     0,     0,     0,     0,   480,   481,   482,
       0,   483,   484,     0,   485,   486,     0,     0,     0,     0,
       0,   489,     0,     0,   490,     0,     0,     0,   492,   493,
     494,     0,     0,     0,     0,     0,     0,   495,     0,     0,
     496,     0,     0,     0,   497,   498,   499,   500,   501,   502,
     503,     0,     0,  -327,     0,     0,     0,   504,     0,     0,
     506,     0,   508,     0,   141,   509,   142,   143,   144,   145,
     146,   147,     0,     0,   148,     0,     0,     0,   149,     0,
       0,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,     0,  -372,     0,     0,     0,   160,     0,     0,     0,
     161,     0,     0,   162,   163,   164,     0,   165,     0,     0,
       0,     0,     0,   168,  4139,     0,   169,   170,     0,   171,
       0,     0,     0,     0,     0,   175,   176,   177,   178,  4140,
     180,   181,     0,   182,   183,     0,     0,     0,     0,     0,
       0,   189,     0,   191,     0,   193,   194,   195,   196,     0,
     197,   198,     0,   199,   200,   201,     0,   203,     0,   204,
       0,     0,   205,     0,     0,   206,     0,   207,     0,     0,
     208,     0,   209,     0,     0,     0,   210,   211,   212,     0,
       0,   213,     0,     0,     0,     0,   214,     0,     0,     0,
       0,     0,   216,     0,   217,     0,     0,     0,   218,     0,
     219,   220,   221,   222,   223,     0,     0,     0,     0,     0,
       0,   225,   226,   227,     0,     0,     0,   228,     0,     0,
     230,     0,   231,   232,   233,     0,     0,   234,   235,     0,
     236,   237,   238,   239,   240,     0,     0,     0,     0,   243,
     244,   245,     0,     0,   246,   247,  4141,   248,   249,   250,
       0,     0,     0,     0,     0,     0,   252,     0,   253,     0,
     254,     0,   255,   256,   257,   258,   259,     0,   260,     0,
     261,     0,     0,     0,     0,   263,   264,     0,     0,     0,
       0,     0,     0,   267,     0,     0,     0,   268,   269,   270,
     271,   272,  4142,     0,   273,   274,   275,     0,   276,     0,
     277,     0,     0,     0,     0,   278,     0,     0,     0,     0,
     280,     0,   281,   282,     0,   283,   284,  4143,     0,     0,
     285,     0,     0,     0,   287,   288,     0,     0,   289,  4144,
       0,   290,   291,     0,     0,     0,     0,     0,   292,   293,
       0,   294,     0,   295,     0,   296,   297,     0,     0,     0,
       0,  -327,     0,     0,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
       0,   314,   315,   316,   317,     0,   318,   319,   320,   321,
       0,   322,   323,     0,     0,     0,     0,   324,   325,   326,
     327,   328,   329,     0,     0,   330,   331,     0,   332,     0,
     333,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,     0,     0,   345,   346,   347,
     348,     0,     0,     0,     0,   350,     0,     0,     0,   351,
       0,   352,   353,   354,     0,   355,   356,   357,  4145,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   362,   363,     0,     0,     0,     0,   365,     0,   366,
     367,   368,   369,   370,   371,   372,   373,   374,     0,     0,
       0,     0,   377,   378,     0,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,     0,     0,   388,     0,
       0,     0,   389,   390,   391,   392,   393,     0,     0,   394,
     395,   396,   397,   398,     0,   399,     0,     0,   401,     0,
     403,  -327,     0,   404,     0,     0,     0,   406,     0,     0,
     408,   409,     0,   410,  4146,   411,     0,     0,   412,     0,
     414,   415,   416,   417,   418,   419,   420,     0,   422,   423,
       0,   424,     0,     0,     0,     0,   426,   427,   428,     0,
       0,     0,     0,   430,     0,     0,     0,     0,     0,     0,
     433,     0,     0,   436,   437,     0,   438,     0,   440,     0,
     442,   443,     0,     0,     0,     0,     0,     0,   444,   445,
       0,   446,     0,     0,   447,     0,     0,   448,     0,     0,
       0,     0,   450,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,     0,   459,   460,   461,   462,
       0,   463,   464,     0,   465,     0,   466,   467,   468,   469,
       0,     0,   470,   471,     0,   472,   473,   474,   475,     0,
       0,     0,     0,     0,   476,   477,   478,     0,     0,     0,
       0,   480,   481,   482,     0,   483,   484,     0,   485,   486,
       0,     0,     0,     0,     0,   489,     0,     0,   490,     0,
       0,     0,   492,   493,   494,     0,     0,     0,     0,     0,
       0,   495,     0,     0,   496,     0,     0,     0,   497,   498,
     499,   500,   501,   502,   503,     0,     0,  -327,     0,     0,
       0,   504,     0,     0,   506,     0,   508,     0,   141,   509,
     142,   143,   144,   145,   146,   147,     0,     0,   148,     0,
       0,     0,   149,     0,     0,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,     0,  -372,     0,     0,     0,
     160,     0,     0,     0,   161,     0,     0,   162,   163,   164,
       0,   165,     0,     0,     0,     0,     0,   168,  4139,     0,
     169,   170,     0,   171,     0,     0,     0,     0,     0,   175,
     176,   177,   178,  4140,   180,   181,     0,   182,   183,     0,
       0,     0,     0,     0,     0,   189,     0,   191,     0,   193,
     194,   195,   196,     0,   197,   198,     0,   199,   200,   201,
       0,   203,     0,   204,     0,     0,   205,     0,     0,   206,
       0,   207,     0,     0,   208,     0,   209,     0,     0,     0,
     210,   211,   212,     0,     0,   213,     0,     0,     0,     0,
     214,     0,     0,     0,     0,     0,   216,     0,   217,     0,
       0,     0,   218,     0,   219,   220,   221,   222,   223,     0,
       0,     0,     0,     0,     0,   225,   226,   227,     0,     0,
       0,   228,     0,     0,   230,     0,   231,   232,   233,     0,
       0,   234,   235,     0,   236,   237,   238,   239,   240,     0,
       0,     0,     0,   243,   244,   245,     0,     0,   246,   247,
    4141,   248,   249,   250,     0,     0,     0,     0,     0,     0,
     252,     0,   253,     0,   254,     0,   255,   256,   257,   258,
     259,     0,   260,     0,   261,     0,     0,     0,     0,   263,
     264,     0,     0,     0,     0,     0,     0,   267,     0,     0,
       0,   268,   269,   270,   271,   272,  4142,     0,   273,   274,
     275,     0,   276,     0,   277,     0,     0,     0,     0,   278,
       0,     0,     0,     0,   280,     0,   281,   282,     0,   283,
     284,  4143,     0,     0,   285,     0,     0,     0,   287,   288,
       0,     0,   289,  4144,     0,   290,   291,     0,     0,     0,
       0,     0,   292,   293,     0,   294,     0,   295,     0,   296,
     297,     0,     0,     0,     0,  -327,     0,     0,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,     0,   314,   315,   316,   317,     0,
     318,   319,   320,   321,     0,   322,   323,     0,     0,     0,
       0,   324,   325,   326,   327,   328,   329,     0,     0,   330,
     331,     0,   332,     0,   333,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,     0,
       0,   345,   346,   347,   348,     0,     0,     0,     0,   350,
       0,     0,     0,   351,     0,   352,   353,   354,     0,   355,
     356,   357,  4145,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   362,   363,     0,     0,     0,
       0,   365,     0,   366,   367,   368,   369,   370,   371,   372,
     373,   374,     0,     0,     0,     0,   377,   378,     0,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
       0,     0,   388,     0,     0,     0,   389,   390,   391,   392,
     393,     0,     0,   394,   395,   396,   397,   398,     0,   399,
       0,     0,   401,     0,   403,  -327,     0,   404,     0,     0,
       0,   406,     0,     0,   408,   409,     0,   410,  4146,   411,
       0,     0,   412,     0,   414,   415,   416,   417,   418,   419,
     420,     0,   422,   423,     0,   424,     0,     0,     0,     0,
     426,   427,   428,     0,     0,     0,     0,   430,     0,     0,
       0,     0,     0,     0,   433,     0,     0,   436,   437,     0,
     438,     0,   440,     0,   442,   443,     0,     0,     0,     0,
       0,     0,   444,   445,     0,   446,     0,     0,   447,     0,
       0,   448,     0,     0,     0,     0,   450,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,     0,
     459,   460,   461,   462,     0,   463,   464,     0,   465,     0,
     466,   467,   468,   469,     0,     0,   470,   471,     0,   472,
     473,   474,   475,     0,     0,     0,     0,     0,   476,   477,
     478,     0,     0,     0,     0,   480,   481,   482,     0,   483,
     484,     0,   485,   486,     0,     0,     0,     0,     0,   489,
       0,     0,  4523,     0,     0,     0,   492,   493,   494,     0,
       0,     0,     0,     0,     0,   495,     0,     0,   496,     0,
       0,     0,   497,   498,   499,   500,   501,   502,   503,     0,
       0,  -327,     0,     0,     0,   504,     0,     0,   506,     0,
     508,     0,   141,   509,   142,   143,   144,   145,   146,   147,
       0,     0,   148,     0,     0,     0,   149,     0,     0,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,     0,
       0,     0,     0,     0,   160,     0,     0,     0,   161,     0,
       0,   162,   163,   164,     0,   165,     0,     0,     0,     0,
       0,   168,     0,     0,   169,   170,     0,   171,     0,     0,
       0,     0,     0,   175,   176,   177,   178,     0,   180,   181,
       0,   182,   183,     0,     0,     0,     0,     0,     0,   189,
       0,   191,     0,   193,   194,   195,   196,     0,   197,   198,
       0,   199,   200,   201,     0,   203,     0,   204,     0,     0,
     205,     0,     0,   206,     0,   207,     0,     0,   208,     0,
     209,     0,     0,     0,   210,   211,   212,     0,     0,   213,
       0,     0,     0,     0,   214,     0,     0,     0,     0,     0,
     216,     0,   217,     0,     0,     0,   218,     0,   219,   220,
     221,   222,   223,     0,     0,     0,     0,     0,     0,   225,
     226,   227,     0,     0,     0,   228,     0,     0,   230,     0,
     231,   232,   233,     0,     0,   234,   235,     0,   236,   237,
     238,   239,   240,     0,     0,     0,     0,   243,   244,   245,
       0,     0,   246,   247,     0,   248,   249,   250,     0,     0,
       0,     0,     0,     0,   252,     0,   253,     0,   254,     0,
     255,   256,   257,   258,   259,     0,   260,     0,   261,     0,
       0,     0,     0,   263,   264,     0,     0,     0,     0,     0,
       0,   267,     0,     0,     0,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,     0,   276,     0,   277,     0,
       0,     0,     0,   278,     0,     0,     0,     0,   280,     0,
     281,   282,     0,   283,   284,     0,     0,     0,   285,     0,
       0,     0,   287,   288,     0,     0,   289,     0,     0,   290,
     291,     0,     0,     0,     0,     0,   292,   293,     0,   294,
       0,   295,     0,   296,   297,     0,     0,     0,     0,     0,
       0,     0,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,     0,   314,
     315,   316,   317,     0,   318,   319,   320,   321,     0,   322,
     323,     0,     0,     0,     0,   324,   325,   326,   327,   328,
     329,     0,     0,   330,   331,     0,   332,     0,   333,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,     0,     0,   345,   346,   347,   348,     0,
       0,     0,     0,   350,     0,     0,     0,   351,     0,   352,
     353,   354,     0,   355,   356,   357,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   362,
     363,     0,     0,     0,     0,   365,     0,   366,   367,   368,
     369,   370,   371,   372,   373,   374,     0,     0,     0,     0,
     377,   378,     0,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,     0,     0,   388,     0,     0,     0,
     389,   390,   391,   392,   393,     0,     0,   394,   395,   396,
     397,   398,     0,   399,     0,     0,   401,     0,   403,     0,
       0,   404,     0,     0,     0,   406,     0,     0,   408,   409,
       0,   410,     0,   411,     0,     0,   412,     0,   414,   415,
     416,   417,   418,   419,   420,     0,   422,   423,     0,   424,
       0,     0,     0,     0,   426,   427,   428,     0,     0,     0,
       0,   430,     0,     0,     0,     0,     0,     0,   433,     0,
       0,   436,   437,     0,   438,     0,   440,     0,   442,   443,
       0,     0,     0,     0,     0,     0,   444,   445,     0,   446,
       0,     0,   447,     0,     0,   448,     0,     0,     0,     0,
     450,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,     0,   459,   460,   461,   462,     0,   463,
     464,     0,   465,     0,   466,   467,   468,   469,     0,     0,
     470,   471,     0,   472,   473,   474,   475,     0,     0,     0,
       0,     0,   476,   477,   478,     0,     0,     0,     0,   480,
     481,   482,     0,   483,   484,     0,   485,   486,     0,     0,
       0,     0,     0,   489,     0,     0,   490,     0,     0,     0,
     492,   493,   494,     0,     0,     0,     0,     0,     0,   495,
       0,     0,   496,     0,     0,     0,   497,   498,   499,   500,
     501,   502,   503,     0,     0,     0,     0,     0,     0,   504,
       0,     0,   506,     0,   508,     0,     0,   509
};

static const yytype_int16 yycheck[] =
{
       6,   665,   598,   576,  1038,  1238,   597,   598,    20,   950,
     951,   621,  1638,    19,  1238,   930,   127,    23,    30,  1039,
     961,  1951,  1952,  1335,   635,    37,  1164,    33,   522,     6,
    1136,  2113,  1595,  1786,    40,  2113,  1303,    43,   973,  1483,
     998,  1483,    48,   740,  1634,  1635,  1182,  1381,  1593,    55,
     543,   544,   545,  2439,   547,  1463,   549,  2223,   693,   552,
    2402,   554,  1206,   998,  1335,  2543,  2532,   836,  2604,  2235,
    1261,  3025,   971,  2665,   560,     4,  1362,  1268,  2884,  2364,
    3368,  2801,  2949,  2561,  2562,  1389,   560,  1173,   672,  2236,
    2326,   541,    98,   661,   662,  1017,  3071,    23,  1043,  1862,
     999,  1043,   675,   676,  1573,   591,  2183,  1936,  2570,  3430,
    2183,  2504,  2113,  3076,  2512,  2509,   122,   591,   124,  2461,
     126,   127,   128,  2521,   601,  1269,  1270,   604,  3026,  1273,
    1274,  1275,  1276,    13,  1278,  1279,  1280,  1281,  1282,  1283,
    1284,  1285,  2572,   807,  3165,    13,  2576,   124,  1617,   126,
    2111,  2111,  1074,    20,    18,  3626,  3251,  2587,    17,    18,
      36,   796,   797,   798,     9,    26,  2958,  1494,    21,  2599,
      32,  3558,    98,   808,    20,    17,    18,  3181,    20,    62,
      17,    18,   668,    20,    29,  2094,   680,  1514,   682,   683,
     684,    36,  2993,  2671,  2672,  1522,  1523,    75,    17,    18,
    2731,  2732,  1950,  3004,  3189,  1563,  2737,    20,  2739,   118,
      22,  2206,    20,    18,   116,    17,    18,    66,  2707,    13,
      49,    65,  2183,  2183,    36,   132,    66,    13,    48,    53,
    1000,  4178,    17,    18,    72,    68,    87,    38,    50,    22,
     293,   132,  2680,    22,  2320,  2561,  2562,   194,    70,    61,
      62,    83,   166,    36,   838,   162,    91,   275,  2565,  3687,
      53,  3001,    26,    58,   133,    17,    18,    50,   150,  2877,
    2170,   162,  3385,    12,   330,   199,    17,    18,    61,    62,
     287,   400,    61,    62,   137,   216,   324,   234,   312,    54,
    2734,   136,   366,  4075,   377,   162,   430,   385,   162,   166,
      65,  4315,   152,   484,   484,    89,  1573,   134,    65,   374,
    3666,   403,    60,   105,   259,    24,  2702,    73,    17,    18,
     166,   905,  3793,   464,  2717,   198,  2719,    17,    18,   238,
      21,   435,   500,   132,  3622,    13,   667,   402,  3725,  3726,
     347,  4090,  3729,   133,    84,   133,  4384,   840,   834,    83,
    1617,   278,   818,   166,   370,  2671,  2672,  2871,   562,    13,
     406,  3748,    42,   162,   607,   594,     9,   143,  3755,   607,
     430,   151,  4319,    75,   562,    17,    18,   430,   181,   198,
     241,   198,   158,   217,   363,    83,    72,    17,    18,    32,
      20,   451,    17,    18,   133,   222,   156,   217,   173,    17,
      18,   425,   365,   156,   562,  2314,  2066,  2067,   257,   527,
     653,   654,   162,    36,   156,   526,   654,   257,  2103,   220,
     221,    75,   660,  2083,   653,   136,   201,   487,   262,   646,
     598,   273,  2085,   181,   413,   252,   653,   185,   195,    62,
    2100,  2101,   169,   561,    17,    18,   137,   293,   196,   560,
     242,  2057,   918,  2967,   565,   659,    21,   137,  4496,   320,
     476,   251,  2457,   251,   510,   174,   293,   259,   146,  3825,
      38,   652,   652,   641,   398,  1172,  3472,   241,   502,   271,
     591,    26,   445,   166,   234,   589,   359,    17,    18,  1186,
    2891,  2892,  2893,   166,   652,   629,   230,   562,   232,   198,
    2486,   832,  2895,  2896,   560,  2165,  2166,  2167,  2168,   293,
      17,    18,   361,  4262,   991,  1456,   461,   282,  1538,   660,
     526,  3877,   528,    17,    18,   384,   533,   261,   387,   621,
    1299,   587,   230,   652,   232,  1108,  1109,  1110,   136,   389,
      17,    18,   384,  2518,   550,   387,   473,   384,   622,  3936,
     387,   634,    17,    18,   560,   561,   320,   668,  3945,   565,
     352,   567,  3675,   261,  1972,   384,   654,  3359,   387,  1836,
     365,  3363,   137,  4001,   580,  3863,  3897,   501,   509,   493,
     328,   634,  3969,  3384,   430,   591,   515,  3974,  3308,  1488,
     425,   597,  1491,  3071,   438,  3396,  1495,  4611,  1497,   384,
    1264,   607,   387,  2680,  2565,  2565,  4388,  2680,   430,   627,
     492,  3412,  3413,   466,   652,  1550,  2085,  2526,  1563,   164,
     626,  1563,  2623,   426,  1936,  3426,  1525,  1526,   479,   635,
     386,   637,   384,    17,    18,   387,   460,  1272,  1335,   568,
    3661,  3381,  2111,   384,   650,  3123,   387,   245,   387,   655,
    3370,   657,   220,   221,  1289,   661,   662,   477,   415,   606,
     666,   667,   668,   166,  3153,  1936,   672,   460,   198,   502,
    1814,  1616,   601,   650,  1616,   604,   468,   526,   426,   608,
    1602,  1825,   688,  2990,  1828,   384,  3124,  4008,   387,    17,
      18,   198,   166,   542,   384,   533,   241,   387,  4019,  1149,
    1150,  2170,   542,   453,   484,  2032,    17,    18,   502,  3317,
     555,   573,    17,    18,  2183,  2463,   502,   419,   620,  2680,
    2680,  2716,  1808,   834,   835,  1175,  2802,  3594,   637,   655,
     575,   614,  4053,  1183,   740,  1185,    17,    18,   583,  2648,
    1308,  3726,   384,  4690,  2653,   387,   538,  1197,  1198,  1199,
    1520,   658,  2661,  2662,   384,  1205,  3760,   387,  2667,   384,
     573,   562,   387,   595,   609,   629,   384,   658,   573,   387,
    1354,  3164,   652,  2673,   652,   320,   652,  1915,  1362,   638,
     592,   575,    17,    18,   652,  3321,   635,  3685,   634,  3884,
     619,   658,   645,   654,   658,   801,   638,   803,   657,   607,
     629,   638,    17,    18,  1573,   617,  2164,  3123,   677,   592,
     493,   384,   654,   592,   387,    11,  1384,  1428,  2085,   638,
     493,   366,   828,   829,   830,   831,   832,   833,   834,   835,
     654,   837,   838,  1401,   653,  4306,   638,   843,   595,   950,
     652,   952,  4198,  1427,   955,   956,   586,   533,  1617,  1326,
     552,   654,   829,   638,   384,   607,   833,   387,  3879,   658,
     837,   972,  3654,  3655,  2409,   657,   626,  1451,   653,   654,
      17,    18,   652,   626,   880,   577,   656,   384,  2563,  4235,
     387,  1492,    17,    18,   626,   583,   638,   893,  3689,   600,
     384,  2544,  2822,   387,   181,   629,   623,   638,  2524,   905,
     906,   466,   654,  2170,   910,  2511,   654,   384,   658,   607,
     387,  2571,   653,   654,  2574,  2575,  2183,  2577,  3914,   384,
    2580,  2581,   387,  3324,  2584,    17,    18,   119,  3314,  2589,
     122,  1408,  2862,  2919,  2594,  2595,  2596,  2597,  2598,   638,
    3406,   111,  2602,  2603,   950,  2605,   952,  3892,   638,   955,
     956,  2611,  2612,  2613,  2614,   654,  3410,  2617,  2618,  3353,
    2620,  3359,   379,   653,   654,  3363,   972,   893,   238,   194,
     899,    45,  4443,    73,  3367,    36,  1567,   660,  1472,  3061,
     906,  2956,  2957,  3061,   910,   224,  3328,   660,    12,   375,
     493,   181,   537,   275,   562,   132,   638,   842,  3460,   196,
     384,     9,   600,   387,   129,  4392,   184,  4394,   638,   234,
    4331,  1017,   654,   638,   292,   198,  3547,  1958,  2678,   493,
     638,  4143,  4144,  4344,  2587,  3556,    83,   455,   653,  2990,
    2990,  3461,   234,  1039,  1731,  3998,   654,  1978,   375,   162,
    1624,     6,    17,    18,   162,  3192,   145,  3124,   369,  4370,
    2494,  3124,  2496,  2497,  2496,  2497,   384,  1063,  2887,   387,
    3061,   196,   991,   402,   993,   638,   191,   375,  1074,  2027,
     484,   171,  2835,   384,   375,  2544,   387,   622,   373,   384,
     653,   654,   387,    17,    18,    17,    18,   108,   285,   484,
     166,   293,  2027,   276,    59,  2381,  2565,   492,  3007,   312,
    3009,   377,  2208,   384,  2062,  3549,   387,  3016,   638,   654,
     173,    17,    18,   632,   256,    81,  2260,  2421,  3354,  2018,
     196,  3030,  1128,  1129,  1130,  1131,  1132,  2062,  3037,  3038,
     209,   638,  2031,  1619,  1628,  2034,  2035,  1063,   201,   426,
    1251,  3050,  3051,  3052,   638,  1619,  2337,  3056,  3057,   384,
      41,   375,   387,   276,  4129,   201,   375,   660,   276,   653,
     654,   638,  2651,  3124,  3124,   290,  1172,    17,    18,   384,
    4458,   533,   387,   638,   452,   375,   653,  1288,  2505,  3710,
    1186,   189,  3713,  3092,   241,   150,   660,    53,   653,   654,
     368,   256,  1827,    17,    18,   365,  2949,   234,  2120,   147,
      17,    18,  1128,   282,  2673,   134,  1132,  2343,  2344,   675,
     676,  2680,  3743,  3744,  3745,  2439,   611,   612,   201,  2164,
    3751,   417,  2164,   562,   426,  1336,   654,    33,  3759,   195,
     329,   368,  1238,    17,    18,   478,   426,   384,   652,  1936,
     387,    17,    18,   660,   369,  1251,   115,  3701,   217,   384,
    2336,   312,   387,   615,   638,    17,    18,   652,  1842,  1832,
    2346,   285,    17,    18,  3708,  3709,    17,    18,   654,   653,
     654,  3715,   238,  2417,  3718,  3719,  1844,  2544,   352,    85,
     562,  1392,  1288,   164,   276,   652,   386,  1293,   430,  2522,
     484,  3735,   384,   262,   533,   387,   262,   484,  2522,  4244,
     282,  4246,  1308,   360,   173,  3749,  2851,    17,    18,   366,
     638,  3755,  3756,  3757,  3758,  1899,  2085,   654,   605,    17,
      18,    17,    18,   562,   645,   653,   654,   638,   524,  1335,
    1336,     0,   201,   638,   504,   243,    26,  1910,  3247,  1923,
    1924,    17,    18,   654,   252,   627,   654,  1982,  1354,   654,
     628,    17,    18,   654,   160,  3015,  1362,   638,   634,   654,
     241,  1367,  3981,  1369,   293,   430,  1372,   654,  3028,    17,
      18,   417,  3538,   654,   566,  4242,  1853,   569,  1384,   436,
    4186,   606,   578,    17,    18,   367,  1392,  4362,  4363,    17,
      18,    17,    18,   385,   342,  1401,  1402,  1326,   363,    17,
      18,  2170,   580,   638,  4526,  4527,  2673,  3692,   130,   384,
     489,  3797,   387,  2680,  2183,   605,   453,   493,   596,   654,
     484,  1427,  1428,   638,   620,  1431,    17,    18,   241,    20,
     654,    17,    18,  1439,   417,   654,  1442,  3000,  3001,   654,
     417,   399,   713,   714,  1373,  1451,  1372,   556,   562,   415,
     384,  1937,   384,   387,   654,   387,  1462,  1463,   652,  1570,
     585,    60,   656,  1937,   429,   652,   431,  1473,  1474,  1475,
    1476,  1477,  1478,  4448,   276,  4195,  1402,  1483,   384,  1408,
     537,   387,   390,  1489,  1490,   366,  1492,    22,  4776,   447,
    1496,   638,   252,  2937,  4086,  4087,  1473,  1474,  1475,   365,
    1477,    36,   277,   638,   627,   280,   406,   654,  1619,   627,
     556,  1517,   272,  1490,   562,    50,   787,  3006,   653,  1496,
     198,  2990,   243,  4477,  4143,  4144,    61,    62,   250,   136,
     162,   252,  2670,   590,   384,   658,   352,   387,   652,  1468,
     658,  2482,   614,  3032,  3033,   617,   638,   524,   417,   184,
    1476,   241,  1478,   366,    34,  4091,  2842,  2843,  2844,   375,
     384,   412,   654,   387,  1570,   622,  1495,   384,  2179,   484,
     387,   249,   198,   556,   484,  2887,   847,  3058,   166,  1585,
      17,    18,   181,   385,  1590,  1591,   185,   166,   652,   532,
    4056,  1517,   189,  3813,   460,    90,  1602,   196,    17,    18,
     384,   578,   594,   387,   652,  3086,   412,  1073,   384,  4391,
     510,   387,  2718,  1619,    17,    18,  2887,   112,  1624,  4005,
    1626,  1627,   384,  1629,  1630,   387,   492,  2818,   434,   384,
     320,  2965,   387,   384,   525,  1641,   387,  1643,   245,  2872,
     531,    17,    18,   620,    83,  3811,    13,  1576,  2872,  1626,
    1627,  4129,   427,   660,   147,  3124,   537,   548,    97,  1585,
    1126,    13,   553,   638,   470,  1591,    17,    18,   265,   390,
      17,    18,    17,    18,   384,   234,   366,   387,  3383,   654,
    4299,  4300,  3387,  3388,    17,    18,   384,   556,   384,   387,
     581,   387,   212,    17,    18,  2636,   654,   645,   646,   647,
     648,   649,   650,   444,   638,  2340,   638,   385,   384,   578,
     432,   387,   173,  4055,    17,    18,   212,    13,   384,   133,
     654,   387,   654,   529,   537,  1731,  1732,   362,   363,   328,
      17,    18,   638,   368,  1845,   678,   384,   652,    18,   387,
      13,   622,   652,    17,    18,   653,   298,   299,   654,  3294,
     384,   620,  3972,   387,   129,  3975,   384,   233,   384,   387,
     276,   387,   314,   259,    17,    18,   384,   629,   365,   387,
      17,    18,   252,   654,  1045,  2544,   290,    17,    18,   146,
      13,   629,  2232,   212,   525,   629,  1792,  2237,   638,   238,
    4409,   607,   654,   384,   146,   275,   387,  2381,   384,  4462,
    2250,   387,  4465,  3036,   654,  4424,   654,    17,    18,   622,
     654,   556,  3036,   262,   638,   652,   191,   539,  3381,   378,
    4439,   638,   559,   660,   159,   264,  1937,   426,  1834,  1835,
     654,   233,    17,    18,  2284,   170,  1842,   654,  1844,  1845,
    2451,  3594,    17,    18,  1955,   220,   453,   537,   238,   342,
     146,  1857,  4634,  4635,   638,   369,  1862,  3124,    17,    18,
     528,  1867,   638,   607,  1870,   129,  2450,  3776,   646,   385,
     654,  1877,  1878,   146,  1880,   653,   638,   484,   654,   238,
    1057,  1058,   550,   638,  4362,  4363,   652,   638,   238,   385,
     442,   443,   654,  1899,   660,  4514,  1902,  2488,  3461,   654,
    1906,   340,   653,  2353,  2673,   630,   631,  4526,  4527,  1835,
     654,  2680,  3393,   146,   212,   290,   660,  1923,  1924,  1925,
    1926,   141,    17,    18,  1853,  1102,   365,   191,   638,   654,
    1936,  1937,   622,  3842,    17,    18,  1942,  1943,  1944,  3347,
     638,   379,   638,    83,   654,   580,  3427,   384,   249,  1955,
     387,  1877,  1878,  4616,  1880,   129,   654,  3438,   654,   439,
    3441,   596,   638,    17,    18,   384,  1972,  3672,   387,  2884,
    4448,   136,   638,    26,  2932,  4594,  1902,    49,   654,  3549,
    1906,   384,    17,    18,   387,  4604,   198,  1993,   654,   428,
     638,   612,  1921,   600,   369,    17,    18,  2932,   492,  1925,
    1926,    17,    18,   503,   638,   653,    17,    18,   384,   129,
     638,   387,   638,   503,    17,    18,  1942,  1943,  1944,   653,
     638,  3355,  2963,    17,    18,   653,   290,  2033,   293,  4648,
      83,  4650,  3168,   384,   583,   653,   387,   384,    40,   384,
     387,  4660,   387,  2049,  2943,   652,    48,   638,   383,   653,
    2056,   384,   638,  3872,   387,    17,    18,   592,   607,  1988,
     384,  3197,  3198,   387,  4683,   552,  4685,   653,  4687,   556,
    2181,   658,    17,    18,   601,  4694,  2187,  3896,   613,   614,
     245,   384,  3218,  3242,   387,   524,  4705,  3246,  3678,  3679,
     230,   242,   232,   484,  3318,    83,   660,   384,  3236,   381,
     387,  4720,  4721,    61,    62,   369,   524,  2033,   259,   230,
     384,   232,  2223,   387,  2120,    73,   290,  4736,  4737,   652,
     271,   261,  4741,    86,  2235,    88,  4035,  4036,  4037,   182,
    2056,   384,  1009,  3366,   387,    18,   556,   384,  1015,  1016,
     387,  2070,  3366,   573,   384,  3715,   195,   387,  3718,  3719,
    2079,  2080,    17,    18,   647,   648,   649,   650,  4452,     6,
    4454,  2090,  2091,  2092,  2093,  3735,  2095,  2096,   453,   132,
     290,    12,   147,  2179,   384,  2181,   164,   387,    17,    18,
     652,  2187,   652,  2189,   652,    20,  2192,   652,   241,   552,
    2887,   154,   652,   556,  2200,   369,   652,  2203,   652,   384,
     652,   638,   387,   654,    17,    18,    17,    18,   652,   384,
     585,   652,   387,    17,    18,  2192,   653,  2223,  2329,   638,
     611,   612,    17,    18,   652,   384,   561,   190,   387,  2235,
     652,    17,    18,   210,   653,   638,   362,   363,    17,    18,
     603,   653,   654,   652,    17,    18,   653,   654,  2359,   369,
     653,  2824,   652,   241,    17,    18,    17,    18,  2842,  2843,
    2844,   652,   638,   652,   147,  3403,   652,   320,   653,   654,
     105,    17,    18,    17,    18,    81,    18,   653,   653,   652,
    2891,  2892,  2893,   652,  4214,  2869,   652,   638,   453,   384,
     652,   638,   387,   638,   127,   652,  3930,  3931,   653,   654,
     562,   384,   653,   753,   387,   638,   653,   360,   653,  3943,
     652,    17,    18,   366,   638,   652,  3950,   468,   652,   484,
     653,   585,   652,  2329,   652,   775,   652,   162,   660,   653,
     384,   166,   652,   387,   652,   638,   652,   136,   788,   789,
     317,   318,  3976,  3977,  3480,   322,   323,   652,  2354,   384,
     653,   638,   387,  2359,   178,  3124,   537,  3801,   652,  3801,
     652,   196,   384,  2813,   638,   387,   653,   342,   384,   652,
    3311,   387,   360,   384,   652,  2381,   387,   212,   366,   653,
     652,   384,   652,   218,   387,   638,   652,   538,  3621,   195,
     384,   638,  3350,   387,   652,   228,  1355,  3621,   638,  1358,
     653,   652,  1361,   149,    26,   147,   653,   242,  4191,  4192,
    2416,   585,   607,   653,   249,  3350,  2422,   653,   654,  3525,
    2531,  2532,   384,  3014,   259,   387,   614,   615,   638,   617,
     393,   619,   238,  2439,   652,   600,   271,  2443,   652,   384,
     416,   276,   387,   653,  2450,  2451,   245,   472,   436,   652,
     285,   653,   654,   638,   160,   652,   262,  4539,  2464,   342,
    2466,    83,  4540,   638,  3697,   585,   653,   654,   653,  3799,
    3800,   653,   654,  3697,   437,   653,   654,   472,   653,   638,
     653,   654,  2488,   652,   537,    17,    18,   652,  2494,  4242,
    2496,  2497,   653,   654,   653,   653,   654,   653,   654,   332,
    2994,   653,   654,   336,   652,  4068,  4069,   652,  3002,   652,
     343,   653,   654,    61,    62,  3008,  2522,   352,   652,   384,
     495,   496,   387,   653,   654,  2531,  2532,  3020,   553,  3022,
    3023,   653,   654,   652,   559,  2464,  4445,   653,   654,   652,
     375,  3034,   164,   638,   652,   384,  3566,   652,   387,   537,
     385,   652,  4335,   652,   565,   638,  4339,   382,   653,   652,
     182,  4221,  4222,   653,   654,  4225,  4226,  4227,  4228,   622,
     653,   384,  3902,   384,   387,   652,   387,   652,   603,   652,
     384,   652,   417,   387,   638,   652,   129,  4213,   652,   384,
     652,   424,   387,   399,  3906,   620,   653,   654,   384,   653,
     342,   387,   590,   638,   652,   384,   653,   654,   387,   415,
    2616,   384,   495,   496,   387,   652,   638,   552,   653,   241,
     652,   384,   638,   384,   387,  2631,   387,   638,   652,    20,
     375,   653,   652,   468,   622,   638,    27,   653,   384,  2645,
     384,   387,  3954,   387,   638,  1142,  1143,  1144,   191,   482,
     653,   573,   653,   654,   453,   653,   654,   492,   375,   653,
     653,   654,  1159,   652,  4324,   652,   654,   652,   643,   644,
     645,   646,   647,   648,   649,   650,   638,   220,   384,   653,
     654,   387,    73,   653,   654,   484,   653,   654,   166,   167,
      12,   653,    83,   638,  1191,  2701,  2702,  1194,   320,   652,
    4360,  4361,   652,   538,   652,  2711,  2712,  2713,   653,  4369,
     653,   654,   652,  3324,   652,  4498,  4499,   654,  1215,  1216,
    2649,  2650,  1219,  2652,   202,  2654,  2655,  2656,  2657,  2658,
    2659,  2660,   653,   654,  2663,    34,   214,  2666,   360,   234,
    2669,   132,  1239,  1240,   366,   653,   654,   290,  4078,  4079,
     510,  4081,  4082,   495,   496,  3346,  3206,   653,   654,   594,
     643,   644,   645,   646,   647,   648,   649,   650,   653,   654,
    4700,    51,   607,   638,   115,  2701,   653,   255,   287,   296,
      13,   298,   299,   653,   654,  2711,  2712,  2713,   653,   267,
      51,   624,   627,   115,   629,   654,  1878,   314,  1880,   638,
     382,   600,   565,   375,   565,    65,   198,   640,  3258,   653,
     654,   133,   375,   204,   653,   647,   294,   478,   653,   654,
     594,    81,   657,   658,   492,   638,   369,   638,   503,  2835,
     660,  2837,   660,    93,   638,  2841,  2842,  2843,  2844,   230,
     653,   232,   653,   638,  2850,   653,   654,  4777,   147,   653,
     652,   173,   638,   652,   172,   653,   654,    13,   653,   638,
    1942,  1943,  1944,  2869,   276,   638,  2872,   653,   653,   654,
     196,   262,   653,   654,   653,   638,   533,   638,   356,   201,
     653,  2887,   223,   129,   510,  2891,  2892,  2893,    44,   653,
     654,   533,   638,   552,   638,   653,   654,   287,  2904,   163,
    4044,   643,   644,   645,   646,   647,   648,   649,   650,    27,
     653,   654,   196,   146,  3025,   537,  3409,   653,   654,    92,
     129,   653,   654,   132,  2850,   442,   443,    20,   654,    57,
     654,  2937,   638,  3506,   376,   195,  4074,   653,   654,    67,
     200,   548,    98,   653,  3535,   191,   162,   103,   653,   654,
     653,   654,   132,   252,    82,    73,   653,   654,   653,   654,
     653,   654,     6,    13,   286,    83,    94,    95,    96,   156,
     157,   362,   363,   118,   220,  2904,   275,   368,   238,  4212,
     659,   147,   191,   652,   375,   113,   117,  2993,  4212,   222,
     653,   654,     4,  3005,  3843,  3844,    36,  3003,  3004,  3011,
     622,   483,   262,   620,  3010,   252,   147,  1223,  1224,  3330,
    3331,   220,   105,   654,   132,  3287,  3288,    65,   399,  3025,
    3026,    58,    62,  3035,   415,  3031,  3967,  3603,  3604,  3041,
    3036,    62,   654,    81,   445,  3047,  3048,   118,   178,   231,
    3046,   654,   585,   342,   290,    93,   654,    73,   660,    13,
     391,   626,  3058,   653,   653,   146,    10,   654,   660,  3065,
    3066,   402,   653,   362,   363,  3071,   653,   653,   409,   162,
     660,  3077,    27,   166,    29,  3081,   652,  4215,   275,   119,
    3086,   290,   122,  3012,  3013,   375,   660,  4107,   119,   654,
     130,   122,   164,  4113,   654,   417,   146,   488,   254,   130,
    3077,   194,   659,   196,   287,   287,    61,    62,   148,    64,
     653,  3040,   230,   287,   232,   287,  3122,   148,    73,   212,
    3046,    51,   287,   369,   287,   218,   654,   147,    83,   654,
     166,  3137,   552,   652,   229,   282,    91,  4275,  3144,   399,
     439,   234,  3071,   654,   262,   400,   654,   195,  4300,   242,
     573,  1648,   200,   654,   573,   415,   249,  3163,   399,   166,
     369,   192,   654,   118,   196,   654,   259,   508,   490,   654,
      73,   654,   222,   329,   533,   252,   342,   132,   271,   647,
     135,   550,   253,   276,   186,   196,   172,   654,   533,   404,
     238,   507,   285,   142,   375,   654,   495,   496,   403,   653,
    3129,   342,   524,   331,   595,   654,   601,     7,   633,   164,
     250,   201,   511,   606,   262,   654,   129,   198,  3144,   250,
     348,   653,  3333,   653,  4457,   653,  4364,   653,   198,   653,
     647,   553,   252,  4457,   129,   653,  1733,   393,   653,   653,
    1737,   654,   646,   115,   362,   363,  3252,   652,   654,   493,
     368,   653,   653,   513,  3260,   653,   653,   375,   654,   352,
     594,   562,   603,   652,  1761,   653,   653,   653,   653,   652,
     516,  4186,   650,   652,   654,   230,   653,   232,   191,   562,
     562,   573,   375,   238,   627,   518,   519,   240,   521,  3880,
     523,   246,   385,  3866,  3300,  3406,   191,   415,   620,   654,
     147,   652,   544,   652,   652,   538,   261,   220,   210,    13,
     198,   273,  3318,  3319,   354,   654,  3322,   230,  3324,   232,
     351,   652,   342,   354,   417,   220,   653,  3333,   200,   495,
     496,  3260,   660,  3339,   462,   595,   660,   652,   198,   585,
    3346,  3347,    17,    18,   643,   644,   645,   646,   647,   648,
     649,   650,   480,   660,   495,   496,   512,   654,   654,   176,
    3366,   473,  4514,    83,   319,  3377,   238,   415,   425,   660,
     488,    91,   599,  4393,  3984,   468,   585,   290,  3384,   654,
     654,   492,   337,   654,   196,    49,   524,  3393,   524,  4330,
    3396,   350,   524,   549,   524,   290,   483,   524,   118,   492,
    3406,   432,   448,   196,  3410,   252,  3412,  3413,   166,  4350,
    4554,   166,   540,   652,   286,   166,   166,   166,   166,   166,
    3426,  3427,   166,  3352,   129,   166,   166,  3538,   166,   166,
     558,   129,  3438,   166,   132,  3441,   166,   392,   166,   394,
     166,   166,   166,   166,   164,   538,   654,   402,   123,   124,
     125,   126,   127,   166,  4050,   166,   369,   286,   652,  3465,
     500,   375,  3468,   375,   375,   513,   160,  3473,   518,   519,
     520,   521,   522,   523,   369,   495,   496,   595,  3407,   645,
     646,   647,   648,   649,   650,   607,   191,  3416,   538,  3495,
     660,   653,   653,   191,   248,   342,  4648,   129,  4650,   653,
     132,   594,   248,   644,   645,   646,   647,   648,   649,   650,
    3516,   660,   654,   606,   607,   220,   653,  4750,   238,   474,
    4664,   166,   220,     7,   653,   660,  4750,  3638,   653,   569,
    4763,  4683,  3538,   653,   627,  4768,   629,   653,   569,  4763,
    4773,   654,  3468,   653,  4768,  4565,  4566,   595,  4568,  4773,
     225,   226,   227,   228,   660,   573,  3485,   573,   598,   191,
     653,   654,   654,   573,   657,   658,   562,   598,  4720,  4721,
     634,    89,   282,    49,   652,   530,   531,   532,   652,   573,
     166,   382,   537,  3512,   652,   290,   198,   198,   220,    13,
     198,   129,   290,   105,   132,   249,   198,   469,   553,   319,
     256,    25,   557,   129,   562,   562,   132,  4627,   430,  4629,
    4630,  3617,    36,    37,   176,  3621,   654,   337,   490,   115,
     259,   576,   259,   643,   644,   645,   646,   647,   648,   649,
     650,   388,  3638,   369,  4230,   118,   333,    61,    62,   594,
     360,   513,    81,   118,   573,    69,   399,   399,   495,   496,
      74,  4315,   142,   191,   399,   129,   260,   332,   290,   334,
     335,   336,   553,   260,   369,   191,   553,   399,   343,   142,
     399,   369,   585,    49,   401,   573,   100,   173,   102,  3685,
     104,   553,   220,  3689,   556,   105,   652,   559,   381,    38,
     585,  3697,   116,   399,   220,  3701,  4716,  3703,  4732,   654,
    3811,   652,   652,   399,   399,   201,  4279,   399,   212,   384,
     562,   652,   387,   137,   138,   399,   660,   191,   652,   647,
      27,    83,    29,   595,   660,   464,   652,   250,   105,   250,
     242,   603,   653,   653,   653,    97,   653,   369,   654,   163,
     164,   382,   238,   652,  4317,   169,   220,   259,   172,   424,
     654,   629,   290,   653,    61,    62,   653,    64,   647,   271,
     653,   653,  3768,   234,   290,  3771,    73,   652,   375,   653,
     277,  3882,   654,   122,   399,   199,    83,   201,   140,   653,
     129,   654,   653,  3789,    91,   209,   198,   211,   252,   600,
     286,   660,  3798,  3799,  3800,  3801,   643,   644,   645,   646,
     647,   648,   649,   650,   653,  3811,   481,   482,   653,   430,
     166,   118,   654,   237,   238,   239,   290,   537,   259,   259,
     654,   660,   242,   413,   262,   132,   262,   375,   135,   375,
    4771,   369,    83,   553,    20,   184,   260,   653,   652,   259,
     352,  3952,   191,   369,   654,   375,   375,   510,   653,  3778,
     653,   271,   654,   385,    57,   652,    49,   164,   282,   653,
     486,   653,  3868,   375,    67,   242,   629,   653,  4459,   273,
     466,   220,   221,   430,   210,   153,  3882,   269,   653,    82,
     585,   654,   259,   484,   212,   494,  3892,   585,   312,   259,
     259,    94,    95,    96,   271,   369,  3902,   262,   654,   262,
      87,  3907,   264,  3915,   502,   149,   237,  3913,   629,   652,
     113,   653,   166,   479,    20,  3921,   412,   510,   276,   654,
     654,   417,   653,   230,    36,   232,    36,   369,    62,   250,
     652,   238,   352,   339,   653,   189,   654,   653,   652,   246,
     652,   290,   264,   652,   425,  4056,  3952,  4611,   202,   624,
     653,   653,   653,   585,   261,   379,   468,   382,   285,   629,
     214,   249,   653,   638,   639,   640,   653,   653,   275,   654,
     653,   653,  3978,   469,   653,   352,   652,   654,   340,   652,
     660,   405,   653,    49,   218,   654,   339,  3913,   607,   607,
    3996,  3997,   416,   417,   490,   652,   420,   421,   375,   652,
     362,   363,   132,   365,   353,   132,   556,   653,   652,   411,
     660,   265,   319,   267,   654,   364,    36,   441,   369,   368,
     369,     6,   339,   654,  3953,  4621,   538,    12,   180,    14,
     337,    16,    18,   653,   562,   562,   262,  4043,   562,   556,
     294,   611,    27,   607,    29,   316,   607,   585,   468,   652,
    4056,  4624,   652,   652,   617,    15,   600,   553,   652,   585,
     652,  4725,   653,   559,   617,   489,   428,   652,   132,    20,
     262,  3997,  4078,  4079,    59,  4081,  4082,   262,   502,    64,
      65,   368,   578,   528,   629,   392,    71,   394,  4752,   176,
     464,   468,   652,    14,   473,   402,   463,   653,    83,   654,
     123,   124,   125,   126,   127,   359,    91,   603,   143,   533,
     653,   585,   382,   537,   600,   543,   101,  4043,   538,   652,
     249,   652,   375,  4129,   620,   364,   626,   652,   331,  4702,
     612,   555,   556,   118,  4140,   161,   652,    33,   653,  4145,
    4409,   661,   196,   653,   369,   348,   176,   132,    63,   564,
     135,   142,   142,   652,   164,  4424,   417,    75,   143,   144,
     414,   538,   524,   196,   652,   150,   541,   474,  4174,  4175,
    4439,   626,    33,   158,   198,    65,   382,   162,    65,   164,
     604,   653,  4188,   104,   396,   654,   653,   652,   278,   544,
     175,   615,   438,   653,   653,   160,   249,   658,   382,   623,
    4129,  4774,   225,   226,   227,   228,  4212,   382,   140,   194,
     149,    49,  4218,   562,    49,   136,   159,   566,   652,    49,
     569,    49,    49,   530,   531,   532,   652,     5,   375,   150,
     537,   580,   375,   652,   160,   626,   585,   233,  4244,   588,
    4246,   292,   658,   661,   155,   230,   553,   232,   131,   285,
     557,   236,   173,   238,  4365,    12,   177,   652,    49,  4265,
      49,   246,    49,   600,   136,    55,   475,   188,   658,   576,
     654,   473,   653,   653,   262,   160,   261,   480,   215,   565,
     658,   654,   654,   231,    55,   653,  4292,   594,   654,   210,
     452,   196,   653,   196,   196,    49,   645,   646,   565,   628,
     285,   132,   369,   234,   652,   197,  2366,   654,  2668,   332,
     492,   334,   335,   336,  4150,  3776,  2560,   238,   693,   993,
     343,  4318,   676,   698,   245,  4594,  3499,  3787,  4180,  4534,
    3785,  3789,  4535,  3995,   319,  4604,  4752,   540,  4713,  1054,
      48,   599,  1935,  1867,  2835,   652,  3981,  3981,  3981,  3981,
    3981,  4722,   337,  3981,  3981,   558,   341,  3981,  4591,  4365,
     735,  3981,  3981,  4402,   285,  4371,  4477,  4591,  3981,  3981,
    4527,  3981,  1579,  4428,  1836,  4427,  2630,   752,  4184,  2113,
    3436,  1098,  4004,  2864,  2422,  1389,  3300,  4218,  4044,  4354,
    3619,  4660,  4562,  4664,  4323,   380,  4621,    38,  1616,   536,
     385,   424,  4230,  3794,  2623,  3065,  3130,   392,  3516,   394,
    2631,  3068,  3907,  3914,   399,  3189,  4685,   402,  4687,  4639,
    3726,   796,   797,   798,   799,  4694,  4105,  3760,  4434,  4358,
    4359,  4279,  3963,   808,  4459,  3952,  4705,  2531,  2791,  3243,
    3238,  3246,  4448,  4382,    11,    11,  2196,  4498,   433,  4560,
    4499,  4457,  4326,  4339,  4335,  4188,  3384,  2709,   481,   482,
    4113,  3061,   447,   448,   449,   450,    36,  4736,  4737,  1021,
    2630,  4477,  4741,  1533,  2508,  3919,  2120,  2434,  1067,  4434,
    3684,   122,  1925,  1591,  2409,  2850,  1612,  3295,   129,   474,
    2455,  2322,  3983,   942,   620,  3260,  1949,   418,  2231,    69,
    4277,  2824,  2227,  3357,  2523,  1186,  2321,  2517,  4071,  4576,
    3495,  4249,  1159,  4577,  2937,  3697,  1550,   438,  2347,  4448,
    3893,   896,  3882,  3057,  4702,   446,  2460,  2200,  1372,  1038,
    1038,  2403,  1402,   454,  2438,  3621,  3313,  1038,  3366,  4468,
    4469,  3312,  4457,   184,  1038,   530,   531,   532,   610,   689,
     191,  1641,   537,  2028,  4560,   598,  1481,  2029,  2502,  3703,
     598,  1856,    36,   484,  3298,  4662,  1409,  4484,   553,   139,
    4576,  4577,   557,  4697,  4572,  4768,   497,   498,  4773,   220,
     221,  1439,  3954,  3318,  2485,  3346,   597,  1789,  3347,   597,
    4596,   576,  2478,  1975,   164,    69,   581,  4603,   168,  2477,
    2471,   624,  1906,   834,  1429,  1364,   922,   591,  4033,   594,
    2450,  1624,  2837,  4039,   592,   929,   639,   640,   532,   532,
     676,   676,    -1,    -1,   676,    -1,   547,    -1,    -1,    -1,
      -1,    -1,    -1,   203,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4759,   290,
      -1,    -1,    -1,    -1,   224,    -1,    -1,   578,    -1,   698,
      -1,    -1,    -1,    -1,    -1,   139,    -1,    -1,    -1,   239,
      -1,    -1,    -1,   658,    -1,    -1,    -1,    -1,  4684,   600,
      -1,   602,    -1,  4689,    -1,    -1,    -1,    -1,    -1,    -1,
     164,    -1,    -1,    -1,   168,    -1,   735,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1080,    -1,  4636,    -1,    -1,
      -1,    -1,   353,   752,    -1,    -1,    -1,   287,    -1,  4725,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   368,   369,   203,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   312,    -1,  4750,    -1,  4752,    -1,    -1,    -1,
     224,    -1,    -1,  4759,    -1,    -1,    -1,  4763,    -1,    -1,
     799,    -1,  4768,  1138,  1139,   239,    -1,  4773,    -1,    -1,
      -1,    -1,  1147,  1148,  1149,  1150,  1151,  1152,  1153,  1154,
    1155,  1156,  1157,  1158,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1167,  1168,    -1,  1170,  1171,    -1,    -1,    -1,
    1175,    -1,    -1,  1178,  1179,  1180,  1181,    -1,  1183,  1184,
    1185,    -1,    -1,   287,    -1,    -1,    -1,  1192,  1193,    -1,
    1195,  1196,  1197,  1198,  1199,    -1,    -1,  1202,  1203,  1204,
    1205,  1206,  1207,  1208,  1209,  1210,  1211,  1212,   312,  1214,
      -1,    -1,  1217,  1218,    -1,    -1,   416,  1222,    -1,    -1,
      -1,  1226,  1227,  1228,    -1,   425,    -1,   896,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1241,  1242,  1243,    -1,
     440,    -1,    -1,    -1,    -1,  1250,    -1,    -1,    -1,    -1,
      -1,    -1,  1257,  1258,  1259,    -1,  1261,    -1,   458,    -1,
      -1,    -1,    -1,  1268,  1269,  1270,    -1,  1272,  1273,  1274,
    1275,  1276,    -1,  1278,  1279,  1280,  1281,  1282,  1283,  1284,
    1285,    -1,    -1,    -1,  1289,  1290,    -1,    -1,    -1,    -1,
      -1,   562,    -1,    -1,    -1,   566,    -1,    -1,   569,    -1,
      -1,    -1,   502,    -1,    -1,   505,    -1,    -1,    -1,   580,
      -1,    -1,   416,    -1,   585,    -1,    -1,   588,    -1,    -1,
      -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   533,    -1,    -1,   440,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   552,    -1,   458,   555,   556,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1376,    -1,    -1,   645,   646,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,
      -1,   505,    -1,    -1,   604,    -1,    -1,    -1,    -1,    -1,
      -1,  1080,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,
      -1,    -1,    -1,    -1,  1439,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1449,    -1,    -1,    -1,    -1,    -1,
      -1,   555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1465,    -1,    -1,    -1,  1469,    -1,    -1,    -1,    -1,  1138,
    1139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1147,  1148,
      -1,    -1,  1151,  1152,  1153,  1154,  1155,  1156,  1157,  1158,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1167,  1168,
     604,  1170,  1171,    -1,    -1,    -1,    -1,    -1,    -1,  1178,
    1179,  1180,  1181,    -1,    -1,  1184,    -1,    -1,    -1,  1524,
      -1,    -1,    -1,  1192,  1193,    -1,  1195,  1196,    -1,    -1,
      -1,    -1,    -1,  1202,  1203,  1204,    -1,    -1,  1207,  1208,
    1209,  1210,  1211,  1212,    -1,  1214,    -1,    -1,  1217,  1218,
      -1,    -1,    -1,  1222,    -1,    -1,    -1,  1226,  1227,  1228,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1241,  1242,  1243,    -1,    -1,    -1,    -1,    -1,
      -1,  1250,    -1,    -1,    -1,    -1,    -1,    -1,  1257,  1258,
    1259,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,    16,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     235,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
      37,  1290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    59,    -1,    -1,    -1,    -1,    64,    65,  1654,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,
     295,    -1,   297,   298,   299,   300,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   104,   313,   314,
     315,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1376,    -1,    -1,
      -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,
     137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     177,    -1,  1767,  1768,  1769,    -1,    -1,    -1,    -1,    -1,
    1439,    -1,    -1,    -1,    -1,    -1,   193,  1782,    -1,    -1,
    1449,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   208,    -1,   210,    -1,    -1,  1465,    -1,   215,    -1,
    1469,    -1,   219,  1808,    -1,    -1,    -1,    -1,    -1,  1814,
      -1,    -1,  1817,    -1,  1819,    -1,    -1,   442,   443,    -1,
    1825,    -1,  1827,  1828,    -1,    -1,    -1,    -1,   245,    -1,
     247,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   263,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1524,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   281,    -1,    -1,    -1,   285,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    27,    -1,    29,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1920,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    -1,    64,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,
      -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,  1973,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1982,    -1,    -1,
     397,    -1,   399,   118,    -1,  1654,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   412,    -1,   132,    -1,    -1,
     135,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   445,   164,
      -1,   448,    -1,   450,    -1,    -1,   453,    -1,    -1,   456,
     457,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     467,    -1,    -1,   470,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   478,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   492,    -1,    -1,    -1,    -1,
     497,   498,   499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   230,    -1,   232,  1767,  1768,
    1769,    -1,    -1,   238,    -1,    -1,    -1,    -1,  2113,    -1,
      -1,   246,   529,    -1,    -1,    -1,    -1,    -1,    -1,   536,
      -1,    -1,    -1,    -1,    -1,    -1,   261,    -1,    -1,    -1,
    2135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1808,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1817,    -1,
    1819,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   581,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   593,    -1,    -1,    -1,
     597,    -1,    -1,   600,   319,    -1,    -1,    -1,    -1,   606,
    2195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   337,    -1,  2209,    -1,    -1,    -1,  2213,    -1,
      -1,    -1,    -1,  2218,  2219,    -1,    -1,    -1,    -1,   636,
      -1,    -1,  2227,    -1,  2229,   642,  2231,  2232,  2233,  2234,
      -1,    -1,  2237,    -1,    -1,   652,    -1,    -1,    -1,    -1,
      -1,    -1,  2247,    -1,  2249,  2250,    -1,  2252,  2253,  2254,
    2255,  1920,  2257,    -1,    -1,  2260,    -1,   392,    -1,   394,
      -1,    -1,    -1,    -1,  2269,    -1,    -1,   402,    -1,    -1,
      -1,  2276,    -1,  2278,    -1,  2280,  2281,    -1,  2283,  2284,
      -1,    -1,    -1,  2288,  2289,  2290,    -1,    -1,    -1,  2294,
    2295,  2296,    -1,  2298,    -1,  2300,    -1,  2302,    -1,  2304,
      -1,  2306,    -1,    -1,  1973,    -1,  2311,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      14,    -1,    16,    -1,    -1,  2330,    -1,    -1,    -1,    -1,
      -1,    -1,  2337,    -1,    -1,  2340,    -1,    -1,    -1,   474,
      -1,  2346,    -1,    37,  2349,    -1,    -1,    -1,  2353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
      64,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    -1,    -1,    -1,   530,   531,   532,    -1,    -1,
      -1,    -1,   537,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,    -1,  2417,    -1,    -1,    -1,    -1,    -1,   553,    -1,
      -1,    -1,   557,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,
      -1,   576,   136,   137,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,    -1,    -1,   594,
      -1,    -1,    -1,    -1,    -1,    -1,  2135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2486,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   208,    -1,   210,    -1,    -1,    -1,
      -1,   215,    -1,    -1,    -1,   219,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    27,    -1,    29,    -1,    -1,  2543,    -1,
    2209,    -1,    -1,    -1,  2213,    -1,    -1,    -1,    -1,  2218,
    2219,   245,    -1,   247,    -1,    -1,  2561,  2562,  2227,    -1,
    2229,    -1,  2231,    -1,  2233,  2234,    -1,    -1,    -1,   263,
      64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2247,    -1,
    2249,    -1,    -1,  2252,  2253,  2254,  2255,   281,  2257,    83,
      -1,   285,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,
    2269,    -1,    -1,    -1,    -1,    -1,    -1,  2276,    -1,  2278,
      -1,  2280,  2281,    -1,  2283,    -1,    -1,    -1,  2623,  2288,
    2289,  2290,    -1,    -1,   118,  2294,  2295,  2296,    -1,  2298,
      -1,  2300,    -1,  2302,    -1,  2304,    -1,  2306,   132,    -1,
      -1,   135,  2311,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2330,    -1,    -1,    -1,    -1,  2671,  2672,    -1,    -1,
     164,    -1,    -1,    -1,    -1,    -1,    -1,  2346,    -1,    -1,
    2349,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2707,   397,    -1,   399,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2722,   412,    -1,
      -1,  2726,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,
      -1,    -1,    -1,    -1,    -1,    -1,   230,    -1,   232,    -1,
      -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,  2753,  2754,
      -1,   445,   246,    -1,   448,    -1,   450,    -1,    -1,   453,
      -1,    -1,   456,   457,    -1,    -1,    -1,   261,  2773,    -1,
      -1,    -1,    -1,   467,    -1,    -1,   470,  2782,    -1,  2784,
      -1,  2786,    -1,    -1,   478,    -1,    -1,    -1,    -1,    -1,
     484,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   492,    -1,
      -1,    -1,    -1,   497,   498,   499,    -1,    -1,  2813,    -1,
      -1,    -1,    -1,  2818,    -1,    -1,    -1,  2486,    -1,    -1,
      35,    36,    -1,    -1,    -1,   319,    41,    -1,    43,    -1,
      45,    46,    -1,    -1,    -1,   529,    -1,    -1,    -1,    -1,
      -1,  2846,   536,   337,    -1,    -1,    -1,    62,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   581,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   593,
     394,    -1,    -1,   597,   119,    -1,   600,   122,   402,    -1,
      -1,    -1,   606,    -1,  2919,   130,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   636,    -1,    -1,    -1,    -1,    -1,   642,    -1,
     165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   652,    -1,
      -1,    -1,    -1,    -1,    -1,  2970,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   190,    -1,   192,    -1,    -1,
     474,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     205,   206,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   250,   530,   531,   532,    -1,
      -1,    -1,    -1,   537,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2722,    -1,    -1,  3061,  2726,    -1,   553,
      -1,    -1,    -1,   557,   279,    -1,    -1,    -1,    -1,  3074,
    3075,    -1,    -1,   288,   289,    -1,   291,    -1,    -1,    -1,
      -1,    -1,   576,    -1,  2753,  2754,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     594,    -1,    -1,    -1,  2773,    -1,    -1,    -1,    -1,    -1,
     325,   326,   327,  2782,    -1,  2784,    -1,  2786,  3123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   344,
     345,   346,    -1,    -1,    -1,    -1,   351,    -1,    -1,   354,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3153,    -1,
      -1,    -1,    -1,     6,    -1,    -1,   371,   372,    -1,    12,
      -1,    14,    -1,    -1,    -1,    -1,  3171,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    27,    -1,    29,  2846,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   407,   408,    -1,    -1,    -1,    -1,  3203,  3204,
      -1,  3206,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,
    3215,    64,    -1,    -1,    -1,  3220,    -1,   432,  3223,    -1,
    3225,  3226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
    2919,    -1,    -1,  3258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   488,    -1,    -1,    -1,   492,    -1,   132,
      -1,    -1,   135,    -1,  3289,    -1,    -1,    -1,    -1,    -1,
     143,   506,    -1,    -1,    -1,    -1,    -1,   150,    -1,    -1,
      -1,  2970,    -1,    -1,    -1,   158,    -1,  3312,    -1,    -1,
      -1,   164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,   563,    -1,
      -1,   566,    -1,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,  3368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   230,    -1,   232,
      -1,    -1,    -1,    -1,    -1,   238,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   246,    -1,    -1,    -1,    -1,   613,   614,
      -1,    -1,    -1,    -1,    -1,  3074,  3075,    -1,   261,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   640,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   319,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   337,    -1,    -1,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,    -1,  3203,  3204,    -1,    -1,    -1,   392,
      -1,   394,    -1,    -1,    -1,    -1,  3215,    -1,    -1,   402,
      -1,  3220,    -1,    -1,  3223,    -1,  3225,  3226,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   448,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3622,    -1,    -1,
    3289,   474,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3312,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3658,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3666,    -1,    -1,    -1,    -1,  3671,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,   531,   532,
      -1,    -1,    -1,    -1,   537,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3368,
     553,    -1,    -1,    -1,   557,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   576,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   594,    -1,    -1,    -1,    -1,    -1,    -1,  3753,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3794,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3825,    -1,    -1,    -1,  3829,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3863,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3877,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3622,    -1,    -1,    -1,    -1,  3963,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3981,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3658,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3666,    -1,    -1,
      -1,    -1,  3671,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4044,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4054,
      -1,    -1,    -1,    -1,    -1,  4060,    -1,  4062,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4137,    -1,    -1,    -1,    -1,    -1,  4143,  4144,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3825,    -1,    -1,    -1,
    3829,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4187,    -1,    -1,    -1,  4191,  4192,    -1,    -1,
      -1,    -1,    -1,  4198,  3863,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3877,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4285,    -1,  4287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4297,    -1,  4299,  4300,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4335,    -1,    -1,    -1,  4339,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4384,
      -1,    -1,    -1,    -1,    -1,  4054,    -1,    -1,    -1,    -1,
      -1,  4060,    -1,  4062,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4407,    -1,  4409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4424,
    4425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4439,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4451,    -1,    -1,    -1,
      -1,    -1,    -1,  4458,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4137,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4496,    -1,  4498,  4499,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4513,  4514,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4526,  4527,    -1,    -1,    -1,    -1,    -1,    -1,  4198,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4554,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4235,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4594,
      -1,    -1,    -1,    -1,    -1,    -1,  4601,    -1,    -1,  4604,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4285,    -1,  4287,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4297,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4641,    -1,    -1,    -1,
      -1,    -1,    -1,  4648,    -1,  4650,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4660,    -1,    -1,    -1,  4664,
      -1,    -1,  4667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4683,    -1,
    4685,    -1,  4687,    -1,    -1,    -1,    -1,    -1,    -1,  4694,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4705,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4720,  4721,    -1,    -1,    -1,
      -1,  4726,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4736,  4737,    -1,    -1,    -1,  4741,    -1,  4407,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4425,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4776,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4458,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4513,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4601,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,  4667,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
      46,    47,    48,    -1,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,  4726,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,  4776,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
     186,    -1,   188,   189,   190,   191,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,   213,    -1,   215,
     216,   217,    -1,   219,   220,   221,    -1,   223,   224,    -1,
      -1,    -1,   228,   229,   230,   231,   232,   233,    -1,   235,
     236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,   245,
     246,   247,   248,    -1,    -1,   251,    -1,   253,   254,    -1,
     256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,   268,   269,    -1,   271,   272,   273,    -1,    -1,
      -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,
     286,   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,   331,   332,   333,    -1,    -1,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
      -1,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,   395,
     396,    -1,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
     416,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,    -1,   482,   483,    -1,    -1,
      -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,
      -1,    -1,   498,    -1,   500,   501,   502,   503,   504,   505,
      -1,   507,   508,   509,   510,   511,   512,    -1,    -1,    -1,
      -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,
      -1,    -1,   528,   529,    -1,    -1,    -1,   533,   534,   535,
     536,   537,    -1,   539,   540,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,    -1,   555,
      -1,   557,   558,   559,   560,    -1,   562,   563,   564,    -1,
     566,   567,   568,   569,    -1,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,   579,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,    -1,   592,   593,    -1,    -1,
     596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,
      -1,    -1,   608,   609,   610,   611,   612,    -1,    -1,   615,
     616,    -1,   618,   619,   620,   621,   622,   623,   624,   625,
      -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,
     636,   637,    -1,    -1,   640,    -1,    -1,    -1,    -1,   645,
     646,    -1,    -1,    -1,    -1,   651,   652,    -1,    -1,   655,
     656,    -1,    -1,   659,   660,     5,    -1,     7,     8,     9,
      10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    38,    39,
      40,    41,    42,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,   186,    -1,   188,   189,
     190,   191,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,   213,    -1,   215,   216,   217,    -1,   219,
     220,   221,    -1,   223,   224,    -1,    -1,    -1,   228,   229,
     230,   231,   232,   233,    -1,   235,   236,   237,    -1,   239,
      -1,   241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,
      -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,
      -1,   271,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,
     280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,
     290,    -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,    -1,    -1,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,    -1,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,   392,   393,    -1,   395,   396,    -1,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,    -1,   416,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,    -1,    -1,   429,
      -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
      -1,   461,   462,    -1,   464,    -1,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,
     490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,   507,   508,   509,
     510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,
     520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,
      -1,    -1,    -1,   533,   534,   535,   536,   537,    -1,   539,
     540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,    -1,   555,    -1,   557,   558,   559,
     560,    -1,   562,   563,   564,    -1,   566,   567,   568,   569,
      -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,   579,
     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
     590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,
      -1,   601,    -1,   603,   604,   605,    -1,    -1,   608,   609,
     610,   611,   612,    -1,    -1,   615,   616,    -1,   618,   619,
     620,   621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,
      -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,    -1,
     640,    -1,    -1,    -1,    -1,   645,   646,    -1,    -1,    -1,
      -1,   651,   652,    -1,    -1,   655,   656,    -1,    -1,   659,
     660,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    39,    40,    41,    42,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,    -1,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,   186,    -1,   188,   189,   190,   191,    -1,   193,
      -1,    -1,    -1,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,   213,
      -1,   215,   216,   217,    -1,   219,   220,   221,    -1,   223,
     224,    -1,    -1,    -1,   228,   229,   230,   231,   232,   233,
      -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,   253,
     254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,
     264,   265,   266,    -1,    -1,   269,    -1,   271,   272,   273,
      -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,
     284,    -1,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,   333,
      -1,    -1,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,    -1,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,   373,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,
      -1,   395,   396,    -1,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,   416,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,
     464,    -1,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,    -1,   482,   483,
      -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,
     494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,
     504,   505,    -1,   507,   508,   509,   510,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,
      -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,
     534,   535,   536,   537,    -1,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
      -1,   555,    -1,   557,   558,   559,   560,    -1,   562,   563,
     564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,
      -1,   575,   576,   577,    -1,   579,   580,   581,   582,   583,
     584,   585,   586,   587,   588,   589,   590,    -1,   592,   593,
      -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,
     604,   605,    -1,    -1,   608,   609,   610,   611,   612,    -1,
      -1,   615,   616,    -1,   618,   619,   620,   621,   622,   623,
     624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,
      -1,   635,   636,   637,    -1,    -1,   640,    -1,    -1,    -1,
      -1,   645,   646,    -1,    -1,    -1,    -1,   651,   652,    -1,
      -1,   655,   656,    -1,    -1,   659,   660,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    39,    40,    41,    42,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,   186,    -1,
     188,   189,   190,   191,    -1,   193,    -1,    -1,    -1,   197,
     198,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,   213,    -1,   215,   216,   217,
      -1,   219,   220,   221,    -1,   223,   224,    -1,    -1,    -1,
     228,   229,   230,   231,   232,   233,    -1,   235,   236,   237,
      -1,   239,    -1,   241,    -1,    -1,    -1,   245,   246,   247,
     248,    -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,
      -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,
      -1,   269,    -1,   271,   272,   273,    -1,    -1,    -1,    -1,
      -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,   287,
      -1,    -1,   290,    -1,    -1,    -1,    -1,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,   331,   332,   333,    -1,    -1,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,    -1,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,   373,   374,    -1,   376,   377,
     378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   391,   392,   393,    -1,   395,   396,    -1,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,   416,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,    -1,
      -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,    -1,   461,   462,    -1,   464,    -1,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,    -1,   482,   483,    -1,    -1,    -1,   487,
     488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,    -1,
     498,    -1,   500,   501,   502,   503,   504,   505,    -1,   507,
     508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,
      -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,
     528,   529,    -1,    -1,    -1,   533,   534,   535,   536,   537,
      -1,   539,   540,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,    -1,   555,    -1,   557,
     558,   559,   560,    -1,   562,   563,   564,    -1,   566,   567,
     568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,
      -1,   579,   580,   581,   582,   583,   584,   585,   586,   587,
     588,   589,   590,    -1,   592,   593,    -1,    -1,   596,    -1,
      -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,    -1,
     608,   609,   610,   611,   612,    -1,    -1,   615,   616,    -1,
     618,   619,   620,   621,   622,   623,   624,   625,    -1,    -1,
      -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,   637,
      -1,    -1,   640,    -1,    -1,    -1,    -1,   645,   646,    -1,
      -1,    -1,    -1,   651,   652,    -1,    -1,   655,   656,    -1,
      -1,   659,   660,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    39,    40,    41,
      42,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
      -1,   193,    -1,    -1,    -1,   197,   198,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,   213,    -1,   215,   216,   217,    -1,   219,   220,   221,
      -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,   231,
     232,   233,    -1,   235,   236,   237,    -1,   239,    -1,   241,
      -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,   251,
      -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,
      -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,   271,
     272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,
     282,    -1,   284,    -1,   286,   287,    -1,    -1,   290,    -1,
      -1,    -1,    -1,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,
     332,   333,    -1,    -1,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,    -1,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,   379,    -1,   381,
     382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,
     392,   393,    -1,   395,   396,    -1,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,   416,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,
      -1,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,    -1,   461,
     462,    -1,   464,    -1,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,    -1,
     482,   483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,
      -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,
     502,   503,   504,   505,    -1,   507,   508,   509,   510,   511,
     512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,
     522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,
      -1,   533,   534,   535,   536,   537,    -1,   539,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,    -1,   555,    -1,   557,   558,   559,   560,    -1,
     562,   563,   564,    -1,   566,   567,   568,   569,    -1,    -1,
      -1,    -1,    -1,   575,   576,   577,    -1,   579,   580,   581,
     582,   583,   584,   585,   586,   587,   588,   589,   590,    -1,
     592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,
      -1,   603,   604,   605,    -1,    -1,   608,   609,   610,   611,
     612,    -1,    -1,   615,   616,    -1,   618,   619,   620,   621,
     622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,
     632,   633,    -1,   635,   636,   637,    -1,    -1,   640,    -1,
      -1,    -1,    -1,   645,   646,    -1,    -1,    -1,    -1,   651,
     652,    -1,    -1,   655,   656,    -1,    -1,   659,   660,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
     186,    -1,   188,   189,   190,   191,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,   213,    -1,   215,
     216,   217,    -1,   219,   220,   221,    -1,   223,   224,    -1,
      -1,    -1,   228,   229,   230,   231,   232,   233,    -1,   235,
     236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,   245,
     246,   247,   248,    -1,    -1,   251,    -1,   253,   254,    -1,
     256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,   269,    -1,   271,   272,   273,    -1,    -1,
      -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,
     286,   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,   331,   332,   333,    -1,    -1,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
      -1,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,   395,
     396,    -1,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
     416,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,    -1,   482,   483,    -1,    -1,
      -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,
      -1,    -1,   498,    -1,   500,   501,   502,   503,   504,   505,
      -1,   507,   508,   509,   510,   511,   512,    -1,    -1,    -1,
      -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,
      -1,    -1,   528,   529,    -1,    -1,    -1,   533,   534,   535,
     536,   537,    -1,   539,   540,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,    -1,   555,
      -1,   557,   558,   559,   560,    -1,   562,   563,   564,    -1,
     566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,
     576,   577,    -1,   579,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,    -1,   592,   593,    -1,    -1,
     596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,
      -1,    -1,   608,   609,   610,   611,   612,    -1,    -1,   615,
     616,    -1,   618,   619,   620,   621,   622,   623,   624,   625,
      -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,
     636,   637,    -1,    -1,   640,    -1,    -1,    -1,    -1,   645,
     646,    -1,    -1,    -1,    -1,   651,   652,    -1,    -1,   655,
     656,    -1,    -1,   659,   660,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    38,    39,
      40,    41,    42,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,   186,    -1,   188,   189,
     190,   191,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,   213,    -1,   215,   216,   217,    -1,   219,
     220,   221,    -1,   223,   224,    -1,    -1,    -1,   228,   229,
     230,   231,   232,   233,    -1,   235,   236,   237,    -1,   239,
      -1,   241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,
      -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,
      -1,   271,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,
     280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,
     290,    -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,    -1,    -1,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,    -1,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,   373,   374,    -1,   376,   377,   378,   379,
      -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,   392,   393,    -1,   395,   396,    -1,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,    -1,   416,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,    -1,    -1,   429,
      -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
      -1,   461,   462,    -1,   464,    -1,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,
     490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,   507,   508,   509,
     510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,
     520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,
      -1,    -1,    -1,   533,   534,   535,   536,   537,    -1,   539,
     540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,    -1,   555,    -1,   557,   558,   559,
     560,    -1,   562,   563,   564,    -1,   566,   567,   568,   569,
      -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,   579,
     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
     590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,
      -1,   601,    -1,   603,   604,   605,    -1,    -1,   608,   609,
     610,   611,   612,    -1,    -1,   615,   616,    -1,   618,   619,
     620,   621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,
      -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,    -1,
     640,    -1,    -1,    -1,    -1,   645,   646,    -1,    -1,    -1,
      -1,   651,   652,    -1,    -1,   655,   656,    -1,    -1,   659,
     660,     5,    -1,     7,     8,     9,    10,    11,    12,    13,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    39,    40,    41,    42,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,    -1,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,   186,    -1,   188,   189,   190,   191,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,   213,
      -1,   215,   216,   217,    -1,   219,   220,   221,    -1,   223,
     224,    -1,    -1,    -1,   228,   229,   230,   231,   232,   233,
      -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,   253,
     254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,
     264,   265,   266,    -1,    -1,   269,    -1,   271,   272,   273,
      -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,
     284,    -1,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,   333,
      -1,    -1,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,    -1,    -1,   358,   359,   360,   361,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,   373,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,
      -1,   395,   396,    -1,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,   416,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,
     464,    -1,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,    -1,   482,   483,
      -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,
     494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,
     504,   505,    -1,   507,   508,   509,   510,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,
      -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,
     534,   535,   536,   537,    -1,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
      -1,   555,    -1,   557,   558,   559,   560,    -1,   562,   563,
     564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,
      -1,   575,   576,   577,    -1,   579,   580,   581,   582,   583,
     584,   585,   586,   587,   588,   589,   590,    -1,   592,   593,
      -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,
     604,   605,    -1,    -1,   608,   609,   610,   611,   612,    -1,
      -1,   615,   616,    -1,   618,   619,   620,   621,   622,   623,
     624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,
      -1,   635,   636,   637,    -1,    -1,   640,    -1,    -1,    -1,
      -1,   645,   646,    -1,    -1,    -1,    -1,   651,   652,    -1,
      -1,   655,   656,    -1,    -1,   659,   660,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    39,    40,    41,    42,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,   186,    -1,
     188,   189,   190,   191,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,   213,    -1,   215,   216,   217,
      -1,   219,   220,   221,    -1,   223,   224,    -1,    -1,    -1,
     228,   229,   230,   231,   232,   233,    -1,   235,   236,   237,
      -1,   239,    -1,   241,    -1,    -1,    -1,   245,   246,   247,
     248,    -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,
      -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,
      -1,   269,    -1,   271,   272,   273,    -1,    -1,    -1,    -1,
      -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,   287,
      -1,    -1,   290,    -1,    -1,    -1,    -1,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,   331,   332,   333,    -1,    -1,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,    -1,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,   373,   374,    -1,   376,   377,
     378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   391,   392,   393,    -1,   395,   396,    -1,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,   416,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,    -1,
      -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,    -1,   461,   462,    -1,   464,    -1,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,    -1,   482,   483,    -1,    -1,    -1,   487,
     488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,    -1,
     498,    -1,   500,   501,   502,   503,   504,   505,    -1,   507,
     508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,
      -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,
     528,   529,    -1,    -1,    -1,   533,   534,   535,   536,   537,
      -1,   539,   540,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,    -1,   555,    -1,   557,
     558,   559,   560,    -1,   562,   563,   564,    -1,   566,   567,
     568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,
      -1,   579,   580,   581,   582,   583,   584,   585,   586,   587,
     588,   589,   590,    -1,   592,   593,    -1,    -1,   596,    -1,
      -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,    -1,
     608,   609,   610,   611,   612,    -1,    -1,   615,   616,    -1,
     618,   619,   620,   621,   622,   623,   624,   625,    -1,    -1,
      -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,   637,
      -1,    -1,   640,    -1,    -1,    -1,    -1,   645,   646,    -1,
      -1,    -1,    -1,   651,   652,    -1,    -1,   655,   656,    -1,
      -1,   659,   660,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    39,    40,    41,
      42,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,   213,    -1,   215,   216,   217,    -1,   219,   220,   221,
      -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,   231,
     232,   233,    -1,   235,   236,   237,    -1,   239,    -1,   241,
      -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,   251,
      -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,
      -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,   271,
     272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,
     282,    -1,   284,    -1,   286,   287,    -1,    -1,   290,    -1,
      -1,    -1,    -1,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,
     332,   333,    -1,    -1,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,    -1,    -1,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,   379,    -1,   381,
     382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,
     392,   393,    -1,   395,   396,    -1,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,   416,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,
      -1,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,    -1,   461,
     462,    -1,   464,    -1,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,    -1,
     482,   483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,
      -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,
     502,   503,   504,   505,    -1,   507,   508,   509,   510,   511,
     512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,
     522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,
      -1,   533,   534,   535,   536,   537,    -1,   539,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,    -1,   555,    -1,   557,   558,   559,   560,    -1,
     562,   563,   564,    -1,   566,   567,   568,   569,    -1,    -1,
      -1,    -1,    -1,   575,   576,   577,    -1,   579,   580,   581,
     582,   583,   584,   585,   586,   587,   588,   589,   590,    -1,
     592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,
      -1,   603,   604,   605,    -1,    -1,   608,   609,   610,   611,
     612,    -1,    -1,   615,   616,    -1,   618,   619,   620,   621,
     622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,
     632,   633,    -1,   635,   636,   637,    -1,    -1,   640,    -1,
      -1,    -1,    -1,   645,   646,    -1,    -1,    -1,    -1,   651,
     652,    -1,    -1,   655,   656,    -1,    -1,   659,   660,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
     186,    -1,   188,   189,   190,   191,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,   213,    -1,   215,
     216,   217,    -1,   219,   220,   221,    -1,   223,   224,    -1,
      -1,    -1,   228,   229,   230,   231,   232,   233,    -1,   235,
     236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,   245,
     246,   247,   248,    -1,    -1,   251,    -1,   253,   254,    -1,
     256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,   269,    -1,   271,   272,   273,    -1,    -1,
      -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,
     286,   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,   331,   332,   333,    -1,    -1,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
      -1,    -1,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,   395,
     396,    -1,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
     416,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,    -1,   482,   483,    -1,    -1,
      -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,
      -1,    -1,   498,    -1,   500,   501,   502,   503,   504,   505,
      -1,   507,   508,   509,   510,   511,   512,    -1,    -1,    -1,
      -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,
      -1,    -1,   528,   529,    -1,    -1,    -1,   533,   534,   535,
     536,   537,    -1,   539,   540,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,    -1,   555,
      -1,   557,   558,   559,   560,    -1,   562,   563,   564,    -1,
     566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,
     576,   577,    -1,   579,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,    -1,   592,   593,    -1,    -1,
     596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,
      -1,    -1,   608,   609,   610,   611,   612,    -1,    -1,   615,
     616,    -1,   618,   619,   620,   621,   622,   623,   624,   625,
      -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,
     636,   637,    -1,    -1,   640,    -1,    -1,    -1,    -1,   645,
     646,    -1,    -1,    -1,    -1,   651,   652,    -1,    -1,   655,
     656,    -1,    -1,   659,   660,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    38,    39,
      40,    41,    42,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,   178,    -1,
     180,   181,   182,   183,   184,   185,   186,    -1,   188,   189,
     190,   191,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,   213,    -1,   215,   216,   217,    -1,   219,
     220,   221,    -1,   223,   224,    -1,    -1,    -1,   228,   229,
     230,   231,   232,   233,    -1,   235,   236,   237,    -1,   239,
      -1,   241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,
      -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,
      -1,   271,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,
     280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,
     290,    -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,    -1,    -1,   336,   337,   338,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,    -1,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,   373,   374,    -1,   376,   377,   378,   379,
      -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,   392,   393,    -1,   395,   396,    -1,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,   412,   413,   414,    -1,   416,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,    -1,    -1,   429,
      -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,    -1,   456,    -1,   458,   459,
      -1,   461,   462,    -1,   464,    -1,   466,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,
     490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,   507,   508,   509,
     510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,
     520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,
      -1,    -1,    -1,   533,   534,   535,   536,   537,    -1,   539,
     540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,    -1,   555,    -1,   557,   558,   559,
     560,    -1,   562,   563,   564,    -1,   566,   567,   568,   569,
      -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,   579,
     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
     590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,
      -1,   601,    -1,   603,   604,   605,    -1,    -1,   608,   609,
     610,   611,   612,    -1,    -1,   615,   616,    -1,   618,   619,
     620,   621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,
      -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,    -1,
     640,    -1,    -1,    -1,    -1,   645,   646,    -1,    -1,    -1,
      -1,   651,   652,    -1,    -1,   655,   656,    -1,    -1,   659,
     660,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    39,    40,    41,    42,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,    -1,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,   178,    -1,   180,   181,   182,   183,
     184,   185,   186,    -1,   188,   189,   190,   191,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,   213,
      -1,   215,   216,   217,    -1,   219,   220,   221,    -1,   223,
     224,    -1,    -1,    -1,   228,   229,   230,   231,   232,   233,
      -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,   253,
     254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,
     264,   265,   266,    -1,    -1,   269,    -1,   271,   272,   273,
      -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,
     284,    -1,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,    -1,    -1,    -1,   328,   329,   330,   331,   332,   333,
      -1,    -1,   336,   337,   338,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,    -1,    -1,   358,   359,   360,   361,   362,    -1,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,   373,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,
      -1,   395,   396,    -1,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,   412,   413,
     414,    -1,   416,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,    -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,
     464,    -1,   466,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,    -1,   482,   483,
      -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,
     494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,
     504,   505,    -1,   507,   508,   509,   510,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,
      -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,
     534,   535,   536,   537,    -1,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
      -1,   555,    -1,   557,   558,   559,   560,    -1,   562,   563,
     564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,
      -1,   575,   576,   577,    -1,   579,   580,   581,   582,   583,
     584,   585,   586,   587,   588,   589,   590,    -1,   592,   593,
      -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,
     604,   605,    -1,    -1,   608,   609,   610,   611,   612,    -1,
      -1,   615,   616,    -1,   618,   619,   620,   621,   622,   623,
     624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,
      -1,   635,   636,   637,    -1,    -1,   640,    -1,    -1,    -1,
      -1,   645,   646,    -1,    -1,    -1,    -1,   651,   652,    -1,
      -1,   655,   656,    -1,    -1,   659,   660,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    39,    40,    41,    42,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,   182,   183,   184,   185,   186,    -1,
     188,   189,   190,   191,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,   213,    -1,   215,   216,   217,
      -1,   219,   220,   221,    -1,   223,   224,    -1,    -1,    -1,
     228,   229,   230,   231,   232,   233,    -1,   235,   236,   237,
      -1,   239,    -1,   241,    -1,    -1,    -1,   245,   246,   247,
     248,    -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,
      -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,
      -1,   269,    -1,   271,   272,   273,    -1,    -1,    -1,    -1,
      -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,   287,
      -1,    -1,   290,    -1,    -1,    -1,    -1,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,   331,   332,   333,    -1,    -1,   336,   337,
     338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,    -1,    -1,
     358,   359,   360,   361,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,   373,   374,    -1,   376,   377,
     378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   391,   392,   393,    -1,   395,   396,    -1,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,    -1,   412,   413,   414,    -1,   416,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,    -1,
      -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,    -1,   456,    -1,
     458,   459,    -1,   461,   462,    -1,   464,    -1,   466,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,    -1,   482,   483,    -1,    -1,    -1,   487,
     488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,    -1,
     498,    -1,   500,   501,   502,   503,   504,   505,    -1,   507,
     508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,
      -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,
     528,   529,    -1,    -1,    -1,   533,   534,   535,   536,   537,
      -1,   539,   540,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,    -1,   555,    -1,   557,
     558,   559,   560,    -1,   562,   563,   564,    -1,   566,   567,
     568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,
      -1,   579,   580,   581,   582,   583,   584,   585,   586,   587,
     588,   589,   590,    -1,   592,   593,    -1,    -1,   596,    -1,
      -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,    -1,
     608,   609,   610,   611,   612,    -1,    -1,   615,   616,    -1,
     618,   619,   620,   621,   622,   623,   624,   625,    -1,    -1,
      -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,   637,
      -1,    -1,   640,    -1,    -1,    -1,    -1,   645,   646,    -1,
      -1,    -1,    -1,   651,   652,    -1,    -1,   655,   656,    -1,
      -1,   659,   660,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    39,    40,    41,
      42,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,   178,    -1,   180,   181,
     182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,   213,    -1,   215,   216,   217,    -1,   219,   220,   221,
      -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,   231,
     232,   233,    -1,   235,   236,   237,    -1,   239,    -1,   241,
      -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,   251,
      -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,
      -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,   271,
     272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,
     282,    -1,   284,    -1,   286,   287,    -1,    -1,   290,    -1,
      -1,    -1,    -1,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,
     332,   333,    -1,    -1,   336,   337,   338,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,    -1,    -1,   358,   359,   360,   361,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,   379,    -1,   381,
     382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,
     392,   393,    -1,   395,   396,    -1,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
     412,   413,   414,    -1,   416,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,
      -1,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,    -1,   456,    -1,   458,   459,    -1,   461,
     462,    -1,   464,    -1,   466,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,    -1,
     482,   483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,
      -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,
     502,   503,   504,   505,    -1,   507,   508,   509,   510,   511,
     512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,
     522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,
      -1,   533,   534,   535,   536,   537,    -1,   539,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,    -1,   555,    -1,   557,   558,   559,   560,    -1,
     562,   563,   564,    -1,   566,   567,   568,   569,    -1,    -1,
      -1,    -1,    -1,   575,   576,   577,    -1,   579,   580,   581,
     582,   583,   584,   585,   586,   587,   588,   589,   590,    -1,
     592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,
      -1,   603,   604,   605,    -1,    -1,   608,   609,   610,   611,
     612,    -1,    -1,   615,   616,    -1,   618,   619,   620,   621,
     622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,
     632,   633,    -1,   635,   636,   637,    -1,    -1,   640,    -1,
      -1,    -1,    -1,   645,   646,    -1,    -1,    -1,    -1,   651,
     652,    -1,    -1,   655,   656,    -1,    -1,   659,   660,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
     186,    -1,   188,   189,   190,   191,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,   213,    -1,   215,
     216,   217,    -1,   219,   220,   221,    -1,   223,   224,    -1,
      -1,    -1,   228,   229,   230,   231,   232,   233,    -1,   235,
     236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,   245,
     246,   247,   248,    -1,    -1,   251,    -1,   253,   254,    -1,
     256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,   269,    -1,   271,   272,   273,    -1,    -1,
      -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,
     286,   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,   331,   332,   333,    -1,    -1,
     336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
      -1,    -1,   358,   359,   360,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,   395,
     396,    -1,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,   412,   413,   414,    -1,
     416,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,    -1,
     456,    -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,    -1,   482,   483,    -1,    -1,
      -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,
      -1,    -1,   498,    -1,   500,   501,   502,   503,   504,   505,
      -1,   507,   508,   509,   510,   511,   512,    -1,    -1,    -1,
      -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,
      -1,    -1,   528,   529,    -1,    -1,    -1,   533,   534,   535,
     536,   537,    -1,   539,   540,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,    -1,   555,
      -1,   557,   558,   559,   560,    -1,   562,   563,   564,    -1,
     566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,
     576,   577,    -1,   579,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,   590,    -1,   592,   593,    -1,    -1,
     596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,
      -1,    -1,   608,   609,   610,   611,   612,    -1,    -1,   615,
     616,    -1,   618,   619,   620,   621,   622,   623,   624,   625,
      -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,
     636,   637,    -1,    -1,   640,    -1,    -1,    -1,    -1,   645,
     646,    -1,    -1,    -1,    -1,   651,   652,    -1,    -1,   655,
     656,    -1,    -1,   659,   660,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    38,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,    -1,   184,   185,   186,    -1,   188,   189,
     190,   191,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,
     220,   221,    -1,   223,   224,    -1,    -1,    -1,   228,   229,
     230,   231,   232,    -1,    -1,   235,   236,   237,    -1,   239,
      -1,   241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,
      -1,    -1,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,
     280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,
     290,    -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,    -1,    -1,   336,   337,    -1,   339,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,    -1,    -1,   358,   359,
     360,   361,    -1,    -1,    -1,   365,   366,    -1,   368,   369,
     370,    -1,   372,   373,   374,    -1,   376,   377,   378,   379,
      -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,    -1,   416,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,    -1,    -1,   429,
      -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,
      -1,   461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,
     490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,   507,   508,   509,
     510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,
     520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,
      -1,    -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,
     540,   541,   542,   543,   544,    -1,    -1,   547,   548,   549,
     550,    -1,   552,   553,    -1,   555,    -1,   557,   558,   559,
     560,    -1,   562,   563,   564,    -1,   566,   567,   568,   569,
      -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,
     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
     590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,
      -1,   601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,
     620,   621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,
      -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,    -1,
     640,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,   659,
     660,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,    -1,    -1,   185,   186,    -1,   188,   189,   190,
      -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,
     231,   232,    -1,    -1,   235,   236,   237,   238,   239,    -1,
     241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,
     261,   262,    -1,   264,   265,   266,    -1,    -1,   269,    -1,
      -1,   272,   273,    -1,   275,    -1,    -1,    -1,   279,   280,
      -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,    -1,   416,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,
      -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,    -1,
     461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
      -1,   482,   483,   484,    -1,    -1,   487,   488,   489,   490,
      -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,   507,   508,   509,   510,
     511,   512,   513,    -1,    -1,    -1,    -1,    -1,   519,   520,
      -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,
      -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,   540,
     541,   542,   543,   544,    -1,    -1,   547,   548,   549,   550,
      -1,   552,   553,    -1,   555,    -1,   557,   558,   559,   560,
      -1,    -1,   563,   564,    -1,   566,   567,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,
     601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,
     621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,
      -1,   632,   633,    -1,   635,   636,   637,    -1,    -1,   640,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   660,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,    -1,
      -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
      -1,   215,   216,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,    -1,    -1,    -1,   228,   229,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,    -1,   241,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,   253,
     254,    -1,   256,   257,    -1,    -1,    -1,   261,   262,    -1,
     264,   265,   266,    -1,    -1,   269,    -1,    -1,   272,   273,
      -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,
     284,    -1,   286,   287,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,    -1,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,   333,
      -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,    -1,
     354,   355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,
      -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,
      -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,    -1,    -1,   412,   413,
     414,    -1,   416,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,
     464,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,    -1,   482,   483,
      -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,
     494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,
     504,   505,    -1,   507,   508,   509,   510,   511,   512,   513,
      -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,
      -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,
      -1,    -1,   536,   537,    -1,   539,   540,   541,   542,   543,
     544,    -1,    -1,   547,   548,   549,   550,    -1,   552,   553,
      -1,   555,    -1,   557,   558,   559,   560,    -1,    -1,   563,
     564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,
      -1,   575,   576,   577,    -1,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,
      -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,   623,
     624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,
      -1,   635,   636,   637,    -1,    -1,   640,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,   660,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,    -1,    -1,
      -1,   228,   229,   230,   231,   232,    -1,    -1,   235,   236,
     237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,   256,
     257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,
      -1,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,    -1,
      -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,
     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,    -1,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,    -1,    -1,   336,
     337,    -1,   339,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,    -1,   354,   355,    -1,
      -1,   358,   359,   360,   361,    -1,    -1,    -1,   365,   366,
      -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,   392,   393,    -1,    -1,   396,
      -1,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,    -1,   416,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
      -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,
      -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,    -1,   482,   483,   484,    -1,    -1,
     487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,
      -1,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,
      -1,   528,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,
     537,    -1,   539,   540,   541,   542,   543,   544,    -1,    -1,
     547,   548,   549,   550,    -1,   552,   553,    -1,   555,    -1,
     557,   558,   559,   560,    -1,    -1,   563,   564,    -1,   566,
     567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,
     577,    -1,    -1,    -1,   581,   582,   583,   584,    -1,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,   596,
      -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
      -1,    -1,   619,   620,   621,   622,   623,   624,   625,    -1,
      -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,
     637,    -1,    -1,   640,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,   653,    -1,    -1,    19,
      -1,    -1,    22,   660,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,    -1,    -1,   185,   186,    -1,   188,   189,
     190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,
     230,   231,   232,    -1,    -1,   235,   236,   237,    -1,   239,
      -1,   241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,
      -1,    -1,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,
     280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,    -1,    -1,   336,   337,    -1,   339,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,
     360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,
     370,    -1,   372,   373,   374,    -1,   376,   377,   378,   379,
      -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,    -1,   416,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,    -1,    -1,   429,
      -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,
      -1,   461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,
     490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,   507,   508,   509,
     510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,
     520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,
      -1,    -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,
     540,   541,   542,   543,   544,    -1,    -1,   547,   548,   549,
     550,    -1,   552,   553,    -1,   555,    -1,   557,   558,   559,
     560,    -1,    -1,   563,   564,    -1,   566,   567,   568,   569,
      -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,
      -1,   581,   582,   583,   584,    -1,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,
      -1,   601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,
     620,   621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,
      -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,    -1,
     640,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,   653,    15,    -1,    -1,    -1,    19,   659,
     660,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,    -1,    -1,   185,   186,    -1,   188,   189,   190,
      -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,
     231,   232,    -1,    -1,   235,   236,   237,    -1,   239,    -1,
     241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,
      -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,    -1,   416,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,
      -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,    -1,
     461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
      -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,   490,
      -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,   507,   508,   509,   510,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
      -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,
      -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,   540,
     541,   542,   543,   544,    -1,    -1,   547,   548,   549,   550,
      -1,   552,   553,    -1,   555,    -1,   557,   558,   559,   560,
      -1,    -1,   563,   564,    -1,   566,   567,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,
     601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,
     621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,
      -1,   632,   633,    -1,   635,   636,   637,    -1,    -1,   640,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,   652,    -1,    15,    -1,    -1,    -1,    19,    -1,   660,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,    -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,    -1,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,   231,
     232,    -1,    -1,   235,   236,   237,    -1,   239,    -1,   241,
      -1,    -1,    -1,    -1,   246,   247,    -1,   249,    -1,   251,
      -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,
      -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,    -1,
     272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,
     282,    -1,   284,    -1,   286,   287,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,    -1,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,    -1,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,
     332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,   361,
      -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,   379,    -1,   381,
     382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,
     392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,    -1,    -1,
     412,   413,   414,    -1,   416,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,
      -1,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,   449,   450,   451,
      -1,    -1,   454,    -1,   456,    -1,   458,   459,    -1,   461,
     462,    -1,   464,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,    -1,
     482,   483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,
      -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,
     502,   503,   504,   505,    -1,   507,   508,   509,   510,   511,
     512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,
     522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,
      -1,   533,    -1,    -1,   536,   537,    -1,   539,   540,   541,
     542,   543,   544,    -1,    -1,   547,   548,   549,   550,    -1,
     552,   553,    -1,   555,    -1,   557,   558,   559,   560,    -1,
      -1,   563,   564,    -1,   566,   567,   568,   569,    -1,    -1,
      -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,   581,
     582,   583,   584,    -1,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,
      -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,
     622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,
     632,   633,    -1,   635,   636,   637,    -1,    -1,   640,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   660,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,    -1,    -1,
     185,   186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,   223,   224,
      -1,    -1,    -1,   228,   229,   230,   231,   232,    -1,    -1,
     235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,   253,   254,
      -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,
     265,   266,    -1,    -1,   269,    -1,    -1,   272,   273,    -1,
      -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,
      -1,   286,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,    -1,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,    -1,
      -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,    -1,   354,
     355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,    -1,
     365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,
      -1,   396,    -1,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
      -1,   416,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,   464,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,    -1,   482,   483,    -1,
      -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,
      -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,   504,
     505,    -1,   507,   508,   509,   510,   511,   512,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,
     525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,    -1,
      -1,   536,   537,    -1,   539,   540,   541,   542,   543,   544,
      -1,    -1,   547,   548,   549,   550,    -1,   552,   553,    -1,
     555,    -1,   557,   558,   559,   560,    -1,    -1,   563,   564,
      -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,
     575,   576,   577,    -1,    -1,    -1,   581,   582,   583,   584,
      -1,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
      -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,
     615,    -1,    -1,    -1,   619,   620,   621,   622,   623,   624,
     625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,
     635,   636,   637,    -1,    -1,   640,    -1,    -1,    -1,    -1,
      -1,    -1,   647,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,   660,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,    -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,    -1,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,   231,
     232,    -1,    -1,   235,   236,   237,    -1,   239,    -1,   241,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,
      -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,    -1,
     272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,
     282,    -1,   284,    -1,   286,   287,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,    -1,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,    -1,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,
     332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,   361,
      -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,   379,    -1,   381,
     382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,
     392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,    -1,    -1,
     412,   413,   414,    -1,   416,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,
      -1,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,   449,   450,   451,
      -1,    -1,   454,    -1,   456,    -1,   458,   459,    -1,   461,
     462,    -1,   464,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,    -1,
     482,   483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,
      -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,
     502,   503,   504,   505,    -1,   507,   508,   509,   510,   511,
     512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,
     522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,
      -1,   533,    -1,    -1,   536,   537,    -1,   539,   540,   541,
     542,   543,   544,    -1,    -1,   547,   548,   549,   550,    -1,
     552,   553,    -1,   555,    -1,   557,   558,   559,   560,    -1,
      -1,   563,   564,    -1,   566,   567,   568,   569,    -1,    -1,
      -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,   581,
     582,   583,   584,    -1,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,
      -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,
     622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,
     632,   633,    -1,   635,   636,   637,    -1,    -1,   640,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
     652,    -1,    15,    -1,    -1,    -1,    19,    -1,   660,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,    -1,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
     223,   224,    -1,    -1,    -1,   228,   229,   230,   231,   232,
      -1,    -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,
      -1,    -1,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
     253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,    -1,    -1,   269,    -1,    -1,   272,
     273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,
      -1,   284,    -1,   286,   287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
      -1,   354,   355,    -1,    -1,   358,   359,   360,   361,    -1,
      -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,
     373,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,
     393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,    -1,   416,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,   456,    -1,   458,   459,    -1,   461,   462,
      -1,   464,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,    -1,   482,
     483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,
      -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,
      -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,
     533,    -1,    -1,   536,   537,    -1,   539,   540,   541,   542,
     543,   544,    -1,    -1,   547,   548,   549,   550,    -1,   552,
     553,    -1,   555,    -1,   557,   558,   559,   560,    -1,    -1,
     563,   564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,   576,   577,    -1,    -1,    -1,   581,   582,
     583,   584,    -1,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,
     623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,
     633,    -1,   635,   636,   637,    -1,    -1,   640,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,   659,   660,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,    -1,
      -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
      -1,   215,   216,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,    -1,    -1,    -1,   228,   229,   230,   231,   232,    -1,
      -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,   253,
     254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,
     264,   265,   266,    -1,    -1,   269,    -1,    -1,   272,   273,
      -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,
     284,    -1,   286,   287,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,    -1,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,   333,
      -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,    -1,
     354,   355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,
      -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,
      -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,    -1,    -1,   412,   413,
     414,    -1,   416,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,
     464,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,    -1,   482,   483,
      -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,
     494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,
     504,   505,    -1,   507,   508,   509,   510,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,
      -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,
      -1,    -1,   536,   537,    -1,   539,   540,   541,   542,   543,
     544,    -1,    -1,   547,   548,   549,   550,    -1,   552,   553,
      -1,   555,    -1,   557,   558,   559,   560,    -1,    -1,   563,
     564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,
      -1,   575,   576,   577,    -1,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,
      -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,   623,
     624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,
      -1,   635,   636,   637,    -1,    -1,   640,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,   660,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,    -1,    -1,
      -1,   228,   229,   230,   231,   232,    -1,    -1,   235,   236,
     237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,   256,
     257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,
      -1,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,    -1,
      -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,
     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,    -1,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,    -1,    -1,   336,
     337,    -1,   339,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,    -1,   354,   355,    -1,
      -1,   358,   359,   360,   361,    -1,    -1,    -1,   365,   366,
      -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,   392,   393,    -1,    -1,   396,
      -1,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,    -1,   416,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
      -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,
      -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,    -1,   482,   483,    -1,    -1,    -1,
     487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,
      -1,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,
      -1,   528,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,
     537,    -1,   539,   540,   541,   542,   543,   544,    -1,    -1,
     547,   548,   549,   550,    -1,   552,   553,    -1,   555,    -1,
     557,   558,   559,   560,    -1,    -1,   563,   564,    -1,   566,
     567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,
     577,    -1,    -1,    -1,   581,   582,   583,   584,    -1,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,   596,
      -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
      -1,    -1,   619,   620,   621,   622,   623,   624,   625,    -1,
      -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,
     637,    -1,    -1,   640,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   660,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,    -1,    -1,   185,   186,    -1,   188,   189,
     190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,
     230,   231,   232,    -1,    -1,   235,   236,   237,    -1,   239,
      -1,   241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,
      -1,    -1,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,
     280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,    -1,    -1,   336,   337,    -1,   339,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,
     360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,
     370,    -1,   372,   373,   374,    -1,   376,   377,   378,   379,
      -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,    -1,   416,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,    -1,    -1,   429,
      -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,
      -1,   461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,
     490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,   507,   508,   509,
     510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,
     520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,
      -1,    -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,
     540,   541,   542,   543,   544,    -1,    -1,   547,   548,   549,
     550,    -1,   552,   553,    -1,   555,    -1,   557,   558,   559,
     560,    -1,    -1,   563,   564,    -1,   566,   567,   568,   569,
      -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,
      -1,   581,   582,   583,   584,    -1,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,
      -1,   601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,
     620,   621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,
      -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,    -1,
     640,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
     660,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,    -1,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
     223,   224,    -1,    -1,    -1,   228,   229,   230,   231,   232,
      -1,    -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,
      -1,    -1,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
     253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,    -1,    -1,   269,    -1,    -1,   272,
     273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,
      -1,   284,    -1,   286,   287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
      -1,   354,   355,    -1,    -1,   358,   359,   360,   361,    -1,
      -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,
     373,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,
     393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,    -1,   416,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,   456,    -1,   458,   459,    -1,   461,   462,
      -1,   464,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,    -1,   482,
     483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,
      -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,
      -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,
     533,    -1,    -1,   536,   537,    -1,   539,   540,   541,   542,
     543,   544,    -1,    -1,   547,   548,   549,   550,    -1,   552,
     553,    -1,   555,    -1,   557,   558,   559,   560,    -1,    -1,
     563,   564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,   576,   577,    -1,    -1,    -1,   581,   582,
     583,   584,    -1,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,
     623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,
     633,    -1,   635,   636,   637,    -1,    -1,   640,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   660,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,    -1,    -1,   185,
     186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,   223,   224,    -1,
      -1,    -1,   228,   229,   230,   231,   232,    -1,    -1,   235,
     236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,
     256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
      -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,
     286,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,   331,   332,   333,    -1,    -1,
     336,   337,    -1,   339,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,    -1,   354,   355,
      -1,    -1,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,    -1,
     396,    -1,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,    -1,    -1,   412,   413,   414,    -1,
     416,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
     456,    -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,    -1,   482,   483,    -1,    -1,
      -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,
      -1,    -1,   498,    -1,   500,   501,   502,   503,   504,   505,
      -1,   507,   508,   509,   510,   511,   512,    -1,    -1,    -1,
      -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,
      -1,    -1,   528,   529,    -1,    -1,    -1,   533,    -1,    -1,
     536,   537,    -1,   539,   540,   541,   542,   543,   544,    -1,
      -1,   547,   548,   549,   550,    -1,   552,   553,    -1,   555,
      -1,   557,   558,   559,   560,    -1,    -1,   563,   564,    -1,
     566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,
     576,   577,    -1,    -1,    -1,   581,   582,   583,   584,    -1,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,
     596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,
      -1,    -1,    -1,   619,   620,   621,   622,   623,   624,   625,
      -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,
     636,   637,    -1,    -1,   640,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   659,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,    -1,    -1,   185,   186,    -1,   188,   189,
     190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,
     230,   231,   232,    -1,    -1,   235,   236,   237,    -1,   239,
      -1,   241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,
      -1,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,   279,
     280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,    -1,    -1,   336,   337,    -1,   339,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,
     360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,
     370,    -1,   372,   373,   374,    -1,   376,   377,   378,   379,
      -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,    -1,   416,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,    -1,    -1,   429,
      -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,
      -1,   461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,
     490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,   507,   508,   509,
     510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,
     520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,
      -1,    -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,
     540,   541,   542,   543,   544,    -1,    -1,   547,   548,   549,
     550,    -1,   552,   553,    -1,   555,    -1,   557,   558,   559,
     560,    -1,   562,   563,   564,    -1,   566,   567,   568,   569,
      -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,
      -1,   581,   582,   583,   584,    -1,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,
      -1,   601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,
     620,   621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,
      -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,    -1,
     640,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   659,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,    -1,
      -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
      -1,   215,   216,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,    -1,    -1,    -1,   228,   229,   230,   231,   232,    -1,
      -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,   253,
     254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,
     264,   265,   266,    -1,    -1,   269,    -1,    -1,   272,   273,
     274,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,
     284,    -1,   286,   287,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,    -1,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,   333,
      -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,    -1,
     354,   355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,
      -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,
      -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,    -1,    -1,   412,   413,
     414,    -1,   416,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,
     464,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,    -1,   482,   483,
      -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,
     494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,
     504,   505,    -1,   507,   508,   509,   510,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,
      -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,
      -1,    -1,   536,   537,    -1,   539,   540,   541,   542,   543,
     544,    -1,    -1,   547,   548,   549,   550,    -1,   552,   553,
      -1,   555,    -1,   557,   558,   559,   560,    -1,   562,   563,
     564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,
      -1,   575,   576,   577,    -1,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,
      -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,   623,
     624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,
      -1,   635,   636,   637,    -1,    -1,   640,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   659,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,   182,    -1,    -1,   185,   186,    -1,
     188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,   223,   224,    -1,    -1,    -1,
     228,   229,   230,   231,   232,    -1,    -1,   235,   236,   237,
      -1,   239,    -1,   241,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,
      -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,
      -1,   269,    -1,    -1,   272,   273,    -1,    -1,    -1,    -1,
      -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,   287,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,    -1,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,    -1,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,   331,   332,   333,    -1,    -1,   336,   337,
      -1,   339,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,    -1,   354,   355,    -1,    -1,
     358,   359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,
      -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,   377,
     378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   391,   392,   393,    -1,    -1,   396,    -1,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,    -1,   416,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,    -1,
      -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,    -1,
     458,   459,    -1,   461,   462,    -1,   464,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,    -1,   482,   483,    -1,    -1,    -1,   487,
     488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,    -1,
     498,    -1,   500,   501,   502,   503,   504,   505,    -1,   507,
     508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,
      -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,
     528,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,
      -1,   539,   540,   541,   542,   543,   544,    -1,    -1,   547,
     548,   549,   550,    -1,   552,   553,    -1,   555,    -1,   557,
     558,   559,   560,    -1,    -1,   563,   564,    -1,   566,   567,
     568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,
      -1,    -1,    -1,   581,   582,   583,   584,    -1,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,    -1,   596,    -1,
      -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,    -1,
      -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,    -1,
      -1,   619,   620,   621,   622,   623,   624,   625,    -1,    -1,
      -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,   637,
      -1,    -1,   640,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   659,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,    -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,    -1,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,   231,
     232,    -1,    -1,   235,   236,   237,    -1,   239,    -1,   241,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,
      -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,    -1,
     272,   273,   274,    -1,    -1,    -1,    -1,   279,   280,    -1,
     282,    -1,   284,    -1,   286,   287,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,    -1,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,    -1,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,
     332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,   361,
      -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,   379,    -1,   381,
     382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,
     392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,    -1,    -1,
     412,   413,   414,    -1,   416,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,
      -1,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,   449,   450,   451,
      -1,    -1,   454,    -1,   456,    -1,   458,   459,    -1,   461,
     462,    -1,   464,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,    -1,
     482,   483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,
      -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,
     502,   503,   504,   505,    -1,   507,   508,   509,   510,   511,
     512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,
     522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,
      -1,   533,    -1,    -1,   536,   537,    -1,   539,   540,   541,
     542,   543,   544,    -1,    -1,   547,   548,   549,   550,    -1,
     552,   553,    -1,   555,    -1,   557,   558,   559,   560,    -1,
     562,   563,   564,    -1,   566,   567,   568,   569,    -1,    -1,
      -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,   581,
     582,   583,   584,    -1,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,
      -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,
     622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,
     632,   633,    -1,   635,   636,   637,    -1,    -1,   640,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   659,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    -1,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,    -1,    -1,   185,
     186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,   223,   224,    -1,
      -1,    -1,   228,   229,   230,   231,   232,    -1,    -1,   235,
     236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,
     256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
      -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,
     286,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,   331,   332,   333,    -1,    -1,
     336,   337,    -1,   339,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,    -1,   354,   355,
      -1,    -1,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,    -1,
     396,    -1,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,    -1,    -1,   412,   413,   414,    -1,
     416,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
     456,    -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,    -1,   482,   483,    -1,    -1,
      -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,
      -1,    -1,   498,    -1,   500,   501,   502,   503,   504,   505,
      -1,   507,   508,   509,   510,   511,   512,    -1,    -1,    -1,
      -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,
      -1,    -1,   528,   529,    -1,    -1,    -1,   533,    -1,    -1,
     536,   537,    -1,   539,   540,   541,   542,   543,   544,    -1,
      -1,   547,   548,   549,   550,    -1,   552,   553,    -1,   555,
      -1,   557,   558,   559,   560,    -1,    -1,   563,   564,    -1,
     566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,
     576,   577,    -1,    -1,    -1,   581,   582,   583,   584,    -1,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,
     596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,
      -1,    -1,    -1,   619,   620,   621,   622,   623,   624,   625,
      -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,
     636,   637,    -1,    -1,   640,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   659,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,    -1,    -1,   185,   186,    -1,   188,   189,
     190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,
     230,   231,   232,    -1,    -1,   235,   236,   237,    -1,   239,
      -1,   241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,
      -1,    -1,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,
     280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,    -1,    -1,   336,   337,    -1,   339,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,
     360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,
     370,    -1,   372,   373,   374,    -1,   376,   377,   378,   379,
      -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,    -1,   416,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,    -1,    -1,   429,
      -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,
      -1,   461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,
     490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,   507,   508,   509,
     510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,
     520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,
      -1,    -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,
     540,   541,   542,   543,   544,    -1,    -1,   547,   548,   549,
     550,    -1,   552,   553,    -1,   555,    -1,   557,   558,   559,
     560,    -1,    -1,   563,   564,    -1,   566,   567,   568,   569,
      -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,
      -1,   581,   582,   583,   584,    -1,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,
      -1,   601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,
     620,   621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,
      -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,    -1,
     640,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,   659,
      24,    25,    26,    27,    28,    29,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,
      -1,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      84,    -1,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,    -1,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,    -1,    -1,    -1,    -1,   180,   181,   182,    -1,
      -1,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,
     224,    -1,    -1,    -1,   228,   229,   230,   231,   232,   233,
      -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,
      -1,    -1,   246,    -1,    -1,    -1,    -1,   251,    -1,   253,
     254,    -1,   256,   257,   258,    -1,    -1,   261,    -1,    -1,
      -1,   265,   266,    -1,    -1,   269,   270,    -1,   272,   273,
      -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,
     284,    -1,   286,   287,    -1,    -1,    -1,    -1,   292,    -1,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,    -1,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,   333,
      -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,    -1,
     354,   355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,
      -1,    -1,   366,    -1,    -1,    -1,   370,    -1,   372,   373,
     374,    -1,   376,   377,   378,   379,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,
      -1,    -1,    -1,    -1,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,
     414,    -1,   416,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,   443,
     444,    -1,   446,    -1,    -1,   449,    -1,   451,   452,    -1,
     454,    -1,    -1,    -1,   458,    -1,    -1,   461,   462,    -1,
     464,   465,   466,    -1,    -1,   469,    -1,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,    -1,   482,    -1,
      -1,    -1,    -1,   487,   488,   489,    -1,    -1,    -1,    -1,
     494,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    -1,
     504,   505,    -1,   507,    -1,   509,    -1,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,
      -1,   525,    -1,    -1,   528,    -1,    -1,    -1,    -1,   533,
      -1,    -1,    -1,   537,    -1,   539,   540,   541,   542,   543,
     544,    -1,    -1,   547,   548,   549,   550,    -1,   552,   553,
      -1,   555,    -1,   557,   558,   559,   560,    -1,    -1,   563,
     564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,
      -1,   575,   576,   577,    -1,    -1,    -1,    -1,   582,   583,
     584,    -1,   586,   587,    -1,   589,   590,    -1,    -1,    -1,
      -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,
      -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,   623,
     624,   625,    -1,    -1,   628,    -1,    -1,    -1,   632,    -1,
      -1,   635,    -1,   637,    -1,     5,   640,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
     654,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,   109,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,   177,    -1,    -1,
     180,   181,   182,    -1,    -1,   185,   186,    -1,   188,   189,
     190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,
      -1,    -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,
     230,   231,   232,    -1,    -1,   235,   236,   237,    -1,   239,
      -1,   241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,
      -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,
      -1,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,   279,
     280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,    -1,   312,   313,   314,   315,    -1,   317,   318,   319,
     320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,
     330,   331,   332,   333,    -1,    -1,   336,   337,    -1,   339,
      -1,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,
     360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,
     370,    -1,   372,   373,   374,    -1,   376,   377,   378,   379,
      -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,    -1,   416,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,    -1,    -1,   429,
      -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,
      -1,   461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,
     490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,   507,   508,   509,
     510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,
     520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,
      -1,    -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,
     540,   541,   542,   543,   544,    -1,    -1,   547,   548,   549,
     550,    -1,   552,   553,    -1,   555,    -1,   557,   558,   559,
     560,    -1,   562,   563,   564,    -1,   566,   567,   568,   569,
      -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,
      -1,   581,   582,   583,   584,    -1,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,
      -1,   601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,
      -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,
     620,   621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,
      -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,     5,
     640,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,   652,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    -1,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,   177,    -1,    -1,   180,   181,   182,    -1,    -1,   185,
     186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,
     216,   217,    -1,   219,    -1,    -1,    -1,   223,   224,    -1,
      -1,    -1,   228,   229,   230,   231,   232,    -1,    -1,   235,
     236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,
     246,   247,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,
     256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,    -1,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,
      -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,
     286,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,   315,
      -1,   317,   318,   319,   320,    -1,   322,   323,    -1,    -1,
      -1,    -1,   328,   329,   330,   331,   332,   333,    -1,    -1,
     336,   337,    -1,   339,    -1,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,    -1,   354,   355,
      -1,    -1,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,    -1,
     396,    -1,   398,    -1,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,    -1,    -1,   412,   413,   414,    -1,
     416,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,
     456,    -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,    -1,   482,   483,    -1,    -1,
      -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,
      -1,    -1,   498,    -1,   500,   501,   502,   503,   504,   505,
      -1,   507,   508,   509,   510,   511,   512,    -1,    -1,    -1,
      -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,
      -1,    -1,   528,   529,    -1,    -1,    -1,   533,    -1,    -1,
     536,   537,    -1,   539,   540,   541,   542,   543,   544,    -1,
      -1,   547,   548,   549,   550,    -1,   552,   553,    -1,   555,
      -1,   557,   558,   559,   560,    -1,    -1,   563,   564,    -1,
     566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,
     576,   577,    -1,    -1,    -1,   581,   582,   583,   584,    -1,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,
     596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,
      -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,
      -1,    -1,    -1,   619,   620,   621,   622,   623,   624,   625,
      -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,
     636,   637,    -1,     5,   640,     7,     8,     9,    10,    11,
      12,   647,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,   177,    -1,    -1,   180,   181,
     182,    -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,    -1,   215,   216,   217,    -1,   219,    -1,    -1,
      -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,   231,
     232,    -1,    -1,   235,   236,   237,    -1,   239,    -1,   241,
      -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,   251,
      -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,
      -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,    -1,
     272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,
     282,    -1,   284,    -1,   286,   287,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,    -1,
     312,   313,   314,   315,    -1,   317,   318,   319,   320,    -1,
     322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,
     332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,   361,
      -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,   379,    -1,   381,
     382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,
     392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,    -1,    -1,
     412,   413,   414,    -1,   416,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,
      -1,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,   449,   450,   451,
      -1,    -1,   454,    -1,   456,    -1,   458,   459,    -1,   461,
     462,    -1,   464,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,    -1,
     482,   483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,
      -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,
     502,   503,   504,   505,    -1,   507,   508,   509,   510,   511,
     512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,
     522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,
      -1,   533,    -1,    -1,   536,   537,    -1,   539,   540,   541,
     542,   543,   544,    -1,    -1,   547,   548,   549,   550,    -1,
     552,   553,    -1,   555,    -1,   557,   558,   559,   560,    -1,
      -1,   563,   564,    -1,   566,   567,   568,   569,    -1,    -1,
      -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,   581,
     582,   583,   584,    -1,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,
      -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,
     612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,
     622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,
     632,   633,    -1,   635,   636,   637,    -1,     5,   640,     7,
       8,     9,    10,    11,    12,   647,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,   177,
      -1,    -1,   180,   181,   182,    -1,    -1,   185,   186,    -1,
     188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,   217,
      -1,   219,    -1,    -1,    -1,   223,   224,    -1,    -1,    -1,
     228,   229,   230,   231,   232,    -1,    -1,   235,   236,   237,
      -1,   239,    -1,   241,    -1,    -1,    -1,    -1,   246,   247,
      -1,    -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,
      -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,
      -1,   269,    -1,    -1,   272,   273,    -1,    -1,    -1,    -1,
      -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,   287,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,    -1,   312,   313,   314,   315,    -1,   317,
     318,   319,   320,    -1,   322,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,   331,   332,   333,    -1,    -1,   336,   337,
      -1,   339,    -1,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,    -1,   354,   355,    -1,    -1,
     358,   359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,
      -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,   377,
     378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   391,   392,   393,    -1,    -1,   396,    -1,
     398,    -1,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,    -1,   416,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,    -1,
      -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,    -1,
     458,   459,    -1,   461,   462,    -1,   464,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,    -1,   482,   483,    -1,    -1,    -1,   487,
     488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,    -1,
     498,    -1,   500,   501,   502,   503,   504,   505,    -1,   507,
     508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,
      -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,
     528,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,
      -1,   539,   540,   541,   542,   543,   544,    -1,    -1,   547,
     548,   549,   550,    -1,   552,   553,    -1,   555,    -1,   557,
     558,   559,   560,    -1,    -1,   563,   564,    -1,   566,   567,
     568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,
      -1,    -1,    -1,   581,   582,   583,   584,    -1,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,    -1,   596,    -1,
      -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,    -1,
      -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,    -1,
      -1,   619,   620,   621,   622,   623,   624,   625,    -1,    -1,
      -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,   637,
      -1,     5,   640,     7,     8,     9,    10,    11,    12,   647,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,   177,    -1,    -1,   180,   181,   182,    -1,
      -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
      -1,   215,   216,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,    -1,    -1,    -1,   228,   229,   230,   231,   232,    -1,
      -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,
      -1,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,   253,
     254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,
     264,   265,   266,    -1,    -1,   269,    -1,    -1,   272,   273,
      -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,
     284,    -1,   286,   287,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,
     314,   315,    -1,   317,   318,   319,   320,    -1,   322,   323,
      -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,   333,
      -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,    -1,
     354,   355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,
      -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,
     374,    -1,   376,   377,   378,   379,    -1,   381,   382,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,
      -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,    -1,    -1,   412,   413,
     414,    -1,   416,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,   449,   450,   451,    -1,    -1,
     454,    -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,
     464,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,    -1,   482,   483,
      -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,
     494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,
     504,   505,    -1,   507,   508,   509,   510,   511,   512,    -1,
      -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,
      -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,
      -1,    -1,   536,   537,    -1,   539,   540,   541,   542,   543,
     544,    -1,    -1,   547,   548,   549,   550,    -1,   552,   553,
      -1,   555,    -1,   557,   558,   559,   560,    -1,    -1,   563,
     564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,
      -1,   575,   576,   577,    -1,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,
     604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,
      -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,   623,
     624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,
      -1,   635,   636,   637,    -1,    -1,   640,    -1,    -1,    -1,
      -1,    -1,     5,   647,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,   104,    -1,   106,    -1,   108,    -1,   110,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,   136,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,    -1,   209,   210,   211,    -1,
      -1,    -1,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
     223,   224,    -1,    -1,    -1,   228,   229,   230,   231,   232,
      -1,    -1,   235,   236,   237,   238,   239,    -1,   241,    -1,
      -1,    -1,   245,   246,   247,    -1,    -1,    -1,   251,    -1,
     253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,    -1,    -1,   269,    -1,    -1,   272,
     273,   274,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,
      -1,   284,   285,   286,   287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
      -1,   354,   355,    -1,    -1,   358,   359,   360,   361,    -1,
      -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,
     373,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,
     393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,    -1,   416,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,
     433,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,   456,    -1,   458,   459,    -1,   461,   462,
      -1,   464,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,    -1,   482,
     483,   484,    -1,    -1,   487,   488,   489,   490,    -1,    -1,
      -1,   494,    -1,    -1,   497,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,
      -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,
     533,    -1,    -1,   536,   537,    -1,   539,   540,   541,   542,
     543,   544,    -1,    -1,   547,   548,   549,   550,    -1,   552,
     553,    -1,   555,    -1,   557,   558,   559,   560,    -1,   562,
     563,   564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,   576,   577,   578,    -1,    -1,   581,   582,
     583,   584,    -1,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,    -1,   596,    -1,    -1,   599,   600,   601,   602,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,
     623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,
     633,    -1,   635,   636,   637,    -1,     5,   640,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,   104,    -1,   106,    -1,   108,
      -1,   110,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,   136,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,   150,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,    -1,    -1,   185,   186,    -1,   188,
     189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,   210,   211,    -1,    -1,    -1,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,   223,   224,    -1,    -1,    -1,   228,
     229,   230,   231,   232,    -1,    -1,   235,   236,   237,   238,
     239,    -1,   241,    -1,    -1,    -1,   245,   246,   247,    -1,
      -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
     269,    -1,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
     279,   280,    -1,   282,    -1,   284,   285,   286,   287,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,    -1,    -1,   336,   337,    -1,
     339,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,
     359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,
      -1,   370,    -1,   372,   373,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   391,   392,   393,    -1,    -1,   396,    -1,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,    -1,   416,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,    -1,    -1,
     429,    -1,    -1,    -1,   433,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,   456,    -1,   458,
     459,    -1,   461,   462,    -1,   464,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,    -1,   482,   483,   484,    -1,    -1,   487,   488,
     489,   490,    -1,    -1,    -1,   494,    -1,    -1,   497,   498,
      -1,   500,   501,   502,   503,   504,   505,    -1,   507,   508,
     509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,
     529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,    -1,
     539,   540,   541,   542,   543,   544,    -1,    -1,   547,   548,
     549,   550,    -1,   552,   553,    -1,   555,    -1,   557,   558,
     559,   560,    -1,   562,   563,   564,    -1,   566,   567,   568,
     569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,
     599,   600,   601,   602,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,
     619,   620,   621,   622,   623,   624,   625,    -1,    -1,    -1,
      -1,    -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,
       5,   640,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,   129,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,    -1,    -1,
     185,   186,    -1,   188,   189,   190,   191,    -1,   193,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,
     215,   216,   217,    -1,   219,   220,    -1,    -1,   223,   224,
      -1,    -1,    -1,   228,   229,   230,   231,   232,    -1,    -1,
     235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,   253,   254,
      -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,
     265,   266,    -1,    -1,   269,    -1,    -1,   272,   273,    -1,
      -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,
      -1,   286,   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,    -1,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,    -1,
      -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,    -1,   354,
     355,    -1,    -1,   358,   359,   360,   361,   362,   363,    -1,
     365,   366,    -1,    -1,   369,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,
      -1,   396,    -1,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
      -1,   416,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,   464,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,    -1,   482,   483,    -1,
      -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,
      -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,   504,
     505,    -1,   507,   508,   509,   510,   511,   512,    -1,    -1,
     515,   516,   517,    -1,   519,   520,    -1,   522,    -1,    -1,
     525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,    -1,
      -1,   536,   537,    -1,   539,   540,   541,   542,   543,   544,
      -1,    -1,   547,   548,   549,   550,    -1,   552,   553,    -1,
     555,    -1,   557,   558,   559,   560,    -1,    -1,   563,   564,
      -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,
     575,   576,   577,    -1,    -1,    -1,   581,   582,   583,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
      -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,
     615,    -1,    -1,    -1,   619,   620,   621,   622,   623,   624,
     625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,
     635,   636,   637,    -1,     5,   640,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,    -1,    -1,   185,   186,    -1,   188,   189,   190,
     191,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,   220,
      -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,
     231,   232,    -1,    -1,   235,   236,   237,    -1,   239,    -1,
     241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,
      -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,   290,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,   369,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,    -1,   416,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,
      -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,    -1,
     461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
      -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,   490,
      -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,   507,   508,   509,   510,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
      -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,
      -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,   540,
     541,   542,   543,   544,    -1,    -1,   547,   548,   549,   550,
      -1,   552,   553,    -1,   555,    -1,   557,   558,   559,   560,
      -1,   562,   563,   564,    -1,   566,   567,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,
     581,   582,   583,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,
     601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,
     621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,
      -1,   632,   633,    -1,   635,   636,   637,    -1,     5,   640,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,   191,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,
     217,    -1,   219,   220,    -1,    -1,   223,   224,    -1,    -1,
      -1,   228,   229,   230,   231,   232,    -1,    -1,   235,   236,
     237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,   256,
     257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,
      -1,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,    -1,
      -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,
     287,    -1,    -1,   290,    -1,    -1,    -1,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,    -1,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,    -1,    -1,   336,
     337,    -1,   339,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,    -1,   354,   355,    -1,
      -1,   358,   359,   360,   361,    -1,    -1,    -1,   365,   366,
      -1,    -1,   369,   370,    -1,   372,   373,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,   392,   393,    -1,    -1,   396,
      -1,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,    -1,   416,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
      -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,
      -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,    -1,   482,   483,    -1,    -1,    -1,
     487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,
      -1,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,
      -1,   528,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,
     537,    -1,   539,   540,   541,   542,   543,   544,    -1,    -1,
     547,   548,   549,   550,    -1,   552,   553,    -1,   555,    -1,
     557,   558,   559,   560,    -1,   562,   563,   564,    -1,   566,
     567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,
     577,    -1,    -1,    -1,   581,   582,   583,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,   596,
      -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
      -1,    -1,   619,   620,   621,   622,   623,   624,   625,    -1,
      -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,
     637,    -1,     5,   640,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,   191,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,    -1,   215,   216,   217,    -1,   219,   220,    -1,    -1,
     223,   224,    -1,    -1,    -1,   228,   229,   230,   231,   232,
      -1,    -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,
      -1,    -1,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
     253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,    -1,    -1,   269,    -1,    -1,   272,
     273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,
      -1,   284,    -1,   286,   287,    -1,    -1,   290,    -1,    -1,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
      -1,   354,   355,    -1,    -1,   358,   359,   360,   361,    -1,
      -1,    -1,   365,   366,    -1,    -1,   369,   370,    -1,   372,
     373,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,
     393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,    -1,   416,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,   456,    -1,   458,   459,    -1,   461,   462,
      -1,   464,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,    -1,   482,
     483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,
      -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,
      -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,
     533,    -1,    -1,   536,   537,    -1,   539,   540,   541,   542,
     543,   544,    -1,    -1,   547,   548,   549,   550,    -1,   552,
     553,    -1,   555,    -1,   557,   558,   559,   560,    -1,   562,
     563,   564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,   576,   577,    -1,    -1,    -1,   581,   582,
     583,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,
     623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,
     633,    -1,   635,   636,   637,    -1,     5,   640,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    36,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,    -1,    -1,   185,   186,    -1,   188,
     189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,    -1,    -1,    -1,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,   223,   224,    -1,    -1,    -1,   228,
     229,   230,   231,   232,    -1,    -1,   235,   236,   237,    -1,
     239,    -1,   241,    -1,    -1,    -1,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
     269,    -1,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
     279,   280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,    -1,    -1,   336,   337,    -1,
     339,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,
     359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,
      -1,   370,    -1,   372,   373,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   391,   392,   393,    -1,    -1,   396,    -1,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,    -1,   416,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,    -1,    -1,
     429,    -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,   456,    -1,   458,
     459,    -1,   461,   462,    -1,   464,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,
     489,   490,    -1,    -1,   493,   494,    -1,    -1,    -1,   498,
      -1,   500,   501,   502,   503,   504,   505,    -1,   507,   508,
     509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,
     529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,    -1,
     539,   540,   541,   542,   543,   544,    -1,    -1,   547,   548,
     549,   550,    -1,   552,   553,    -1,   555,    -1,   557,   558,
     559,   560,    -1,   562,   563,   564,    -1,   566,   567,   568,
     569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,
     599,    -1,   601,    -1,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,
     619,   620,   621,   622,   623,   624,   625,    -1,    -1,    -1,
      -1,    -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,
       5,   640,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,   109,   110,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,    -1,    -1,
     185,   186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,   223,   224,
      -1,    -1,    -1,   228,   229,   230,   231,   232,    -1,    -1,
     235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,   253,   254,
      -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,
     265,   266,    -1,    -1,   269,    -1,    -1,   272,   273,   274,
      -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,
      -1,   286,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,    -1,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,    -1,
      -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,    -1,   354,
     355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,    -1,
     365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,
      -1,   396,    -1,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
      -1,   416,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,   464,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,    -1,   482,   483,    -1,
      -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,
      -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,   504,
     505,    -1,   507,   508,   509,   510,   511,   512,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,
     525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,    -1,
      -1,   536,   537,    -1,   539,   540,   541,   542,   543,   544,
      -1,    -1,   547,   548,   549,   550,    -1,   552,   553,    -1,
     555,    -1,   557,   558,   559,   560,    -1,   562,   563,   564,
      -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,
     575,   576,   577,    -1,    -1,    -1,   581,   582,   583,   584,
      -1,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
      -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,
     615,    -1,    -1,    -1,   619,   620,   621,   622,   623,   624,
     625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,
     635,   636,   637,    -1,     5,   640,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    36,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,    -1,    -1,   185,   186,    -1,   188,   189,   190,
      -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,
     231,   232,    -1,    -1,   235,   236,   237,    -1,   239,    -1,
     241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,
      -1,   272,   273,   274,    -1,    -1,    -1,    -1,   279,   280,
      -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,    -1,   416,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,
      -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,    -1,
     461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
      -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,   490,
      -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,   507,   508,   509,   510,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
      -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,
      -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,   540,
     541,   542,   543,   544,    -1,    -1,   547,   548,   549,   550,
      -1,   552,   553,    -1,   555,    -1,   557,   558,   559,   560,
      -1,   562,   563,   564,    -1,   566,   567,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,
     601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,
     621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,
      -1,   632,   633,    -1,   635,   636,   637,    -1,     5,   640,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    38,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,
     217,    -1,   219,   220,   221,    -1,   223,   224,    -1,    -1,
      -1,   228,   229,   230,   231,   232,    -1,    -1,   235,   236,
     237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,   256,
     257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,
      -1,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,    -1,
      -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,
     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,    -1,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,    -1,    -1,   336,
     337,    -1,   339,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,    -1,   354,   355,    -1,
      -1,   358,   359,   360,   361,    -1,    -1,    -1,   365,   366,
      -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,   392,   393,    -1,    -1,   396,
      -1,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,    -1,   416,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
      -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,
      -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,    -1,   482,   483,    -1,    -1,    -1,
     487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,
      -1,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,
      -1,   528,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,
     537,    -1,   539,   540,   541,   542,   543,   544,    -1,    -1,
     547,   548,   549,   550,    -1,   552,   553,    -1,   555,    -1,
     557,   558,   559,   560,    -1,   562,   563,   564,    -1,   566,
     567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,
     577,    -1,    -1,    -1,   581,   582,   583,   584,    -1,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,   596,
      -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
      -1,    -1,   619,   620,   621,   622,   623,   624,   625,    -1,
      -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,
     637,    -1,     5,   640,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,    -1,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
     223,   224,    -1,    -1,    -1,   228,   229,   230,   231,   232,
      -1,    -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,
      -1,    -1,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
     253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,    -1,    -1,   269,    -1,    -1,   272,
     273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,
      -1,   284,    -1,   286,   287,    -1,    -1,   290,    -1,    -1,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
      -1,   354,   355,    -1,    -1,   358,   359,   360,   361,    -1,
      -1,    -1,   365,   366,    -1,    -1,   369,   370,    -1,   372,
     373,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,
     393,    -1,   395,   396,    -1,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,    -1,   416,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,   456,    -1,   458,   459,    -1,   461,   462,
      -1,   464,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,    -1,   482,
     483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,
      -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,
      -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,
     533,    -1,    -1,   536,   537,    -1,   539,   540,   541,   542,
     543,   544,    -1,    -1,   547,   548,   549,   550,    -1,   552,
     553,    -1,   555,    -1,   557,   558,   559,   560,    -1,    -1,
     563,   564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,   576,   577,    -1,    -1,    -1,   581,   582,
     583,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,
     623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,
     633,    -1,   635,   636,   637,    -1,     5,   640,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,    -1,    -1,   185,   186,    -1,   188,
     189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,    -1,    -1,    -1,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,   223,   224,    -1,    -1,    -1,   228,
     229,   230,   231,   232,    -1,    -1,   235,   236,   237,    -1,
     239,    -1,   241,    -1,    -1,    -1,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
     269,    -1,    -1,   272,   273,    -1,    -1,    -1,    -1,    -1,
     279,   280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,
      -1,   290,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,    -1,    -1,   336,   337,    -1,
     339,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,
     359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,
     369,   370,    -1,   372,   373,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   391,   392,   393,    -1,   395,   396,    -1,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,    -1,   416,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,    -1,    -1,
     429,    -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,   456,    -1,   458,
     459,    -1,   461,   462,    -1,   464,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,
     489,   490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,
      -1,   500,   501,   502,   503,   504,   505,    -1,   507,   508,
     509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,
     529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,    -1,
     539,   540,   541,   542,   543,   544,    -1,    -1,   547,   548,
     549,   550,    -1,   552,   553,    -1,   555,    -1,   557,   558,
     559,   560,    -1,    -1,   563,   564,    -1,   566,   567,   568,
     569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,
      -1,    -1,   581,   582,   583,   584,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,
     599,    -1,   601,    -1,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,
     619,   620,   621,   622,   623,   624,   625,    -1,    -1,    -1,
      -1,    -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,
       5,   640,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    36,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,    -1,    -1,
     185,   186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,   223,   224,
      -1,    -1,    -1,   228,   229,   230,   231,   232,    -1,    -1,
     235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,   253,   254,
      -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,
     265,   266,    -1,    -1,   269,    -1,    -1,   272,   273,   274,
      -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,
      -1,   286,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,    -1,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,    -1,
      -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,    -1,   354,
     355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,    -1,
     365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,
      -1,   396,    -1,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
      -1,   416,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,   464,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,    -1,   482,   483,    -1,
      -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,
      -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,   504,
     505,    -1,   507,   508,   509,   510,   511,   512,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,
     525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,    -1,
      -1,   536,   537,    -1,   539,   540,   541,   542,   543,   544,
      -1,    -1,   547,   548,   549,   550,    -1,   552,   553,    -1,
     555,    -1,   557,   558,   559,   560,    -1,   562,   563,   564,
      -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,
     575,   576,   577,    -1,    -1,    -1,   581,   582,   583,   584,
      -1,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
      -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,
     615,    -1,    -1,    -1,   619,   620,   621,   622,   623,   624,
     625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,
     635,   636,   637,    -1,     5,   640,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,    -1,    -1,   185,   186,    -1,   188,   189,   190,
      -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,
     231,   232,    -1,    -1,   235,   236,   237,    -1,   239,    -1,
     241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,
      -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,   290,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,   369,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,   393,    -1,   395,   396,    -1,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,    -1,   416,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,
      -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,    -1,
     461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
      -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,   490,
      -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,   507,   508,   509,   510,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
      -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,
      -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,   540,
     541,   542,   543,   544,    -1,    -1,   547,   548,   549,   550,
      -1,   552,   553,    -1,   555,    -1,   557,   558,   559,   560,
      -1,    -1,   563,   564,    -1,   566,   567,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,
     581,   582,   583,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,
     601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,
     621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,
      -1,   632,   633,    -1,   635,   636,   637,    -1,     5,   640,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,   110,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,    -1,    -1,
      -1,   228,   229,   230,   231,   232,    -1,    -1,   235,   236,
     237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,   256,
     257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,
      -1,    -1,   269,    -1,    -1,   272,   273,   274,    -1,    -1,
      -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,
     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,    -1,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,    -1,    -1,   336,
     337,    -1,   339,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,    -1,   354,   355,    -1,
      -1,   358,   359,   360,   361,    -1,    -1,    -1,   365,   366,
      -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,   392,   393,    -1,    -1,   396,
      -1,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,    -1,   416,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
      -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,
      -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,    -1,   482,   483,    -1,    -1,    -1,
     487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,
      -1,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,
      -1,   528,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,
     537,    -1,   539,   540,   541,   542,   543,   544,    -1,    -1,
     547,   548,   549,   550,    -1,   552,   553,    -1,   555,    -1,
     557,   558,   559,   560,    -1,   562,   563,   564,    -1,   566,
     567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,
     577,    -1,    -1,    -1,   581,   582,   583,   584,    -1,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,   596,
      -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
      -1,    -1,   619,   620,   621,   622,   623,   624,   625,    -1,
      -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,
     637,    -1,     5,   640,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,   109,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,    -1,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
     223,   224,    -1,    -1,    -1,   228,   229,   230,   231,   232,
      -1,    -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,
      -1,    -1,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
     253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,    -1,    -1,   269,    -1,    -1,   272,
     273,   274,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,
      -1,   284,    -1,   286,   287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
      -1,   354,   355,    -1,    -1,   358,   359,   360,   361,    -1,
      -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,
     373,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,
     393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,    -1,   416,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,   456,    -1,   458,   459,    -1,   461,   462,
      -1,   464,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,    -1,   482,
     483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,
      -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,
      -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,
     533,    -1,    -1,   536,   537,    -1,   539,   540,   541,   542,
     543,   544,    -1,    -1,   547,   548,   549,   550,    -1,   552,
     553,    -1,   555,    -1,   557,   558,   559,   560,    -1,   562,
     563,   564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,   576,   577,    -1,    -1,    -1,   581,   582,
     583,   584,    -1,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,
     623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,
     633,    -1,   635,   636,   637,    -1,     5,   640,     7,     8,
       9,    10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,    -1,    -1,   185,   186,    -1,   188,
     189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,    -1,    -1,    -1,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,   223,   224,    -1,    -1,    -1,   228,
     229,   230,   231,   232,    -1,    -1,   235,   236,   237,    -1,
     239,    -1,   241,    -1,    -1,    -1,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
     269,    -1,    -1,   272,   273,   274,    -1,    -1,    -1,    -1,
     279,   280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,    -1,    -1,   336,   337,    -1,
     339,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,
     359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,
      -1,   370,    -1,   372,   373,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   391,   392,   393,    -1,    -1,   396,    -1,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,    -1,   416,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,    -1,    -1,
     429,    -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,   456,    -1,   458,
     459,    -1,   461,   462,    -1,   464,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,
     489,   490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,
      -1,   500,   501,   502,   503,   504,   505,    -1,   507,   508,
     509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,
     529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,    -1,
     539,   540,   541,   542,   543,   544,    -1,    -1,   547,   548,
     549,   550,    -1,   552,   553,    -1,   555,    -1,   557,   558,
     559,   560,    -1,   562,   563,   564,    -1,   566,   567,   568,
     569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,
     599,    -1,   601,    -1,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,
     619,   620,   621,   622,   623,   624,   625,    -1,    -1,    -1,
      -1,    -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,
       5,   640,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,    -1,    -1,
     185,   186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,   223,   224,
      -1,    -1,    -1,   228,   229,   230,   231,   232,    -1,    -1,
     235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,   253,   254,
      -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,
     265,   266,    -1,    -1,   269,    -1,    -1,   272,   273,   274,
      -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,
      -1,   286,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,    -1,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,    -1,
      -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,    -1,   354,
     355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,    -1,
     365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,
      -1,   396,    -1,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
      -1,   416,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,   464,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,    -1,   482,   483,    -1,
      -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,
      -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,   504,
     505,    -1,   507,   508,   509,   510,   511,   512,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,
     525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,    -1,
      -1,   536,   537,    -1,   539,   540,   541,   542,   543,   544,
      -1,    -1,   547,   548,   549,   550,    -1,   552,   553,    -1,
     555,    -1,   557,   558,   559,   560,    -1,   562,   563,   564,
      -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,
     575,   576,   577,    -1,    -1,    -1,   581,   582,   583,   584,
      -1,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
      -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,
     615,    -1,    -1,    -1,   619,   620,   621,   622,   623,   624,
     625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,
     635,   636,   637,    -1,     5,   640,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    36,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,    -1,    -1,   185,   186,    -1,   188,   189,   190,
      -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,
     231,   232,    -1,    -1,   235,   236,   237,    -1,   239,    -1,
     241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,
      -1,   272,   273,   274,    -1,    -1,    -1,    -1,   279,   280,
      -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,    -1,   416,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,
      -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,    -1,
     461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
      -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,   490,
      -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,   507,   508,   509,   510,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
      -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,
      -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,   540,
     541,   542,   543,   544,    -1,    -1,   547,   548,   549,   550,
      -1,   552,   553,    -1,   555,    -1,   557,   558,   559,   560,
      -1,   562,   563,   564,    -1,   566,   567,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,
     601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,
     621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,
      -1,   632,   633,    -1,   635,   636,   637,    -1,     5,   640,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,    -1,    -1,
      -1,   228,   229,   230,   231,   232,    -1,    -1,   235,   236,
     237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,   256,
     257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,
      -1,    -1,   269,    -1,    -1,   272,   273,   274,    -1,    -1,
      -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,
     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,    -1,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,    -1,    -1,   336,
     337,    -1,   339,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,    -1,   354,   355,    -1,
      -1,   358,   359,   360,   361,    -1,    -1,    -1,   365,   366,
      -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,   392,   393,    -1,    -1,   396,
      -1,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,    -1,   416,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
      -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,
      -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,    -1,   482,   483,    -1,    -1,    -1,
     487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,
      -1,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,
      -1,   528,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,
     537,    -1,   539,   540,   541,   542,   543,   544,    -1,    -1,
     547,   548,   549,   550,    -1,   552,   553,    -1,   555,    -1,
     557,   558,   559,   560,    -1,   562,   563,   564,    -1,   566,
     567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,
     577,    -1,    -1,    -1,   581,   582,   583,   584,    -1,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,   596,
      -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
      -1,    -1,   619,   620,   621,   622,   623,   624,   625,    -1,
      -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,
     637,    -1,     5,   640,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    20,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,    -1,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
     223,   224,    -1,    -1,    -1,   228,   229,   230,   231,   232,
      -1,    -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,
      -1,    -1,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
     253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,    -1,    -1,   269,    -1,    -1,   272,
     273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,
      -1,   284,    -1,   286,   287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
      -1,   354,   355,    -1,    -1,   358,   359,   360,   361,    -1,
      -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,
     373,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,
     393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,    -1,   416,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,   456,    -1,   458,   459,    -1,   461,   462,
      -1,   464,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,    -1,   482,
     483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,
      -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,
      -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,
     533,    -1,    -1,   536,   537,    -1,   539,   540,   541,   542,
     543,   544,    -1,    -1,   547,   548,   549,   550,    -1,   552,
     553,    -1,   555,    -1,   557,   558,   559,   560,    -1,   562,
     563,   564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,   576,   577,    -1,    -1,    -1,   581,   582,
     583,   584,    -1,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,
     623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,
     633,    -1,   635,   636,   637,    -1,     5,   640,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,    -1,    -1,   185,   186,    -1,   188,
     189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,    -1,    -1,    -1,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,   223,   224,    -1,    -1,    -1,   228,
     229,   230,   231,   232,    -1,    -1,   235,   236,   237,    -1,
     239,    -1,   241,    -1,    -1,    -1,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
     269,    -1,    -1,   272,   273,    -1,    -1,    -1,    -1,    -1,
     279,   280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,    -1,    -1,   336,   337,    -1,
     339,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,
     359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,
      -1,   370,    -1,   372,   373,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   391,   392,   393,    -1,    -1,   396,    -1,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,    -1,   416,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,    -1,    -1,
     429,    -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,   456,    -1,   458,
     459,    -1,   461,   462,    -1,   464,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,
     489,   490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,
      -1,   500,   501,   502,   503,   504,   505,    -1,   507,   508,
     509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,
     529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,    -1,
     539,   540,   541,   542,   543,   544,    -1,    -1,   547,   548,
     549,   550,    -1,   552,   553,    -1,   555,    -1,   557,   558,
     559,   560,    -1,    -1,   563,   564,    -1,   566,   567,   568,
     569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,
     599,    -1,   601,    -1,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,
     619,   620,   621,   622,   623,   624,   625,    -1,    -1,    -1,
      -1,    -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,
       5,   640,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,    -1,    -1,
     185,   186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,   223,   224,
      -1,    -1,    -1,   228,   229,   230,   231,   232,    -1,    -1,
     235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,   253,   254,
      -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,
     265,   266,    -1,    -1,   269,    -1,    -1,   272,   273,    -1,
      -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,
      -1,   286,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,    -1,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,    -1,
      -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,    -1,   354,
     355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,    -1,
     365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,
      -1,   396,    -1,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
      -1,   416,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,   464,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,    -1,   482,   483,    -1,
      -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,
      -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,   504,
     505,    -1,   507,   508,   509,   510,   511,   512,    -1,    -1,
      -1,   516,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,
     525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,    -1,
      -1,   536,   537,    -1,   539,   540,   541,   542,   543,   544,
      -1,    -1,   547,   548,   549,   550,    -1,   552,   553,    -1,
     555,    -1,   557,   558,   559,   560,    -1,    -1,   563,   564,
      -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,
     575,   576,   577,    -1,    -1,    -1,   581,   582,   583,   584,
      -1,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
      -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,
     615,    -1,    -1,    -1,   619,   620,   621,   622,   623,   624,
     625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,
     635,   636,   637,    -1,     5,   640,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,    -1,    -1,   185,   186,    -1,   188,   189,   190,
      -1,    -1,   193,    -1,    -1,    -1,   197,   198,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,
     231,   232,    -1,    -1,   235,   236,   237,    -1,   239,    -1,
     241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,
      -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,    -1,   416,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,
      -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,    -1,
     461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
      -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,   490,
      -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,   507,   508,   509,   510,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
      -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,
      -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,   540,
     541,   542,   543,   544,    -1,    -1,   547,   548,   549,   550,
      -1,   552,   553,    -1,   555,    -1,   557,   558,   559,   560,
      -1,    -1,   563,   564,    -1,   566,   567,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,
     601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,
     621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,
      -1,   632,   633,    -1,   635,   636,   637,    -1,     5,   640,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,    -1,    -1,
      -1,   228,   229,   230,   231,   232,    -1,    -1,   235,   236,
     237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,   256,
     257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,
      -1,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,    -1,
      -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,
     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,    -1,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,    -1,    -1,   336,
     337,    -1,   339,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,    -1,   354,   355,    -1,
      -1,   358,   359,   360,   361,    -1,    -1,    -1,   365,   366,
      -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,   392,   393,    -1,    -1,   396,
      -1,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,    -1,   416,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
      -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,
      -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,    -1,   482,   483,    -1,    -1,    -1,
     487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,
      -1,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,
      -1,   528,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,
     537,    -1,   539,   540,   541,   542,   543,   544,    -1,    -1,
     547,   548,   549,   550,    -1,   552,   553,    -1,   555,    -1,
     557,   558,   559,   560,    -1,    -1,   563,   564,    -1,   566,
     567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,
     577,    -1,    -1,    -1,   581,   582,   583,   584,    -1,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,   596,
      -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
      -1,    -1,   619,   620,   621,   622,   623,   624,   625,    -1,
      -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,
     637,    -1,     5,   640,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,   132,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,    -1,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
     223,   224,    -1,    -1,    -1,   228,   229,   230,   231,   232,
      -1,    -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,
      -1,    -1,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
     253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,    -1,    -1,   269,    -1,    -1,   272,
     273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,
      -1,   284,    -1,   286,   287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
      -1,   354,   355,    -1,    -1,   358,   359,   360,   361,    -1,
      -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,
     373,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,
     393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,    -1,   416,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,   456,    -1,   458,   459,    -1,   461,   462,
      -1,   464,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,    -1,   482,
     483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,
      -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,
      -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,
     533,    -1,    -1,   536,   537,    -1,   539,   540,   541,   542,
     543,   544,    -1,    -1,   547,   548,   549,   550,    -1,   552,
     553,    -1,   555,    -1,   557,   558,   559,   560,    -1,    -1,
     563,   564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,   576,   577,    -1,    -1,    -1,   581,   582,
     583,   584,    -1,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,
     623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,
     633,    -1,   635,   636,   637,    -1,     5,   640,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,    -1,    -1,   185,   186,    -1,   188,
     189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,    -1,    -1,    -1,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,   223,   224,    -1,    -1,    -1,   228,
     229,   230,   231,   232,    -1,    -1,   235,   236,   237,    -1,
     239,    -1,   241,    -1,    -1,    -1,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
     269,    -1,    -1,   272,   273,    -1,    -1,    -1,    -1,    -1,
     279,   280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,    -1,    -1,   336,   337,    -1,
     339,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,
     359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,
      -1,   370,    -1,   372,   373,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   391,   392,   393,    -1,    -1,   396,    -1,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,    -1,   416,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,    -1,    -1,
     429,    -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,   456,    -1,   458,
     459,    -1,   461,   462,    -1,   464,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,
     489,   490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,
      -1,   500,   501,   502,   503,   504,   505,    -1,   507,   508,
     509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,
     529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,    -1,
     539,   540,   541,   542,   543,   544,    -1,    -1,   547,   548,
     549,   550,    -1,   552,   553,    -1,   555,    -1,   557,   558,
     559,   560,    -1,    -1,   563,   564,    -1,   566,   567,   568,
     569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,
     599,    -1,   601,    -1,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,
     619,   620,   621,   622,   623,   624,   625,    -1,    -1,    -1,
      -1,    -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,
       5,   640,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,    -1,    -1,
     185,   186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,   223,   224,
      -1,    -1,    -1,   228,   229,   230,   231,   232,    -1,    -1,
     235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,   253,   254,
      -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,
     265,   266,    -1,    -1,   269,    -1,    -1,   272,   273,    -1,
      -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,
      -1,   286,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,    -1,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,    -1,
      -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,    -1,   354,
     355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,    -1,
     365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,
      -1,   396,    -1,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,   464,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,    -1,   482,   483,    -1,
      -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,
      -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,   504,
     505,    -1,   507,   508,   509,   510,   511,   512,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,
     525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,    -1,
      -1,   536,   537,    -1,   539,   540,   541,   542,   543,   544,
      -1,    -1,   547,   548,   549,   550,    -1,   552,   553,    -1,
     555,    -1,   557,   558,   559,   560,    -1,    -1,   563,   564,
      -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,
     575,   576,   577,    -1,    -1,    -1,   581,   582,   583,   584,
      -1,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
      -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,
     615,    -1,    -1,    -1,   619,   620,   621,   622,   623,   624,
     625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,
     635,   636,   637,    -1,     5,   640,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,    -1,    -1,   185,   186,    -1,   188,   189,   190,
      -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,
     231,   232,    -1,    -1,   235,   236,   237,    -1,   239,    -1,
     241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,
      -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,    -1,   416,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,
      -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,    -1,
     461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
      -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,   490,
      -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,   507,   508,   509,   510,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
      -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,
      -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,   540,
     541,   542,   543,   544,    -1,    -1,   547,   548,   549,   550,
      -1,   552,   553,    -1,   555,    -1,   557,   558,   559,   560,
      -1,   562,   563,   564,    -1,   566,   567,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,
     601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,
     621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,
      -1,   632,   633,    -1,   635,   636,   637,    -1,     5,   640,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,    -1,    -1,
      -1,   228,   229,   230,   231,   232,    -1,    -1,   235,   236,
     237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,   256,
     257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,
      -1,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,    -1,
      -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,
     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,    -1,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,    -1,    -1,   336,
     337,    -1,   339,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,    -1,   354,   355,    -1,
      -1,   358,   359,   360,   361,    -1,    -1,    -1,   365,   366,
      -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,   392,   393,    -1,    -1,   396,
      -1,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,    -1,   416,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
      -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,
      -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,    -1,   482,   483,    -1,    -1,    -1,
     487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,
      -1,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,
      -1,   528,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,
     537,    -1,   539,   540,   541,   542,   543,   544,    -1,    -1,
     547,   548,   549,   550,    -1,   552,   553,    -1,   555,    -1,
     557,   558,   559,   560,    -1,    -1,   563,   564,    -1,   566,
     567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,
     577,    -1,    -1,    -1,   581,   582,   583,   584,    -1,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,   596,
      -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
      -1,    -1,   619,   620,   621,   622,   623,   624,   625,    -1,
      -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,
     637,    -1,     5,   640,     7,     8,     9,    10,    11,    12,
      13,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,   177,    -1,    -1,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,    -1,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
     223,   224,    -1,    -1,    -1,   228,   229,   230,   231,   232,
      -1,    -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,
      -1,    -1,    -1,   246,   247,    -1,    -1,    -1,   251,    -1,
     253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,
      -1,   264,   265,   266,    -1,    -1,   269,    -1,    -1,   272,
     273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,
      -1,   284,    -1,   286,   287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
      -1,   354,   355,    -1,    -1,   358,   359,   360,   361,    -1,
      -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,
     373,   374,    -1,   376,   377,   378,   379,    -1,   381,   382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,
     393,    -1,    -1,   396,    -1,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,    -1,   416,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,   449,   450,   451,    -1,
      -1,   454,    -1,   456,    -1,   458,   459,    -1,   461,   462,
      -1,   464,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,    -1,   482,
     483,    -1,    -1,    -1,   487,   488,   489,   490,    -1,    -1,
      -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,   507,   508,   509,   510,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,
      -1,    -1,   525,    -1,    -1,   528,   529,    -1,    -1,    -1,
     533,    -1,    -1,   536,   537,    -1,   539,   540,   541,   542,
     543,   544,    -1,    -1,   547,   548,   549,   550,    -1,   552,
     553,    -1,   555,    -1,   557,   558,   559,   560,    -1,    -1,
     563,   564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,   576,   577,    -1,    -1,    -1,   581,   582,
     583,   584,    -1,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,    -1,   596,    -1,    -1,   599,    -1,   601,    -1,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,
     623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,
     633,    -1,   635,   636,   637,    -1,     5,   640,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,   177,    -1,
      -1,   180,   181,   182,    -1,    -1,   185,   186,    -1,   188,
     189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,    -1,    -1,    -1,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,   223,   224,    -1,    -1,    -1,   228,
     229,   230,   231,   232,    -1,    -1,   235,   236,   237,    -1,
     239,    -1,   241,    -1,    -1,    -1,    -1,   246,   247,    -1,
      -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,    -1,   264,   265,   266,    -1,    -1,
     269,    -1,    -1,   272,   273,    -1,    -1,    -1,    -1,    -1,
     279,   280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,    -1,    -1,   336,   337,    -1,
     339,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,
     359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,
      -1,   370,    -1,   372,   373,   374,    -1,   376,   377,   378,
     379,    -1,   381,   382,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   391,   392,   393,    -1,    -1,   396,    -1,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,    -1,   416,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,    -1,    -1,
     429,    -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
     449,   450,   451,    -1,    -1,   454,    -1,   456,    -1,   458,
     459,    -1,   461,   462,    -1,   464,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,    -1,   482,   483,    -1,    -1,    -1,   487,   488,
     489,   490,    -1,    -1,    -1,   494,    -1,    -1,    -1,   498,
      -1,   500,   501,   502,   503,   504,   505,    -1,   507,   508,
     509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,
     529,    -1,    -1,    -1,   533,    -1,    -1,   536,   537,    -1,
     539,   540,   541,   542,   543,   544,    -1,    -1,   547,   548,
     549,   550,    -1,   552,   553,    -1,   555,    -1,   557,   558,
     559,   560,    -1,    -1,   563,   564,    -1,   566,   567,   568,
     569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,    -1,   596,    -1,    -1,
     599,    -1,   601,    -1,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,
     619,   620,   621,   622,   623,   624,   625,    -1,    -1,    -1,
      -1,    -1,    -1,   632,   633,    -1,   635,   636,   637,    -1,
       5,   640,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,   177,    -1,    -1,   180,   181,   182,    -1,    -1,
     185,   186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,   223,   224,
      -1,    -1,    -1,   228,   229,   230,   231,   232,    -1,    -1,
     235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,
      -1,   246,   247,    -1,    -1,    -1,   251,    -1,   253,   254,
      -1,   256,   257,    -1,    -1,    -1,   261,    -1,    -1,   264,
     265,   266,    -1,    -1,   269,    -1,    -1,   272,   273,    -1,
      -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,
      -1,   286,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,    -1,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,    -1,
      -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,    -1,   354,
     355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,    -1,
     365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,   379,    -1,   381,   382,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,   392,   393,    -1,
      -1,   396,    -1,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,   449,   450,   451,    -1,    -1,   454,
      -1,   456,    -1,   458,   459,    -1,   461,   462,    -1,   464,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,    -1,   482,   483,    -1,
      -1,    -1,   487,   488,   489,   490,    -1,    -1,    -1,   494,
      -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,   504,
     505,    -1,   507,   508,   509,   510,   511,   512,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,
     525,    -1,    -1,   528,   529,    -1,    -1,    -1,   533,    -1,
      -1,   536,   537,    -1,   539,   540,   541,   542,   543,   544,
      -1,    -1,   547,   548,   549,   550,    -1,   552,   553,    -1,
     555,    -1,   557,   558,   559,   560,    -1,    -1,   563,   564,
      -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,
     575,   576,   577,    -1,    -1,    -1,   581,   582,   583,   584,
      -1,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
      -1,   596,    -1,    -1,   599,    -1,   601,    -1,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,
     615,    -1,    -1,    -1,   619,   620,   621,   622,   623,   624,
     625,    -1,    -1,    -1,    -1,    -1,    -1,   632,   633,    -1,
     635,   636,   637,    -1,     5,   640,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,   177,    -1,    -1,   180,
     181,   182,    -1,    -1,   185,   186,    -1,   188,   189,   190,
      -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,    -1,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,    -1,    -1,    -1,   228,   229,   230,
     231,   232,    -1,    -1,   235,   236,   237,    -1,   239,    -1,
     241,    -1,    -1,    -1,    -1,   246,   247,    -1,    -1,    -1,
     251,    -1,   253,   254,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,    -1,   264,   265,   266,    -1,    -1,   269,    -1,
      -1,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,
      -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,   379,    -1,
     381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,   393,    -1,    -1,   396,    -1,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,    -1,   416,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,
      -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,   449,   450,
     451,    -1,    -1,   454,    -1,   456,    -1,   458,   459,    -1,
     461,   462,    -1,   464,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
      -1,   482,   483,    -1,    -1,    -1,   487,   488,   489,   490,
      -1,    -1,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,   507,   508,   509,   510,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
      -1,   522,    -1,    -1,   525,    -1,    -1,   528,   529,    -1,
      -1,    -1,   533,    -1,    -1,   536,   537,    -1,   539,   540,
     541,   542,   543,   544,    -1,    -1,   547,   548,   549,   550,
      -1,   552,   553,    -1,   555,    -1,   557,   558,   559,   560,
      -1,    -1,   563,   564,    -1,   566,   567,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,    -1,   596,    -1,    -1,   599,    -1,
     601,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,
     621,   622,   623,   624,   625,    -1,    -1,    -1,    -1,    -1,
      -1,   632,   633,    -1,   635,   636,   637,    -1,     5,   640,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
     177,    -1,    -1,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,    -1,    -1,
      -1,   228,   229,   230,   231,   232,    -1,    -1,   235,   236,
     237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,   246,
     247,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,   256,
     257,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,
      -1,    -1,   269,    -1,    -1,   272,   273,    -1,    -1,    -1,
      -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,
     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,    -1,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,    -1,    -1,   336,
     337,    -1,   339,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,    -1,   354,   355,    -1,
      -1,   358,   359,   360,   361,    -1,    -1,    -1,   365,   366,
      -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,
     377,   378,   379,    -1,   381,   382,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,   392,   393,    -1,    -1,   396,
      -1,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,    -1,   416,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
      -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,   449,   450,   451,    -1,    -1,   454,    -1,   456,
      -1,   458,   459,    -1,   461,   462,    -1,   464,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,    -1,   482,   483,    -1,    -1,    -1,
     487,   488,   489,   490,    -1,    -1,    -1,   494,    -1,    -1,
      -1,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,
      -1,   528,   529,    -1,    -1,    -1,   533,    -1,    -1,   536,
     537,    -1,   539,   540,   541,   542,   543,   544,    -1,    -1,
     547,   548,   549,   550,    -1,   552,   553,    -1,   555,    -1,
     557,   558,   559,   560,    -1,    -1,   563,   564,    -1,   566,
     567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,
     577,    -1,    -1,    -1,   581,   582,   583,   584,    -1,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,   596,
      -1,    -1,   599,    -1,   601,    -1,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
      -1,    -1,   619,   620,   621,   622,   623,   624,   625,    -1,
      -1,    -1,    -1,    -1,    -1,   632,   633,    -1,   635,   636,
     637,    -1,     5,   640,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    84,    -1,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,   152,
     153,   154,    -1,   156,   157,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,    -1,    -1,    -1,    -1,   180,   181,   182,
      -1,    -1,   185,   186,   187,   188,   189,   190,    -1,    -1,
      -1,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,
      -1,   224,    -1,    -1,    -1,   228,   229,   230,   231,   232,
     233,    -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,
      -1,    -1,    -1,   246,    -1,    -1,    -1,    -1,   251,    -1,
     253,   254,    -1,   256,   257,   258,    -1,    -1,   261,    -1,
      -1,    -1,   265,   266,    -1,    -1,   269,   270,    -1,   272,
     273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,
      -1,   284,    -1,   286,   287,    -1,    -1,    -1,    -1,   292,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
      -1,   354,   355,    -1,    -1,   358,   359,   360,   361,    -1,
      -1,    -1,    -1,   366,    -1,    -1,    -1,   370,    -1,   372,
     373,   374,    -1,   376,   377,   378,   379,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,
     393,    -1,    -1,    -1,    -1,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,
     413,   414,    -1,   416,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
     443,   444,    -1,   446,    -1,    -1,   449,    -1,   451,   452,
      -1,   454,    -1,    -1,    -1,   458,    -1,    -1,   461,   462,
      -1,   464,   465,   466,    -1,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,   480,    -1,   482,
      -1,    -1,    -1,    -1,   487,   488,   489,    -1,    -1,    -1,
      -1,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,
      -1,   504,   505,    -1,   507,    -1,   509,    -1,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,
      -1,    -1,   525,    -1,    -1,   528,    -1,    -1,    -1,    -1,
     533,    -1,    -1,    -1,   537,    -1,   539,   540,   541,   542,
     543,   544,    -1,    -1,   547,   548,   549,   550,    -1,   552,
     553,    -1,   555,    -1,   557,   558,   559,   560,    -1,    -1,
     563,   564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,   576,   577,    -1,    -1,    -1,    -1,   582,
     583,   584,    -1,   586,   587,    -1,   589,   590,    -1,    -1,
      -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,
     623,   624,   625,    -1,    -1,   628,    -1,    -1,    -1,   632,
      -1,    -1,   635,    -1,   637,    -1,     5,   640,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,    -1,    -1,   152,   153,   154,    -1,   156,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,    -1,    -1,    -1,
      -1,   180,   181,   182,    -1,    -1,   185,   186,   187,   188,
     189,   190,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,    -1,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,   228,
     229,   230,   231,   232,   233,    -1,   235,   236,   237,    -1,
     239,    -1,   241,    -1,    -1,    -1,    -1,   246,    -1,    -1,
      -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,   258,
      -1,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,
     269,   270,    -1,   272,   273,    -1,    -1,    -1,    -1,    -1,
     279,   280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,
      -1,    -1,    -1,   292,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,    -1,    -1,   336,   337,    -1,
     339,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,
     359,   360,   361,    -1,    -1,    -1,    -1,   366,    -1,    -1,
      -1,   370,    -1,   372,   373,   374,    -1,   376,   377,   378,
     379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,    -1,    -1,    -1,    -1,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,    -1,    -1,    -1,   413,   414,    -1,   416,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,    -1,    -1,
     429,    -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,   443,   444,    -1,   446,    -1,    -1,
     449,    -1,   451,   452,    -1,   454,    -1,    -1,    -1,   458,
      -1,    -1,   461,   462,    -1,   464,   465,   466,    -1,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,    -1,   482,    -1,    -1,    -1,    -1,   487,   488,
     489,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,    -1,    -1,   504,   505,    -1,   507,    -1,
     509,    -1,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,
      -1,    -1,    -1,    -1,   533,    -1,    -1,    -1,   537,    -1,
     539,   540,   541,   542,   543,   544,    -1,    -1,   547,   548,
     549,   550,    -1,   552,   553,    -1,   555,    -1,   557,   558,
     559,   560,    -1,    -1,   563,   564,    -1,   566,   567,   568,
     569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,
      -1,    -1,    -1,   582,   583,   584,    -1,   586,   587,    -1,
     589,   590,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,
     599,    -1,    -1,    -1,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,
     619,   620,   621,   622,   623,   624,   625,   626,    -1,   628,
      -1,    -1,    -1,   632,    -1,    -1,   635,    -1,   637,    -1,
       5,   640,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
      -1,   156,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,   180,   181,   182,    -1,    -1,
     185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,   224,
      -1,    -1,    -1,   228,   229,   230,   231,   232,   233,    -1,
     235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,
      -1,   246,    -1,    -1,    -1,    -1,   251,    -1,   253,   254,
      -1,   256,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,
     265,   266,    -1,    -1,   269,   270,    -1,   272,   273,    -1,
      -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,
      -1,   286,   287,    -1,    -1,    -1,    -1,   292,    -1,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,    -1,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,    -1,
      -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,    -1,   354,
     355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,    -1,
      -1,   366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,   379,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,    -1,
      -1,    -1,    -1,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,
      -1,   416,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,   443,   444,
      -1,   446,    -1,    -1,   449,    -1,   451,   452,    -1,   454,
      -1,    -1,    -1,   458,    -1,    -1,   461,   462,    -1,   464,
     465,   466,    -1,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,   479,   480,    -1,   482,    -1,    -1,
      -1,    -1,   487,   488,   489,    -1,    -1,    -1,    -1,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    -1,   504,
     505,    -1,   507,    -1,   509,    -1,   511,   512,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,
     525,    -1,    -1,   528,    -1,    -1,    -1,    -1,   533,    -1,
      -1,    -1,   537,    -1,   539,   540,   541,   542,   543,   544,
      -1,    -1,   547,   548,   549,   550,    -1,   552,   553,    -1,
     555,    -1,   557,   558,   559,   560,    -1,    -1,   563,   564,
      -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,
     575,   576,   577,    -1,    -1,    -1,    -1,   582,   583,   584,
      -1,   586,   587,    -1,   589,   590,    -1,    -1,    -1,    -1,
      -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,
     615,    -1,    -1,    -1,   619,   620,   621,   622,   623,   624,
     625,   626,    -1,   628,    -1,    -1,    -1,   632,    -1,    -1,
     635,    -1,   637,    -1,     5,   640,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,   180,
     181,   182,    -1,    -1,   185,   186,   187,   188,   189,   190,
      -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
      -1,    -1,    -1,   224,    -1,    -1,    -1,   228,   229,   230,
     231,   232,   233,    -1,   235,   236,   237,    -1,   239,    -1,
     241,    -1,    -1,    -1,    -1,   246,    -1,    -1,    -1,    -1,
     251,    -1,   253,   254,    -1,   256,   257,   258,    -1,    -1,
     261,    -1,    -1,    -1,   265,   266,    -1,    -1,   269,   270,
      -1,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,
      -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,    -1,
      -1,   292,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,
     361,    -1,    -1,    -1,    -1,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,    -1,    -1,    -1,    -1,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1,
      -1,    -1,   413,   414,    -1,   416,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,
      -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,   443,   444,    -1,   446,    -1,    -1,   449,    -1,
     451,   452,    -1,   454,    -1,    -1,    -1,   458,    -1,    -1,
     461,   462,    -1,   464,   465,   466,    -1,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,   480,
      -1,   482,    -1,    -1,    -1,    -1,   487,   488,   489,    -1,
      -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,    -1,    -1,   504,   505,    -1,   507,    -1,   509,    -1,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
      -1,   522,    -1,    -1,   525,    -1,    -1,   528,    -1,    -1,
      -1,    -1,   533,    -1,    -1,    -1,   537,    -1,   539,   540,
     541,   542,   543,   544,    -1,    -1,   547,   548,   549,   550,
      -1,   552,   553,    -1,   555,    -1,   557,   558,   559,   560,
      -1,    -1,   563,   564,    -1,   566,   567,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,
      -1,   582,   583,   584,    -1,   586,   587,    -1,   589,   590,
      -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,
      -1,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,
     621,   622,   623,   624,   625,    -1,    -1,   628,    -1,    -1,
      -1,   632,    -1,    -1,   635,    -1,   637,    -1,     5,   640,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    -1,    -1,    -1,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,    -1,
      -1,    -1,    -1,   180,   181,   182,    -1,    -1,   185,   186,
     187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
      -1,   228,   229,   230,   231,   232,   233,    -1,   235,   236,
     237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,   246,
      -1,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,   256,
     257,   258,    -1,    -1,   261,    -1,    -1,    -1,   265,   266,
      -1,    -1,   269,   270,    -1,   272,   273,    -1,    -1,    -1,
      -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,
     287,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,    -1,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,    -1,    -1,   336,
     337,    -1,   339,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,    -1,   354,   355,    -1,
      -1,   358,   359,   360,   361,    -1,    -1,    -1,    -1,   366,
      -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,
     377,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   392,   393,    -1,    -1,    -1,
      -1,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,    -1,    -1,    -1,   413,   414,    -1,   416,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
      -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,   443,   444,    -1,   446,
      -1,    -1,   449,    -1,   451,   452,    -1,   454,    -1,    -1,
      -1,   458,    -1,    -1,   461,   462,    -1,   464,   465,   466,
      -1,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,   479,   480,    -1,   482,    -1,    -1,    -1,    -1,
     487,   488,   489,    -1,    -1,    -1,    -1,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,    -1,    -1,   504,   505,    -1,
     507,    -1,   509,    -1,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,
      -1,   528,    -1,    -1,    -1,    -1,   533,    -1,    -1,    -1,
     537,    -1,   539,   540,   541,   542,   543,   544,    -1,    -1,
     547,   548,   549,   550,    -1,   552,   553,    -1,   555,    -1,
     557,   558,   559,   560,    -1,    -1,   563,   564,    -1,   566,
     567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,
     577,    -1,    -1,    -1,    -1,   582,   583,   584,    -1,   586,
     587,    -1,   589,   590,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
      -1,    -1,   619,   620,   621,   622,   623,   624,   625,    -1,
      -1,   628,    -1,    -1,    -1,   632,    -1,    -1,   635,    -1,
     637,    -1,     5,   640,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    84,    -1,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,    -1,    -1,    -1,    -1,   180,   181,   182,
      -1,    -1,   185,   186,   187,   188,   189,   190,    -1,    -1,
      -1,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,
      -1,   224,    -1,    -1,    -1,   228,   229,   230,   231,   232,
     233,    -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,
      -1,    -1,    -1,   246,    -1,    -1,    -1,    -1,   251,    -1,
     253,   254,    -1,   256,   257,   258,    -1,    -1,   261,    -1,
      -1,    -1,   265,   266,    -1,    -1,   269,   270,    -1,   272,
     273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,
      -1,   284,    -1,   286,   287,    -1,    -1,    -1,    -1,   292,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
      -1,   354,   355,    -1,    -1,   358,   359,   360,   361,    -1,
      -1,    -1,    -1,   366,    -1,    -1,    -1,   370,    -1,   372,
     373,   374,    -1,   376,   377,   378,   379,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,
     393,    -1,    -1,    -1,    -1,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,
     413,   414,    -1,   416,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
     443,   444,    -1,   446,    -1,    -1,   449,    -1,   451,   452,
      -1,   454,    -1,    -1,    -1,   458,    -1,    -1,   461,   462,
      -1,   464,   465,   466,    -1,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,   480,    -1,   482,
      -1,    -1,    -1,    -1,   487,   488,   489,    -1,    -1,    -1,
      -1,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,
      -1,   504,   505,    -1,   507,    -1,   509,    -1,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,
      -1,    -1,   525,    -1,    -1,   528,    -1,    -1,    -1,    -1,
     533,    -1,    -1,    -1,   537,    -1,   539,   540,   541,   542,
     543,   544,    -1,    -1,   547,   548,   549,   550,    -1,   552,
     553,    -1,   555,    -1,   557,   558,   559,   560,    -1,    -1,
     563,   564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,   576,   577,    -1,    -1,    -1,    -1,   582,
     583,   584,    -1,   586,   587,    -1,   589,   590,    -1,    -1,
      -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,
     623,   624,   625,    -1,    -1,   628,    -1,    -1,    -1,   632,
      -1,    -1,   635,    -1,   637,    -1,     5,   640,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,    -1,    -1,    -1,
      -1,   180,   181,   182,    -1,    -1,   185,   186,   187,   188,
     189,   190,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,    -1,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,   228,
     229,   230,   231,   232,   233,    -1,   235,   236,   237,    -1,
     239,    -1,   241,    -1,    -1,    -1,    -1,   246,    -1,    -1,
      -1,    -1,   251,    -1,   253,   254,    -1,   256,   257,   258,
      -1,    -1,   261,    -1,    -1,    -1,   265,   266,    -1,    -1,
     269,   270,    -1,   272,   273,    -1,    -1,    -1,    -1,    -1,
     279,   280,    -1,   282,    -1,   284,    -1,   286,   287,    -1,
      -1,    -1,    -1,   292,    -1,    -1,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,   315,    -1,   317,   318,
     319,   320,    -1,   322,   323,    -1,    -1,    -1,    -1,   328,
     329,   330,   331,   332,   333,    -1,    -1,   336,   337,    -1,
     339,    -1,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,    -1,   354,   355,    -1,    -1,   358,
     359,   360,   361,    -1,    -1,    -1,    -1,   366,    -1,    -1,
      -1,   370,    -1,   372,   373,   374,    -1,   376,   377,   378,
     379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   392,   393,    -1,    -1,    -1,    -1,   398,
      -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,    -1,    -1,    -1,   413,   414,    -1,   416,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,    -1,    -1,
     429,    -1,    -1,    -1,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,   443,   444,    -1,   446,    -1,    -1,
     449,    -1,   451,   452,    -1,   454,    -1,    -1,    -1,   458,
      -1,    -1,   461,   462,    -1,   464,   465,   466,    -1,    -1,
     469,    -1,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,    -1,   482,    -1,    -1,    -1,    -1,   487,   488,
     489,    -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,
      -1,    -1,   501,    -1,    -1,   504,   505,    -1,   507,    -1,
     509,    -1,   511,   512,    -1,    -1,    -1,    -1,    -1,    -1,
     519,   520,    -1,   522,    -1,    -1,   525,    -1,    -1,   528,
      -1,    -1,    -1,    -1,   533,    -1,    -1,    -1,   537,    -1,
     539,   540,   541,   542,   543,   544,    -1,    -1,   547,   548,
     549,   550,    -1,   552,   553,    -1,   555,    -1,   557,   558,
     559,   560,    -1,    -1,   563,   564,    -1,   566,   567,   568,
     569,    -1,    -1,    -1,    -1,    -1,   575,   576,   577,    -1,
      -1,    -1,    -1,   582,   583,   584,    -1,   586,   587,    -1,
     589,   590,    -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,
     599,    -1,    -1,    -1,   603,   604,   605,    -1,    -1,    -1,
      -1,    -1,    -1,   612,    -1,    -1,   615,    -1,    -1,    -1,
     619,   620,   621,   622,   623,   624,   625,    -1,    -1,   628,
      -1,    -1,    -1,   632,    -1,    -1,   635,    -1,   637,    -1,
       5,   640,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,   180,   181,   182,    -1,    -1,
     185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,   224,
      -1,    -1,    -1,   228,   229,   230,   231,   232,   233,    -1,
     235,   236,   237,    -1,   239,    -1,   241,    -1,    -1,    -1,
      -1,   246,    -1,    -1,    -1,    -1,   251,    -1,   253,   254,
      -1,   256,   257,   258,    -1,    -1,   261,    -1,    -1,    -1,
     265,   266,    -1,    -1,   269,   270,    -1,   272,   273,    -1,
      -1,    -1,    -1,    -1,   279,   280,    -1,   282,    -1,   284,
      -1,   286,   287,    -1,    -1,    -1,    -1,   292,    -1,    -1,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,    -1,   317,   318,   319,   320,    -1,   322,   323,    -1,
      -1,    -1,    -1,   328,   329,   330,   331,   332,   333,    -1,
      -1,   336,   337,    -1,   339,    -1,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,    -1,   354,
     355,    -1,    -1,   358,   359,   360,   361,    -1,    -1,    -1,
      -1,   366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,   379,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,   393,    -1,
      -1,    -1,    -1,   398,    -1,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,    -1,    -1,    -1,   413,   414,
      -1,   416,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,    -1,    -1,   429,    -1,    -1,    -1,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,   443,   444,
      -1,   446,    -1,    -1,   449,    -1,   451,   452,    -1,   454,
      -1,    -1,    -1,   458,    -1,    -1,   461,   462,    -1,   464,
     465,   466,    -1,    -1,   469,    -1,   471,   472,   473,   474,
     475,   476,   477,    -1,   479,   480,    -1,   482,    -1,    -1,
      -1,    -1,   487,   488,   489,    -1,    -1,    -1,    -1,   494,
      -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    -1,   504,
     505,    -1,   507,    -1,   509,    -1,   511,   512,    -1,    -1,
      -1,    -1,    -1,    -1,   519,   520,    -1,   522,    -1,    -1,
     525,    -1,    -1,   528,    -1,    -1,    -1,    -1,   533,    -1,
      -1,    -1,   537,    -1,   539,   540,   541,   542,   543,   544,
      -1,    -1,   547,   548,   549,   550,    -1,   552,   553,    -1,
     555,    -1,   557,   558,   559,   560,    -1,    -1,   563,   564,
      -1,   566,   567,   568,   569,    -1,    -1,    -1,    -1,    -1,
     575,   576,   577,    -1,    -1,    -1,    -1,   582,   583,   584,
      -1,   586,   587,    -1,   589,   590,    -1,    -1,    -1,    -1,
      -1,   596,    -1,    -1,   599,    -1,    -1,    -1,   603,   604,
     605,    -1,    -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,
     615,    -1,    -1,    -1,   619,   620,   621,   622,   623,   624,
     625,    -1,    -1,   628,    -1,    -1,    -1,   632,    -1,    -1,
     635,    -1,   637,    -1,     5,   640,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,    -1,
     161,    -1,   163,   164,   165,    -1,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,   180,
     181,   182,    -1,    -1,   185,   186,   187,   188,   189,   190,
      -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
      -1,    -1,    -1,   224,    -1,    -1,    -1,   228,   229,   230,
     231,   232,   233,    -1,   235,   236,   237,    -1,   239,    -1,
     241,    -1,    -1,    -1,    -1,   246,    -1,    -1,    -1,    -1,
     251,    -1,   253,   254,    -1,   256,   257,   258,    -1,    -1,
     261,    -1,    -1,    -1,   265,   266,    -1,    -1,   269,   270,
      -1,   272,   273,    -1,    -1,    -1,    -1,    -1,   279,   280,
      -1,   282,    -1,   284,    -1,   286,   287,    -1,    -1,    -1,
      -1,   292,    -1,    -1,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,    -1,   317,   318,   319,   320,
      -1,   322,   323,    -1,    -1,    -1,    -1,   328,   329,   330,
     331,   332,   333,    -1,    -1,   336,   337,    -1,   339,    -1,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,    -1,   354,   355,    -1,    -1,   358,   359,   360,
     361,    -1,    -1,    -1,    -1,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,   393,    -1,    -1,    -1,    -1,   398,    -1,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1,
      -1,    -1,   413,   414,    -1,   416,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,    -1,    -1,   429,    -1,
      -1,    -1,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,   443,   444,    -1,   446,    -1,    -1,   449,    -1,
     451,   452,    -1,   454,    -1,    -1,    -1,   458,    -1,    -1,
     461,   462,    -1,   464,   465,   466,    -1,    -1,   469,    -1,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,   480,
      -1,   482,    -1,    -1,    -1,    -1,   487,   488,   489,    -1,
      -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,    -1,    -1,
     501,    -1,    -1,   504,   505,    -1,   507,    -1,   509,    -1,
     511,   512,    -1,    -1,    -1,    -1,    -1,    -1,   519,   520,
      -1,   522,    -1,    -1,   525,    -1,    -1,   528,    -1,    -1,
      -1,    -1,   533,    -1,    -1,    -1,   537,    -1,   539,   540,
     541,   542,   543,   544,    -1,    -1,   547,   548,   549,   550,
      -1,   552,   553,    -1,   555,    -1,   557,   558,   559,   560,
      -1,    -1,   563,   564,    -1,   566,   567,   568,   569,    -1,
      -1,    -1,    -1,    -1,   575,   576,   577,    -1,    -1,    -1,
      -1,   582,   583,   584,    -1,   586,   587,    -1,   589,   590,
      -1,    -1,    -1,    -1,    -1,   596,    -1,    -1,   599,    -1,
      -1,    -1,   603,   604,   605,    -1,    -1,    -1,    -1,    -1,
      -1,   612,    -1,    -1,   615,    -1,    -1,    -1,   619,   620,
     621,   622,   623,   624,   625,    -1,    -1,   628,    -1,    -1,
      -1,   632,    -1,    -1,   635,    -1,   637,    -1,     5,   640,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    -1,    -1,    -1,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,    -1,   161,    -1,   163,   164,   165,    -1,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,    -1,
      -1,    -1,    -1,   180,   181,   182,    -1,    -1,   185,   186,
     187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
      -1,   228,   229,   230,   231,   232,   233,    -1,   235,   236,
     237,    -1,   239,    -1,   241,    -1,    -1,    -1,    -1,   246,
      -1,    -1,    -1,    -1,   251,    -1,   253,   254,    -1,   256,
     257,   258,    -1,    -1,   261,    -1,    -1,    -1,   265,   266,
      -1,    -1,   269,   270,    -1,   272,   273,    -1,    -1,    -1,
      -1,    -1,   279,   280,    -1,   282,    -1,   284,    -1,   286,
     287,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,    -1,   312,   313,   314,   315,    -1,
     317,   318,   319,   320,    -1,   322,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,   332,   333,    -1,    -1,   336,
     337,    -1,   339,    -1,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,    -1,   354,   355,    -1,
      -1,   358,   359,   360,   361,    -1,    -1,    -1,    -1,   366,
      -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,
     377,   378,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   392,   393,    -1,    -1,    -1,
      -1,   398,    -1,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,    -1,    -1,    -1,   413,   414,    -1,   416,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
      -1,    -1,   429,    -1,    -1,    -1,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,   443,   444,    -1,   446,
      -1,    -1,   449,    -1,   451,   452,    -1,   454,    -1,    -1,
      -1,   458,    -1,    -1,   461,   462,    -1,   464,   465,   466,
      -1,    -1,   469,    -1,   471,   472,   473,   474,   475,   476,
     477,    -1,   479,   480,    -1,   482,    -1,    -1,    -1,    -1,
     487,   488,   489,    -1,    -1,    -1,    -1,   494,    -1,    -1,
      -1,    -1,    -1,    -1,   501,    -1,    -1,   504,   505,    -1,
     507,    -1,   509,    -1,   511,   512,    -1,    -1,    -1,    -1,
      -1,    -1,   519,   520,    -1,   522,    -1,    -1,   525,    -1,
      -1,   528,    -1,    -1,    -1,    -1,   533,    -1,    -1,    -1,
     537,    -1,   539,   540,   541,   542,   543,   544,    -1,    -1,
     547,   548,   549,   550,    -1,   552,   553,    -1,   555,    -1,
     557,   558,   559,   560,    -1,    -1,   563,   564,    -1,   566,
     567,   568,   569,    -1,    -1,    -1,    -1,    -1,   575,   576,
     577,    -1,    -1,    -1,    -1,   582,   583,   584,    -1,   586,
     587,    -1,   589,   590,    -1,    -1,    -1,    -1,    -1,   596,
      -1,    -1,   599,    -1,    -1,    -1,   603,   604,   605,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,   615,    -1,
      -1,    -1,   619,   620,   621,   622,   623,   624,   625,    -1,
      -1,   628,    -1,    -1,    -1,   632,    -1,    -1,   635,    -1,
     637,    -1,     5,   640,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    66,    67,    68,    69,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    84,    -1,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,    -1,   161,    -1,
     163,   164,   165,    -1,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,    -1,    -1,    -1,    -1,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
      -1,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,
      -1,   224,    -1,    -1,    -1,   228,   229,   230,   231,   232,
      -1,    -1,   235,   236,   237,    -1,   239,    -1,   241,    -1,
      -1,    -1,    -1,   246,    -1,    -1,    -1,    -1,   251,    -1,
     253,   254,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,
      -1,    -1,   265,   266,    -1,    -1,   269,    -1,    -1,   272,
     273,    -1,    -1,    -1,    -1,    -1,   279,   280,    -1,   282,
      -1,   284,    -1,   286,   287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,    -1,   317,   318,   319,   320,    -1,   322,
     323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,   332,
     333,    -1,    -1,   336,   337,    -1,   339,    -1,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
      -1,   354,   355,    -1,    -1,   358,   359,   360,   361,    -1,
      -1,    -1,    -1,   366,    -1,    -1,    -1,   370,    -1,   372,
     373,   374,    -1,   376,   377,   378,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,
     393,    -1,    -1,    -1,    -1,   398,    -1,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,
     413,   414,    -1,   416,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,    -1,    -1,   429,    -1,    -1,    -1,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
     443,   444,    -1,   446,    -1,    -1,   449,    -1,   451,    -1,
      -1,   454,    -1,    -1,    -1,   458,    -1,    -1,   461,   462,
      -1,   464,    -1,   466,    -1,    -1,   469,    -1,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,   480,    -1,   482,
      -1,    -1,    -1,    -1,   487,   488,   489,    -1,    -1,    -1,
      -1,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,
      -1,   504,   505,    -1,   507,    -1,   509,    -1,   511,   512,
      -1,    -1,    -1,    -1,    -1,    -1,   519,   520,    -1,   522,
      -1,    -1,   525,    -1,    -1,   528,    -1,    -1,    -1,    -1,
     533,    -1,    -1,    -1,   537,    -1,   539,   540,   541,   542,
     543,   544,    -1,    -1,   547,   548,   549,   550,    -1,   552,
     553,    -1,   555,    -1,   557,   558,   559,   560,    -1,    -1,
     563,   564,    -1,   566,   567,   568,   569,    -1,    -1,    -1,
      -1,    -1,   575,   576,   577,    -1,    -1,    -1,    -1,   582,
     583,   584,    -1,   586,   587,    -1,   589,   590,    -1,    -1,
      -1,    -1,    -1,   596,    -1,    -1,   599,    -1,    -1,    -1,
     603,   604,   605,    -1,    -1,    -1,    -1,    -1,    -1,   612,
      -1,    -1,   615,    -1,    -1,    -1,   619,   620,   621,   622,
     623,   624,   625,    -1,    -1,    -1,    -1,    -1,    -1,   632,
      -1,    -1,   635,    -1,   637,    -1,    -1,   640
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    14,    16,    33,    37,    51,    52,    59,    64,    65,
      85,   104,   128,   136,   137,   138,   149,   150,   162,   177,
     193,   208,   210,   215,   219,   245,   247,   263,   281,   285,
     380,   397,   399,   412,   423,   445,   448,   450,   453,   456,
     457,   467,   470,   478,   484,   492,   497,   498,   499,   529,
     536,   581,   593,   597,   600,   606,   636,   642,   652,   663,
     666,   667,   668,   669,   670,   672,   677,   679,   688,   721,
     749,   756,   757,   876,   965,  1051,  1098,  1101,  1111,  1114,
    1119,  1132,  1133,  1138,  1141,  1146,  1153,  1165,  1166,  1335,
    1337,  1348,  1351,  1376,  1384,  1397,  1404,  1418,  1422,  1425,
    1435,  1441,  1445,  1450,  1451,  1452,  1504,  1531,  1537,  1539,
    1546,  1549,  1583,  1589,  1590,  1591,  1592,  1645,  1653,  1654,
    1655,    12,   115,   133,   201,   286,   417,   490,   553,  1052,
    1614,  1615,  1616,  1619,   282,   367,  1140,  1584,   562,  1494,
     238,     5,     7,     8,     9,    10,    11,    12,    15,    19,
      22,    24,    25,    26,    27,    28,    29,    30,    31,    33,
      37,    41,    44,    45,    46,    48,    50,    51,    54,    57,
      58,    60,    61,    63,    64,    66,    67,    68,    69,    70,
      71,    72,    74,    75,    76,    77,    78,    79,    80,    82,
      83,    84,    85,    86,    87,    88,    89,    91,    92,    94,
      95,    96,    97,    98,   100,   103,   106,   108,   111,   113,
     117,   118,   119,   122,   127,   128,   133,   135,   139,   141,
     142,   143,   144,   145,   149,   152,   153,   154,   158,   160,
     161,   163,   164,   165,   168,   169,   171,   172,   173,   174,
     175,   176,   177,   180,   181,   182,   185,   186,   188,   189,
     190,   193,   197,   199,   201,   203,   204,   205,   206,   207,
     209,   211,   215,   216,   217,   219,   223,   224,   228,   229,
     230,   231,   232,   235,   236,   237,   239,   241,   246,   247,
     251,   253,   254,   256,   257,   261,   264,   265,   266,   269,
     272,   273,   279,   280,   282,   284,   286,   287,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   312,   313,   314,   315,   317,   318,
     319,   320,   322,   323,   328,   329,   330,   331,   332,   333,
     336,   337,   339,   341,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   354,   355,   358,   359,   360,   361,   365,
     366,   370,   372,   373,   374,   376,   377,   378,   379,   381,
     382,   391,   392,   393,   396,   398,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   412,   413,   414,   416,
     418,   419,   420,   421,   422,   424,   425,   426,   429,   433,
     434,   435,   436,   437,   440,   441,   442,   443,   444,   446,
     447,   449,   450,   451,   454,   456,   458,   459,   461,   462,
     464,   466,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   482,   483,   487,   488,   489,   490,
     494,   498,   500,   501,   502,   503,   504,   505,   507,   508,
     509,   510,   511,   512,   519,   520,   522,   525,   528,   529,
     533,   536,   537,   539,   540,   541,   542,   543,   544,   547,
     548,   549,   550,   552,   553,   555,   557,   558,   559,   560,
     563,   564,   566,   567,   568,   569,   575,   576,   577,   581,
     582,   583,   584,   586,   587,   589,   590,   592,   593,   596,
     599,   601,   603,   604,   605,   612,   615,   619,   620,   621,
     622,   623,   624,   625,   632,   633,   635,   636,   637,   640,
     715,  1493,  1497,  1502,  1503,   312,   552,   556,  1533,  1533,
     632,  1585,   115,   200,   286,   469,   490,   513,   553,   559,
     595,   603,   697,   698,   927,   928,   929,  1028,  1029,  1030,
    1385,  1336,   115,   173,   201,   238,   286,   417,   469,   490,
     553,   559,   578,   603,   620,  1347,  1497,  1140,   108,   758,
     714,   660,  1490,  1492,  1497,   678,  1349,   406,   510,  1446,
     118,   238,   637,  1457,  1533,  1140,   652,   877,  1497,  1442,
     478,   603,  1533,  1140,  1352,  1436,   516,   746,   750,   751,
    1497,   714,  1585,  1497,  1169,  1171,  1172,  1505,  1405,   750,
      13,   502,   575,    13,   502,   556,  1399,   406,   510,  1538,
    1377,  1497,    33,    85,   160,   412,   434,   470,   529,  1647,
     484,   652,  1167,     0,   162,   664,   412,   181,   400,  1423,
    1490,  1497,   166,  1063,  1497,   166,   715,   212,   715,   274,
    1494,  1497,  1499,   822,   823,   826,   849,  1497,  1090,  1091,
     173,  1058,  1614,  1533,  1585,  1147,   722,   660,   686,   687,
    1494,  1112,  1134,    18,  1586,   233,   930,   212,   714,  1499,
     824,   849,   714,   387,  1611,  1615,  1616,  1617,  1618,  1619,
     556,   928,   238,   238,   238,   234,   293,   426,  1395,  1396,
       8,    22,    30,    36,    38,    39,    40,    42,    55,    56,
      61,    62,    71,    74,    76,    77,    78,    79,    80,    97,
     101,   102,   107,   109,   110,   114,   115,   120,   121,   122,
     127,   129,   132,   178,   183,   184,   191,   205,   207,   213,
     220,   221,   228,   233,   245,   248,   266,   271,   279,   290,
     316,   321,   332,   336,   338,   342,   343,   344,   345,   346,
     353,   362,   363,   364,   368,   369,   374,   395,   402,   407,
     408,   410,   424,   452,   453,   466,   468,   475,   476,   482,
     534,   535,   541,   545,   546,   551,   562,   566,   567,   568,
     569,   579,   580,   581,   585,   588,   603,   608,   609,   610,
     611,   616,   618,   624,   625,   640,   645,   646,   651,   652,
     655,   656,   659,   660,  1188,  1189,  1190,  1191,  1195,  1202,
    1203,  1204,  1205,  1206,  1207,  1215,  1219,  1232,  1476,  1478,
    1480,  1481,  1482,  1486,  1488,  1493,  1497,   233,  1346,  1346,
    1346,  1346,   212,  1346,   714,  1346,   849,  1346,   714,  1346,
    1533,   673,  1426,   141,    13,    14,   104,   110,   136,   150,
     173,   177,   188,   210,   238,   245,   285,   418,   422,   438,
     446,   454,   484,   497,   498,   547,   578,   600,   602,  1499,
    1550,  1554,  1555,  1557,  1559,  1560,  1497,   379,    70,   430,
     660,  1499,   134,   222,   293,  1354,  1497,  1494,   216,   509,
    1447,   249,  1453,  1532,  1533,   966,  1182,    49,   878,   198,
      36,   312,  1410,  1443,  1497,   714,  1142,  1533,   134,   293,
    1355,  1383,   312,   425,   502,  1437,  1438,   612,   747,   492,
     752,     7,    13,   422,  1547,  1548,  1555,  1557,   573,  1586,
    1170,    13,   146,   222,   518,   519,   520,   521,   522,   523,
     538,  1176,  1177,  1178,  1610,    61,    62,   132,   209,   282,
     349,   402,   469,   489,   575,   659,   991,  1497,  1506,  1518,
    1522,  1523,    13,    25,    37,    61,    69,    74,   100,   102,
     104,   116,   164,   169,   172,   199,   201,   209,   211,   237,
     238,   239,   260,   282,   312,   379,   405,   416,   417,   420,
     421,   441,   489,   502,   537,   555,   556,   604,   623,   991,
    1027,  1406,  1410,  1411,  1413,  1422,  1519,   752,   503,   686,
     430,   629,  1102,  1103,  1104,   503,   686,  1398,  1497,  1494,
    1533,  1383,    38,   220,   221,   562,  1477,  1495,  1646,  1646,
    1646,  1646,  1646,  1171,  1167,   653,   658,  1497,  1420,  1419,
     330,   560,   587,  1054,   601,   109,  1499,  1500,  1501,  1554,
    1056,   828,   850,  1497,  1055,   381,     6,    59,   150,   363,
     429,   431,   851,   556,   234,   378,  1092,  1093,  1094,   715,
     524,  1620,  1621,  1057,  1120,  1148,  1149,  1150,  1151,  1490,
     652,   723,  1497,   573,  1341,  1342,  1490,  1341,    58,   365,
     365,   445,  1587,   362,   363,  1194,  1497,   827,   850,  1553,
    1555,   195,     6,  1500,  1501,  1570,  1574,   453,    11,   417,
     578,   701,  1182,  1613,  1621,  1629,  1633,  1634,  1640,   701,
    1182,  1612,  1621,  1629,  1634,  1640,  1614,  1619,   930,   930,
     930,   930,   198,  1386,  1392,  1393,  1497,  1395,   652,   652,
     652,  1202,   652,   652,   652,  1188,  1235,   652,   652,   652,
     652,   652,   652,   652,   652,   652,   652,   652,   652,   652,
     652,  1187,  1187,  1187,   652,  1186,   652,   652,   652,   562,
     652,   652,   652,   652,   652,   652,   652,   652,   652,   652,
     652,   652,  1188,   652,   652,   652,   652,  1233,  1234,  1486,
    1497,   652,   652,   652,   652,   652,   652,   652,   652,   652,
    1188,  1186,   652,   652,   652,   652,   652,   652,   652,   652,
     652,   652,   652,   652,   652,   652,   652,   652,   652,   652,
    1186,   562,   652,   652,   652,   562,   652,   652,   652,    38,
     220,   221,   562,   990,   652,  1187,  1186,  1186,   652,   652,
     652,   652,   652,   652,  1202,  1202,  1202,  1188,  1605,  1606,
    1497,  1220,  1497,    17,    18,   384,   387,   638,  1192,  1193,
     166,   167,   202,   214,   255,   267,   294,   356,  1196,    34,
     147,   252,   275,   342,   439,   495,   496,   511,   643,   644,
     645,   646,   647,   648,   649,   650,  1194,  1202,    73,   386,
     654,  1495,   652,   660,   178,  1497,   715,  1497,  1497,   850,
     715,  1553,  1499,   860,  1411,   715,  1500,  1569,  1340,  1346,
     607,   674,    36,    69,   139,   164,   168,   203,   224,   239,
     287,   312,   416,   425,   440,   458,   502,   505,   533,   555,
     604,  1427,  1431,  1432,  1533,    90,   659,   759,   760,   761,
     762,  1497,   416,  1558,   472,   472,   553,   559,   603,   620,
    1187,   382,  1562,   552,   375,  1564,    68,   502,  1561,   116,
     620,  1563,   573,   375,   654,    20,   166,  1287,  1288,  1540,
    1497,   234,  1089,   510,    91,   425,  1448,    51,    89,   293,
    1459,  1490,  1534,  1535,  1139,   653,  1188,   277,   280,   427,
     879,   881,   659,   671,  1494,   287,  1143,  1500,  1144,  1145,
    1490,  1115,   249,  1343,  1356,  1357,  1490,    51,  1439,   654,
    1495,    57,    67,    82,    94,    95,    96,   113,   331,   348,
     480,   540,   558,   753,   755,   382,  1558,   375,   198,   375,
     478,  1588,  1587,   594,  1593,  1594,   647,  1180,  1181,  1182,
    1178,   492,   660,    36,   132,   166,   493,   992,   993,  1367,
    1499,   196,  1367,  1499,  1508,   659,  1499,    36,   132,   995,
     996,  1499,   660,  1509,  1507,  1367,   503,   172,   275,   627,
    1417,   652,   115,   173,   201,   417,   556,   578,   620,  1417,
      13,   939,  1499,   276,  1306,  1308,   198,   252,  1412,  1414,
      72,   533,   196,   533,   552,   510,    72,   533,    13,    44,
      98,   103,   254,   329,   393,   512,   549,  1400,  1401,  1402,
     686,   224,   533,   687,   533,  1306,  1417,  1414,   287,   163,
      75,   419,   552,   577,   196,   533,   615,  1105,  1106,  1105,
     377,   634,    92,   654,  1105,  1105,  1342,  1089,   654,   376,
    1649,   548,  1650,   259,   461,  1648,   653,  1594,  1596,  1598,
    1599,   162,   665,  1165,  1348,  1351,  1376,  1384,  1421,  1424,
    1477,  1497,   132,   925,   926,   936,   937,  1000,   118,  1187,
     659,   716,     6,   829,   716,   652,   117,   846,   846,   846,
       4,  1490,  1094,  1059,   483,   620,  1621,  1121,  1122,  1342,
     252,   654,   399,  1159,  1161,  1162,   724,   725,  1188,   680,
     181,   426,   654,  1113,    60,   181,   185,   196,   328,   426,
    1135,  1136,  1137,    58,   445,   178,   696,   829,   629,   654,
    1551,   118,   846,   231,   654,  1182,  1182,  1182,   173,   201,
     201,  1621,  1490,  1497,  1497,  1497,  1344,  1345,  1490,  1491,
    1497,   654,  1389,   660,  1394,  1188,  1188,    13,   146,  1227,
    1289,  1227,  1227,  1227,   626,  1237,  1188,  1188,  1232,  1232,
    1188,  1188,  1188,  1188,  1200,  1201,  1188,  1188,  1188,  1188,
     146,  1227,  1289,   653,   129,   191,   220,   290,   369,   585,
     653,  1315,  1318,  1319,   653,  1188,  1188,  1188,  1188,  1486,
    1605,   123,   124,   125,   126,   127,   225,   226,   227,   228,
     332,   334,   335,   336,   343,   424,   481,   482,   624,   639,
     640,  1284,  1285,  1232,   119,   122,   566,   569,  1286,   146,
    1222,  1188,  1188,  1188,  1188,  1284,  1232,  1188,  1232,  1234,
      10,   654,   660,   146,  1227,  1188,  1188,   146,  1227,  1188,
    1188,  1232,  1232,  1232,  1188,  1188,  1188,  1232,  1191,  1188,
    1188,  1188,  1188,  1188,  1188,   653,  1188,  1227,  1227,  1188,
    1188,   146,  1227,  1188,  1285,  1285,  1188,    47,   268,   574,
    1188,  1188,   653,  1487,  1488,  1497,  1227,  1227,  1188,  1188,
    1188,   653,   654,   653,   484,   652,  1602,  1603,  1188,   659,
    1221,  1499,   660,  1188,  1188,  1188,  1190,   184,   368,   580,
     596,  1194,    13,    19,  1190,  1197,  1191,  1191,   652,  1202,
    1191,  1191,  1191,  1191,   275,  1191,  1191,   248,  1191,   248,
    1191,  1191,  1191,  1191,  1191,    34,   252,   275,   439,  1499,
    1202,  1188,  1208,  1497,   660,   375,   860,   366,   622,   861,
     862,   164,   654,  1341,  1338,   659,   675,   676,   287,   287,
     287,   287,    51,   287,   686,   287,   654,  1428,   122,   566,
     569,   754,   764,  1219,  1480,  1486,  1499,   654,   166,   552,
     652,  1575,  1500,  1575,  1575,  1575,  1570,   201,   417,   556,
    1556,   173,   177,   188,   418,   446,   454,   498,   547,  1560,
    1497,   189,   359,  1497,  1541,  1542,  1356,  1494,   229,   603,
    1188,  1449,  1154,   282,  1458,  1288,   654,  1341,  1183,    75,
     652,   885,   886,   885,   886,   400,   888,   217,   262,  1499,
      32,   573,  1444,   654,   573,   654,   573,  1341,  1357,  1353,
     399,  1251,  1252,   686,  1438,   654,   166,   196,   654,  1500,
    1501,  1571,   201,   417,  1556,  1497,    13,   146,  1601,   654,
    1173,  1188,  1484,  1497,  1497,    73,   998,  1188,  1500,   374,
     402,   562,  1529,   256,   430,  1524,  1525,  1526,  1527,   209,
     282,   489,  1520,  1367,  1497,   575,  1510,  1521,  1523,   654,
    1512,    13,    36,   132,   375,  1188,  1530,   533,   252,  1415,
    1494,  1188,   647,   930,   715,   715,   715,  1490,   715,  1490,
     287,   347,   533,  1409,  1409,   290,   369,   473,   585,  1309,
    1310,  1478,  1497,  1417,  1497,   715,  1417,  1501,  1412,  1417,
    1494,   715,  1417,   253,   550,   186,   196,  1403,   654,   172,
     533,  1412,  1490,  1414,  1412,  1412,  1188,  1417,  1417,  1100,
     444,   525,  1107,  1108,  1099,   507,  1104,   484,   652,   656,
    1238,  1239,  1240,  1241,  1242,  1253,  1254,  1268,  1477,   404,
    1651,   385,  1302,  1308,  1600,   926,    73,   991,   142,  1499,
      83,    97,   264,   340,   365,   428,   524,   718,   720,   435,
     589,   847,   848,   241,   843,   844,   845,   852,   860,   862,
     115,   223,   391,   402,   409,   508,   603,   699,   700,  1494,
      26,   320,   837,   838,   839,   852,   853,   854,   860,   862,
     830,   831,   837,  1053,   375,   709,  1060,   133,   251,  1490,
     654,   403,  1123,   132,  1152,  1497,  1150,  1490,   875,  1161,
     238,   262,  1025,  1163,   653,   654,   235,   295,   297,   298,
     299,   300,   301,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   313,   314,   315,   442,   443,   681,   682,   685,
    1342,   601,  1136,   924,   925,    83,   360,   436,   590,   840,
     841,   842,   852,   856,   857,   858,   859,   860,   862,     7,
    1555,   633,   606,   825,    49,   619,   629,  1572,  1574,   201,
     715,   715,   930,   715,  1497,   689,  1031,  1032,  1031,  1031,
     654,  1390,  1251,   660,  1394,  1393,   198,   647,  1497,   654,
     653,  1227,   653,  1228,   653,   653,   653,  1188,   156,   626,
    1236,    20,   653,   607,   653,   653,   653,   654,   653,   654,
     653,   654,   654,   654,   654,   607,   654,  1216,   653,   647,
     653,   654,   654,   653,   653,   653,   653,   198,   653,   654,
    1218,   653,   654,   654,   654,   646,   653,   654,   653,   653,
     652,  1486,  1497,  1227,   653,   653,   653,  1227,   653,   654,
     653,   653,   653,   653,   653,   653,   654,   653,   252,   653,
     654,   654,   653,   654,   654,   653,   653,   653,   654,   198,
     654,  1227,   653,   653,   654,   654,   654,   653,   198,  1188,
     198,  1188,   198,  1188,   198,   653,   654,   653,   653,   653,
     653,   654,    20,   273,   654,  1015,   653,  1232,  1258,  1259,
    1260,   484,   652,  1168,  1597,  1598,   594,  1607,   657,  1520,
     493,  1497,   184,   368,   580,   596,   652,    18,  1188,  1605,
     171,  1294,  1191,  1188,  1188,  1191,   652,  1202,  1191,  1182,
    1212,  1213,  1214,   652,   660,  1497,  1490,   861,  1367,  1368,
    1500,    53,   460,  1095,  1341,  1499,   654,   686,  1432,  1341,
    1433,   762,   765,   766,   761,   370,   476,   763,  1497,  1576,
    1577,   573,   629,  1552,   647,  1490,  1497,  1568,  1568,  1568,
     166,   189,   202,   214,   265,   267,   294,   359,   414,  1543,
    1545,   627,  1290,  1350,  1500,  1155,  1156,  1157,  1158,  1490,
     240,   293,   430,   634,  1536,  1535,   652,  1182,  1315,   544,
     889,   880,   652,  1188,  1494,  1500,  1500,  1145,  1490,   181,
     426,   605,  1116,  1117,  1118,   484,   492,   611,   612,   652,
     920,  1358,  1361,   652,    13,  1440,   755,   754,  1555,   210,
     198,   654,  1568,  1568,  1568,  1595,  1181,   198,   249,  1174,
    1175,  1301,  1302,  1330,  1183,  1183,   660,   132,   997,   999,
    1499,  1367,   652,   652,   273,   377,   634,   654,   654,   660,
     660,   660,  1523,  1188,  1524,  1511,  1367,  1513,  1514,  1494,
     198,  1416,   653,  1497,   176,   473,   373,   654,  1417,   425,
    1306,  1402,  1415,  1417,  1412,  1490,  1417,  1417,   654,   599,
    1109,  1267,  1497,   105,   242,   259,   271,   352,   468,   538,
    1249,  1250,   492,   654,  1490,  1267,   654,   196,  1652,    49,
    1306,  1368,  1368,   350,  1494,   524,   524,   524,   524,   524,
     483,  1494,  1494,  1368,   654,   845,  1494,  1494,  1494,  1494,
     129,   191,   220,   290,   369,   585,  1314,  1494,  1494,   653,
     654,  1368,  1368,   654,   839,   832,   833,   852,   853,   854,
       6,    12,    14,    16,    27,    29,    59,    64,    65,    71,
      83,    91,   101,   118,   135,   143,   144,   150,   158,   164,
     175,   194,   236,   238,   246,   261,   285,   319,   337,   341,
     380,   385,   392,   394,   399,   402,   433,   447,   448,   449,
     450,   474,   530,   531,   532,   537,   553,   557,   576,   581,
     594,   873,   932,   934,   936,   937,  1064,  1068,  1070,  1073,
    1079,  1080,  1081,  1086,  1087,  1298,  1493,    87,   479,   448,
    1061,  1622,  1122,   196,  1160,   652,  1188,   166,   166,   166,
     166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   166,   166,   166,   654,  1368,
    1368,  1368,  1368,   654,   842,  1501,  1499,   286,   182,   834,
     835,   836,   852,   853,   854,   855,   858,   859,   860,   862,
     402,   562,  1499,  1497,  1641,     9,    32,   820,   715,   652,
     464,   275,   652,   864,   867,   931,   933,   934,   583,   607,
    1039,   375,   375,   375,  1345,  1497,   607,  1387,  1497,  1239,
     660,  1394,   248,  1188,   653,  1188,   565,  1188,  1188,   160,
      36,    62,   119,   122,   130,   148,   250,   354,   500,   569,
     598,  1229,   992,  1201,  1188,  1200,  1232,  1188,  1188,   992,
    1229,  1232,   653,   248,   248,  1188,  1188,  1232,  1188,  1188,
    1188,  1188,  1188,  1191,   653,   653,  1188,  1188,  1188,  1188,
    1188,  1188,  1232,   248,  1188,  1188,  1188,   653,  1188,  1188,
    1188,  1188,   198,  1188,   198,  1188,   198,  1188,  1188,  1188,
      36,    62,  1010,  1011,  1012,  1013,  1014,  1315,  1314,   653,
     653,  1608,  1609,  1610,  1259,  1168,   653,  1601,  1499,  1188,
    1605,  1190,   653,   654,   653,  1202,  1284,  1284,    18,  1188,
    1605,  1294,  1188,   653,   654,  1231,  1232,  1497,  1339,   938,
    1499,  1095,   676,  1429,   166,   654,   653,   654,  1570,     7,
     660,   660,   573,   573,   573,  1544,  1291,  1307,  1308,  1358,
     654,  1159,  1161,   562,  1496,   634,   282,    89,   882,   883,
     884,  1497,   894,  1191,    49,   652,   896,   886,   882,   573,
    1117,   921,  1359,   652,  1364,  1369,  1364,   653,   920,  1360,
    1483,  1484,  1487,  1497,  1362,  1283,  1497,   166,   382,  1569,
    1501,   198,   198,   198,  1166,   151,  1239,  1331,   196,   285,
    1179,  1330,  1307,  1175,    20,  1184,  1494,  1497,   647,  1497,
    1529,   562,   562,   430,   451,   487,  1528,  1526,  1525,  1367,
    1512,  1530,   654,  1516,  1518,  1522,   129,   191,   290,   369,
     585,  1316,  1407,   169,   623,  1310,  1311,   176,  1310,  1310,
     369,  1416,  1290,  1412,  1108,   296,   685,  1110,  1255,  1262,
    1267,  1238,   259,   259,   388,  1269,   271,   468,  1249,  1269,
    1238,  1379,  1380,  1487,  1240,  1251,  1264,  1265,  1314,   333,
    1303,   999,   993,   118,   118,   133,   251,   220,   290,   369,
     585,   863,  1317,  1318,  1493,   845,   700,   863,   863,   839,
     654,   833,    81,    93,   399,   948,   955,   956,  1023,  1025,
    1029,  1030,  1088,  1368,  1088,   399,  1368,  1368,  1088,  1368,
     399,   399,  1368,  1368,   573,   142,  1368,   260,   553,   195,
     399,   415,  1025,  1088,   260,  1368,   399,   553,   142,  1368,
    1368,  1368,  1368,  1368,  1088,   399,    49,  1368,  1368,   875,
    1368,   399,   401,    20,   166,   573,  1097,   399,   399,  1368,
    1368,  1368,  1368,   145,   329,  1497,  1368,  1368,   399,  1368,
     932,   654,   872,   873,  1068,   652,   660,   947,   957,  1489,
    1497,  1367,   363,   413,    24,   174,   703,   573,   143,   158,
     705,   652,  1623,    13,    75,  1124,   652,   415,  1280,  1281,
    1282,  1497,   652,  1314,  1494,  1494,  1316,  1494,  1314,  1494,
    1494,  1494,  1494,  1494,  1494,  1494,  1314,  1314,  1494,   111,
     365,   504,  1481,  1494,  1314,   682,  1494,  1315,   863,   863,
     842,   381,   212,  1368,   654,   836,   562,    20,   607,  1573,
     464,   652,   136,   245,   600,   821,   702,  1635,   130,   250,
     432,   539,   943,  1490,   275,   920,   944,   945,   946,   947,
     948,   871,   872,   654,   933,    48,   217,   477,  1044,  1044,
    1490,  1490,  1490,   660,  1239,  1290,  1394,  1290,  1188,   653,
    1188,   565,   652,   982,   983,   983,   983,   652,   977,   978,
     982,  1230,   983,   250,   983,   250,   653,   653,   653,    20,
    1198,   653,    20,   653,   653,   653,  1217,  1188,  1188,   653,
     653,   385,  1224,   654,   654,   653,   654,   653,   252,  1209,
    1210,   653,   653,   653,   653,   654,   653,   653,  1188,   653,
     196,   653,   653,   654,   653,   654,   654,   653,  1188,   653,
    1188,   653,  1188,   653,   653,   653,   652,  1005,  1005,    21,
     137,   466,   645,  1007,  1008,  1009,   654,   654,  1180,  1610,
     653,  1604,   660,  1049,   653,  1232,  1190,   653,   654,   653,
    1183,  1214,   653,   629,  1430,    57,    67,    82,    94,    95,
      96,   113,   331,   348,   462,   480,   540,   558,   767,   766,
    1577,   629,  1580,   382,   647,   647,  1570,  1570,  1570,   652,
    1188,   375,  1374,  1157,  1490,  1161,   234,  1164,  1454,   653,
     654,  1183,   881,   399,   897,   898,   653,  1500,  1176,  1365,
    1366,  1487,  1370,   654,   652,  1361,   653,   653,   654,   660,
    1593,   653,   654,   754,   198,  1571,  1571,  1571,  1290,  1290,
     152,   389,  1326,  1327,  1332,   600,   252,  1494,  1497,   660,
     653,   653,    84,   586,   430,  1530,  1515,  1517,  1306,  1311,
    1408,  1417,   166,   654,   594,   653,  1597,  1263,   657,   259,
    1269,  1269,  1253,   259,   375,   607,   654,  1378,  1367,  1288,
    1176,  1188,  1304,  1485,   833,  1047,  1489,   930,    65,   195,
     415,   595,   954,  1024,   930,  1048,  1025,  1026,  1026,   930,
     132,  1497,  1489,  1140,  1316,  1314,  1346,  1314,    13,  1069,
    1077,  1078,  1497,  1140,  1494,  1494,   991,  1368,  1314,   262,
    1346,   262,  1346,  1346,   938,  1078,  1368,   189,   265,   365,
     941,  1314,   132,  1497,  1316,  1316,  1346,  1140,  1299,  1300,
    1487,   132,  1314,   132,  1314,  1320,   874,  1494,  1140,  1490,
    1140,  1140,    86,    88,   132,   154,   190,   393,   437,   940,
     132,  1314,   132,  1314,   132,  1314,  1314,  1320,  1069,   935,
       6,   150,  1081,   944,  1497,     9,   189,  1096,   438,   953,
     954,  1017,   958,   660,   132,  1317,  1494,  1497,   413,  1188,
    1188,   375,   709,   715,   375,    83,   710,  1497,  1624,    20,
      13,   652,  1125,  1069,   653,   654,   683,   684,  1314,   652,
    1497,   863,   836,  1494,   943,  1642,   375,   375,   726,   727,
     729,  1497,   510,  1490,   653,   653,   654,   234,   453,   868,
    1460,   933,   690,   692,   694,  1497,  1290,  1301,  1284,  1188,
     129,   290,   369,   585,    22,    36,    50,   592,   991,  1001,
    1002,  1003,   369,   652,   978,   984,    62,   119,   122,   130,
     148,   192,   250,   351,   354,   432,   569,   598,   971,   972,
    1199,  1229,   653,  1284,  1284,    49,   486,  1223,  1188,  1188,
    1232,    45,   352,   653,   629,  1211,  1188,  1284,  1188,  1188,
    1188,  1188,   653,   653,   653,  1315,   653,  1015,  1010,  1008,
    1010,  1011,  1314,  1261,  1602,  1497,   653,  1232,  1184,   430,
     210,   455,  1578,  1578,  1578,   132,  1188,  1372,  1373,   153,
    1164,   269,  1460,   884,   653,   217,   262,   899,   653,   654,
    1180,   654,  1367,  1371,  1372,  1369,  1363,  1361,  1483,  1497,
     875,  1497,  1571,  1307,   212,  1295,  1496,  1496,   659,  1328,
    1329,  1499,   494,   647,  1516,  1521,  1306,  1494,   685,  1601,
    1288,  1241,  1238,  1253,   259,   259,  1238,  1253,  1243,  1244,
    1380,  1290,  1373,  1278,  1279,  1180,   654,    21,   137,  1305,
    1140,   652,   262,   262,  1026,  1048,  1047,  1032,  1048,  1048,
     150,   492,  1069,  1489,  1066,   654,  1315,   993,  1494,  1346,
    1077,  1489,  1489,   629,  1494,  1489,  1069,   654,  1305,   878,
    1069,  1074,  1069,   652,   653,  1497,  1490,    35,    36,    41,
      43,    45,    46,   119,   122,   130,   148,   165,   190,   192,
     205,   206,   250,   279,   288,   289,   291,   325,   326,   327,
     344,   345,   346,   351,   354,   371,   372,   407,   408,   432,
     488,   492,   506,   563,   566,   569,   570,   571,   572,   613,
     614,   640,   959,   967,   970,   971,   972,   973,   974,   975,
     976,  1497,  1284,   502,  1494,   149,  1062,   653,   654,  1625,
    1626,  1126,   237,   653,  1281,   653,   654,   699,   510,   243,
     252,   390,   730,   731,   732,   733,  1182,   479,   653,   654,
     728,  1494,   653,   866,   865,   946,    20,   923,   652,   652,
     652,   276,  1312,   653,   653,   653,   653,   653,    36,    22,
     592,   991,    36,   992,   654,   369,   983,   977,    62,   983,
     250,  1003,   653,   653,   653,  1225,  1477,   653,   653,   654,
     653,   339,   264,   425,   653,   653,   653,   653,   653,   653,
    1006,   653,   654,   942,  1175,  1307,  1597,   653,   285,   382,
      66,   257,   361,   526,   542,   635,  1566,  1567,   629,  1579,
    1579,  1579,   653,   654,  1375,   249,   652,   887,   652,   900,
    1497,   898,   922,  1366,  1373,   653,  1596,    49,   218,  1292,
    1333,  1499,   654,   339,  1256,   375,  1246,  1253,  1253,   375,
    1248,  1188,   652,  1301,  1276,  1277,  1266,  1485,  1071,  1188,
    1048,  1032,   652,  1031,  1031,   132,   132,  1082,  1135,  1078,
     998,  1489,  1095,   556,  1083,  1065,  1300,  1075,  1077,  1067,
    1433,   652,  1018,   982,   982,   983,   983,   977,   411,   968,
     977,   977,  1003,    62,   613,   971,   973,  1003,  1003,    62,
     614,   614,   617,   977,   969,   983,   983,   983,  1003,   982,
     983,    27,    73,    83,   132,   204,   368,   375,   415,   488,
     595,   960,   985,   986,   987,  1016,  1194,  1493,   617,   982,
    1003,    36,   982,  1004,   982,   982,   983,   984,   660,   704,
     711,   712,  1497,   484,   652,  1627,  1129,  1497,    13,   652,
    1127,   684,   653,  1494,   653,   654,   728,  1630,   703,  1636,
     729,   967,   988,  1596,   931,   652,   920,  1045,  1046,  1497,
    1045,  1045,   473,  1310,  1388,   992,  1004,   369,  1226,  1485,
    1188,   339,   180,   653,  1314,  1179,  1179,    18,  1434,   562,
     562,   562,    18,  1565,   210,   317,   318,   322,   323,  1581,
    1582,  1373,   262,   556,  1182,   890,   892,   893,  1497,   611,
     901,   942,  1296,  1485,  1293,  1301,   991,   994,  1329,  1602,
    1245,   607,  1247,   607,  1283,  1312,   194,   234,   606,  1271,
    1272,  1275,   942,  1305,   400,   652,  1072,   653,   652,   652,
    1045,   652,   652,   122,   566,   569,   645,   646,  1479,  1480,
     957,  1490,   959,  1140,  1076,  1116,   653,  1019,  1497,   316,
    1020,   500,   598,   641,   979,   980,   981,   652,   979,   979,
    1003,   617,   979,   652,  1003,   979,   997,  1494,   364,   989,
    1479,    15,   600,   132,   262,    20,   987,   262,   368,  1367,
    1003,  1004,  1003,  1004,   979,   979,  1497,   528,   706,    55,
      70,   187,   233,   258,   270,   379,   465,   713,   771,   773,
     774,   775,   777,   778,   779,   780,   781,   782,   784,   792,
     793,   796,   807,   810,   812,   813,  1493,  1498,  1503,  1169,
    1167,   629,  1628,   653,   654,  1128,  1643,   732,  1497,  1490,
     708,   709,   464,   998,   871,   920,   869,   653,   654,  1305,
     652,   653,   653,   176,   473,   463,  1391,   653,   654,  1305,
     653,   653,   143,  1566,   382,  1314,  1314,  1314,   369,   645,
    1313,  1582,   600,  1490,   894,   543,   895,   653,   654,   252,
     272,    83,    91,   118,   238,   319,   337,   360,   553,   917,
     918,   919,  1411,   630,   631,   654,  1297,  1305,  1188,  1307,
     993,  1334,  1257,  1188,   652,  1188,   652,   653,  1025,  1025,
    1272,  1315,   897,  1045,  1045,   653,  1045,  1045,  1481,  1481,
    1096,   875,  1084,   249,   653,   654,   199,   398,   501,   375,
    1021,   981,  1050,  1477,  1050,   652,  1185,   364,   612,   652,
     132,  1317,  1494,  1497,  1188,   161,   707,   794,   797,  1497,
     198,   359,   785,   772,  1498,  1498,  1497,   776,   667,   292,
     452,   628,   816,    33,   814,   661,   653,    54,    65,   282,
    1497,   415,  1130,  1131,  1497,   717,   988,   196,   705,  1637,
     868,   653,  1593,    83,   261,  1033,  1036,  1039,  1040,  1041,
    1493,  1046,   369,   629,  1034,  1038,  1040,  1043,  1035,  1037,
    1040,  1042,   176,  1180,  1485,    63,   290,   369,  1381,  1382,
    1487,  1251,  1183,  1315,   891,   893,   903,   564,  1368,  1368,
     142,   142,  1368,  1368,  1368,  1368,   652,   912,   919,   164,
    1485,   417,  1321,    75,  1461,  1597,  1283,  1283,   196,  1270,
    1270,   653,   653,   653,   949,   653,   653,  1096,   652,  1497,
     136,   600,   653,   654,   653,   653,  1315,  1185,   966,  1188,
    1188,   626,   799,   803,   198,  1497,   787,   788,  1188,   735,
     770,   771,   773,   775,   777,   779,   780,   781,   782,   784,
     792,   807,   810,   812,   735,   817,   815,   808,   811,  1596,
      65,   382,    65,   653,   654,   140,   718,   719,  1194,  1644,
    1182,   710,   988,   870,  1494,  1368,   691,  1041,  1367,  1305,
     653,   396,   693,  1043,   695,  1042,  1305,   654,  1367,  1455,
     653,   895,   652,   905,   907,   902,  1494,  1494,  1368,  1368,
    1317,  1317,  1315,  1499,   544,   913,   914,  1368,  1305,  1497,
     159,   170,   383,   561,  1462,  1463,   278,  1464,   653,   653,
     212,   259,   385,  1274,  1273,  1017,   952,  1033,   950,   951,
     897,    53,   365,   460,   492,  1022,  1022,  1003,  1477,  1003,
     653,   653,   795,   804,   156,   803,   806,   249,   160,  1188,
     160,   770,   658,   599,  1188,   736,   816,   814,   382,   382,
    1131,   140,   770,  1631,   149,  1638,  1596,  1314,  1085,  1086,
    1087,   132,  1317,  1494,  1497,  1493,  1085,  1085,  1382,  1373,
     994,   652,   906,   907,   908,   324,   904,   907,  1494,  1494,
     915,   653,   654,   938,  1322,    49,    49,   159,    49,  1463,
     527,   561,  1465,  1466,    49,    49,   652,   652,  1033,  1034,
    1035,   653,     5,   132,   368,   375,   375,   403,   621,   961,
     626,   798,   800,  1188,   735,   160,   783,   233,   565,   292,
     658,   819,   149,   131,   734,   737,   809,  1498,   809,   155,
     711,   717,  1087,  1086,  1456,   653,   654,   324,   910,   911,
    1191,   916,  1499,   914,   652,  1477,  1477,    49,  1477,    49,
      49,  1466,  1280,  1282,   600,   136,    83,   595,   962,   963,
     964,   801,   800,   806,   805,    55,   786,  1497,   789,  1188,
     818,    99,   179,   742,   768,  1497,   160,   770,   658,   475,
    1639,   473,  1467,   907,   654,   909,   917,  1182,  1323,  1324,
    1325,  1477,  1477,  1477,   653,   653,  1022,  1022,  1494,   262,
     964,  1188,   160,   565,   654,   735,   160,   735,   215,   654,
     738,    90,   112,   658,  1632,   770,   231,  1461,   911,   653,
    1188,   653,   654,   802,    55,   735,  1497,   790,   452,   160,
     196,  1497,   988,   196,   196,   770,    49,  1464,  1183,  1325,
     565,   156,   157,   791,   628,   739,   132,   769,   745,   746,
    1314,   740,   741,  1477,   234,  1468,   735,   735,   787,   515,
     517,   743,   744,   745,   748,  1194,  1497,  1188,  1165,   369,
     652,  1470,   654,   770,   197,   278,   473,  1469,   653,   659,
    1471,  1472,  1487,   492,  1473,   744,  1499,   653,   654,  1474,
    1475,  1487,  1472,   654,  1367,  1475,  1182,  1373,  1183
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, thd)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (thd);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, THD *thd)
#else
static void
yy_reduce_print (yyvsp, yyrule, thd)
    YYSTYPE *yyvsp;
    int yyrule;
    THD *thd;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , thd);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, thd); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, thd)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    THD *thd;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (thd);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (THD *thd);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (THD *thd)
#else
int
yyparse (thd)
    THD *thd;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 65:

/* Line 1455 of yacc.c  */
#line 2044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 2058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 2067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 2073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 71:

/* Line 1455 of yacc.c  */
#line 2082 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 72:

/* Line 1455 of yacc.c  */
#line 2088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 2103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 80:

/* Line 1455 of yacc.c  */
#line 2134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 2138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 2160 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 2164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 2207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 2238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 2253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 2283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 2289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 2299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 2309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 2330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->mi.connection_name= (yyvsp[(1) - (1)].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[(1) - (1)].lex_str)))
           {
              my_error(ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME");
              MYSQL_YYABORT;
           }
#endif
         }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 2345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(thd);
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 2385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 2390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 2394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2432 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 2438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_ROLE;
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2497 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2501 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 2563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2585 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 2611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 162:

/* Line 1455 of yacc.c  */
#line 2619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 163:

/* Line 1455 of yacc.c  */
#line 2621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 164:

/* Line 1455 of yacc.c  */
#line 2628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 2670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2750 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2754 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2765 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2773 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 2780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 2785 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 2789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 2796 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2820 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2824 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= spc->add_variable(thd,
                                                  (yyvsp[(1) - (3)].lex_str),
                                                  (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                  sp_variable::MODE_IN);

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2902 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= spc->add_variable(thd,
                                                  (yyvsp[(3) - (4)].lex_str),
                                                  (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                  (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2928 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 2946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 2950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 2976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(thd);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 2984 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->default_value= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(thd, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(spc->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_handler *h= lex->spcont->add_handler(thd,
                                                    (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, h);

            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(thd, EMPTY_STR, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor((yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->add_cursor((yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 3140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 3159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3160 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_condition_value *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3358 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3376 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 3404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 3409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3441 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3446 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (thd->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (thd->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip= &thd->m_parser_state->m_lip;
            (yyval.item)= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                       lip->get_tok_start(), lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3493 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3513 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (thd->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (thd->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3557 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(thd,
                              (yyvsp[(1) - (1)].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(thd,
                              (yyvsp[(3) - (3)].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 3608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 307:

/* Line 1455 of yacc.c  */
#line 3609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3630 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3632 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 3719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label(thd,
                                    EMPTY_STR,
                                    lex->sphead->instructions());
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 3727 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3736 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == sp_label::BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 3789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 3832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 3852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3869 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 3942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 3944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 3960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label(thd, EMPTY_STR, 0));
          }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 3972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 3992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 350:

/* Line 1455 of yacc.c  */
#line 3998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 351:

/* Line 1455 of yacc.c  */
#line 4011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 4019 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 4045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 359:

/* Line 1455 of yacc.c  */
#line 4049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 4061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 4070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 4074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 4084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 4093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 4108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label(thd, (yyvsp[(1) - (2)].lex_str), lex->sphead->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 4125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 4142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 4143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 4148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label(thd, (yyvsp[(1) - (2)].lex_str), lex->sphead->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 4163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 4179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->push_label(thd, EMPTY_STR, ip);
            lab->type= sp_label::BEGIN;
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 4186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 4194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::REGULAR_SCOPE);
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 4204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 4232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 4242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 4244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 4260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 4271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 4273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 4292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 383:

/* Line 1455 of yacc.c  */
#line 4294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 4299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 4301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 4303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 4337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 391:

/* Line 1455 of yacc.c  */
#line 4339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 4349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 4355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 398:

/* Line 1455 of yacc.c  */
#line 4378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 4496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4546 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4562 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4570 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4578 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4612 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4631 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.option_list= NULL; }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4702 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4711 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {

            Lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(thd,
                                        (yyvsp[(1) - (1)].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(2) - (2)].table); }
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(3) - (4)].table); }
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4732 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4776 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4782 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4800 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4819 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4831 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 4847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 4850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 4854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 4856 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 4860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4906 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 4917 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 4925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 4927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 4942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 4944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 4945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 4948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 4953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 4957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 4958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 4963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 4981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 4996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 4998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 5013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 5029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 5050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5089 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 5309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5408 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5416 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5425 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5460 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5465 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5480 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= FALSE;
            (yyval.num)= 0;
          }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= TRUE;
            (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS;
          }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5523 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 5533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5548 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 5568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 5594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 5609 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 5615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 5633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 5638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 5643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 5648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 5653 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 5701 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 5706 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 5708 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5712 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 5718 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 5723 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5773 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5829 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5831 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5838 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5849 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5856 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(2) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 5889 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5905 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5907 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (9)].key_type), (yyvsp[(3) - (9)].lex_str).str ? (yyvsp[(3) - (9)].lex_str) : (yyvsp[(1) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5912 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option,
                                      lex->check_exists);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5933 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5958 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (3)].lex_str), (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5987 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
            Lex->vcol_info->set_field_type((enum enum_field_types) (yyvsp[(1) - (8)].num));
          }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 5995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 6000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 6004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 6008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 6014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 6015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 6019 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 6025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 6031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 6036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 6041 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 6057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[(2) - (3)].item);
          }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 6072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 6073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 6074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 6076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 6081 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 6085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 6090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 6095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 6099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 6104 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 6109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 6115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 6120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 6126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 6130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 6135 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 6140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 6158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 6160 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 6162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 6175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 6177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 6182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 6187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 6199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 6204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 6209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 6214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 6216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 6218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 6220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 6222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 6234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 6255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 6258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 6259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 6263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6351 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6360 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local((yyvsp[(4) - (4)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 6395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6400 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6421 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6500 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6501 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6506 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6518 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6524 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6536 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6537 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6542 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 6574 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 6581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6584 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 6585 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 6587 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 6592 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 6599 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 6600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 6605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 6613 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 6617 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 6618 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 6627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6628 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6641 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6647 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 6648 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 6653 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 6662 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 6663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6667 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6668 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6689 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6695 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6702 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6718 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6737 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6744 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6759 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6760 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6761 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6767 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6776 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6787 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6793 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6797 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6831 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 6836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 6841 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 6861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 6862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 6868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6876 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 6882 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6906 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 6919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6920 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 6924 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 6925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6949 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 6950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->check_exists && lex->sql_command != SQLCOM_ALTER_TABLE)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
          (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str);
        }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 6971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6980 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->name.str= 0;
            Lex->name.length= 0;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->col_list.empty();
            Lex->select_lex.init_order();
            bzero(&Lex->create_info, sizeof(Lex->create_info));
            Lex->create_info.db_type= 0;
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 6997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 7007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 7017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 7022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 7031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 7042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 7053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 7060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 7071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 7078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7089 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 7143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 7173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 7174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 7175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 7179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 7204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 7212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 7239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 7246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(4) - (4)].num);
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7377 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7384 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7399 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 7407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 7414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 7415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 7420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 7458 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 7463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(4) - (4)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 7470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 7474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 7485 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(4) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(6) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(4) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(4) - (5)].lex_str).str, (yyvsp[(3) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(5) - (5)].lex_str).str, (yyvsp[(4) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name,
                                           FALSE);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7530 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(3) - (4)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7560 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7569 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 7608 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7618 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 7622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 7639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 7644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 7655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 7660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 7670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7671 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 7676 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 7680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7694 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 7696 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_NONE;
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 7703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 7704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 7705 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 7709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 7711 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7716 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 7723 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 7724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 7725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7731 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7738 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 7745 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 7747 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 7754 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 7764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 7780 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 7784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 7791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 7795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1063:

/* Line 1455 of yacc.c  */
#line 7802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 7806 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 7810 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 7818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 7828 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 7829 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 7833 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 7835 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 7848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->mi.gtid_pos_str = (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 7860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 7867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 7871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 7872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7873 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 7878 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 7899 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 7903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 7904 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7908 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7910 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7915 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 7925 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7947 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            thd->lex->with_persistent_for_clause= TRUE;
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 7954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7956 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 7959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 7961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->column_list= new List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 7972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 7974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->index_list= new List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 7986 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 7988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 7993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 8001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 8008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 8014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&str, sizeof(LEX_STRING)));
          }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 8023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 8031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 8046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 8056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 8057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 8061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 8062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 8066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 8067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 8068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 8069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 8070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 8071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 8076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 8086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 8097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 8098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 8103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 8107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 8109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 8116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 8121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 8147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 8151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 8180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 8189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 8190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 8226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 8236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 8252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 8258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 8259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 8269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 8283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 8346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 8361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 8378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 8406 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 8438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 8444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 8456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 8470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 8475 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 8499 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 8505 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 8511 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 8513 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 8515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8519 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8525 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8538 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (thd->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8589 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (thd->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (thd->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8645 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8657 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8669 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8675 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 8685 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8691 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8697 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8709 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8740 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (thd->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8748 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8754 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (thd->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8779 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item1= new (thd->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (thd->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8789 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 8805 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8824 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8830 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8836 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8878 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8884 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8890 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8902 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 8932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 8933 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1273:

/* Line 1455 of yacc.c  */
#line 8934 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 8935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 8936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 8940 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 8941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 8946 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 8952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 8957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 8964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 8971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 8978 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 8985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1285:

/* Line 1455 of yacc.c  */
#line 8992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 8997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 9003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 9010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 9017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 9025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 9036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 9058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def));
       }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 9065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 9078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 9093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 9099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 9103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 9109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 9115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 9121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 9127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 9129 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 9136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 9143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 9149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(thd,
                                            item->str_value.ptr(),
                                            item->str_value.length(),
                                            item->str_value.charset(),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 9192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (thd->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 9201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 9208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 9216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 9222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 9229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 9235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 9249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 9257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_role(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 9355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9385 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9421 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9439 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 9445 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 9453 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 9474 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 9481 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 9487 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 9494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 9502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 9509 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 9515 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 9521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 9534 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9553 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 9565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 9571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9577 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9601 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9607 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9614 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9629 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_check((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9650 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9657 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9680 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9686 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9692 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9705 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9711 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_last_value(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9717 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9723 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9729 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9735 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item* i1;
            if (thd->variables.old_passwords == 1)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9752 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9770 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9801 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9807 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 9815 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 9825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 9831 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 9853 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1407:

/* Line 1455 of yacc.c  */
#line 9874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9892 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 9930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 10024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 10026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 10030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 10031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 10035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 10036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 10040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 10041 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 10046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 10053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 10061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 10087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 10093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 10099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 10105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 10111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 10117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 10126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 10132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 10134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 10136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 10142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 10153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 10159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 10165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 10171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 10177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 10183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 10189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 10195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 10201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 10207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 10211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 10226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 10234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 10241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 10251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 10259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 10274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 10275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 10280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 10285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 10291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 10308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 10310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 10315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 10324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 10332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 10334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 10336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 10338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 10340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 10342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 10344 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 10346 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 10348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 10350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 10356 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 10362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 10364 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 10366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 10369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 10370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 10375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 10382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 10389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 10390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 10395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 10402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 10409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 10410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 10414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 10415 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 10420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10428 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10438 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 10440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 10451 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 10463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 10471 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 10491 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=(yyvsp[(2) - (3)].num); }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	    (yyvsp[(3) - (6)].table_list)->straight=(yyvsp[(2) - (6)].num);
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10510 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 10514 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
	    (yyvsp[(3) - (8)].table_list)->straight=(yyvsp[(2) - (8)].num);
            add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); 
	    (yyval.table_list)=(yyvsp[(3) - (8)].table_list); 
          }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 10520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
	    (yyvsp[(4) - (4)].table_list)->straight=(yyvsp[(3) - (4)].num);
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10529 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 10537 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 10545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 10549 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 10555 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 10565 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 10573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 10582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10586 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 10593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 10604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 10605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 10606 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 10611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 10619 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 10625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 10639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 10644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 10655 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 10695 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 10781 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 10786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 10794 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 10806 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 10825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 10833 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 10842 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 10848 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 10864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 10881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 10888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 10893 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 10919 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10924 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 10928 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10933 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10934 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 10939 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10944 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 10957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->alloc_index_hints(thd); }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 10961 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, NULL, 0); }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 10967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 10972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 10974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 10984 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 10995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 11007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 11008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 11009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 11010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 11011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 11012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 11013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 11014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 11015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 11016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 11017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 11018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 11022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 11023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 11024 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 11025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 11026 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 11027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 11028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 11029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 11030 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 11034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 11035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 11036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 11037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 11047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 11049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 11062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 11064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 11068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 11080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 11084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 11095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 11100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 11121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 11123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 11127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 11129 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 11149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 11183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 11201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 11236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 11238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 11242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 11243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 11244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 11249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 11256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 11260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 11261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 11266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 11270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 11274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 11281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 11288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 11295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 11305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 11338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 11363 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11370 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11375 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 11381 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 11382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 11386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 11387 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 11388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11392 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11393 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 11394 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 11395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11397 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 11401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11402 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11403 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 11404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 11409 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11410 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11411 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 11412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 11413 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 11417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 11418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 11419 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 11420 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 11421 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 11426 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 11435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11436 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 11442 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 11472 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 11473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 11483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 11492 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 11498 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 11503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 11508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 11527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1691:

/* Line 1455 of yacc.c  */
#line 11559 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 11571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 11579 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 11582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 11594 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 11605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 11611 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 11622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->check_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 11631 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 11632 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 11633 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (7)].lex_str).str, (yyvsp[(3) - (7)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(6) - (7)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 11649 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->check_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 11656 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 11678 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11710 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11714 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_ROLE;
          }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11718 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->check_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11734 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 11741 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11746 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 11766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 11777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 11795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11806 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11811 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11819 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 11827 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 11835 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 11840 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 11845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 11852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 11857 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 11862 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11883 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11895 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 11901 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 11909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11910 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11913 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11923 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11924 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11928 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11929 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11931 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11932 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11934 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11935 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 11950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 11960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 11964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 11989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 11994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 12001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 12003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 12012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 12020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 12028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 12046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 12056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(1) - (3)].item)) || add_value_to_list(thd, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 12069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 12078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 12079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 12086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 12101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 12112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 12113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 12115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 12121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 12126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 12132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 12150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 12163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 12178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 12179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 12183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 12184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 12188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 12189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 12190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 12195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 12206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 12230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 12234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 12238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 12242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 12246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 12250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 12254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 12258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 12262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 12269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 12273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 12282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 12291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 12298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 12305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 12313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 12329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 12337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 12345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12352 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ident= (yyvsp[(3) - (3)].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 12359 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12365 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 12367 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12369 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12382 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12386 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12391 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 12396 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12405 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12417 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12429 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12431 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12433 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12435 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12437 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12444 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12452 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12469 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12476 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_GRANTS;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user_and_current_role;
          }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
          }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12495 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 12504 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 12512 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 12516 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 12521 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12528 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(thd, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 12540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 12547 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12554 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12561 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 12568 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12575 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12581 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 12595 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12600 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 12605 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 12610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[(3) - (3)].item));
          }
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 12620 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 12622 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 12624 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 12638 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 12639 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 12643 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 12644 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12653 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 12654 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 12658 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 12659 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 12665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 12672 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond((yyvsp[(2) - (2)].item));
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 12682 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 12693 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 12697 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 12699 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 12719 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 12720 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 12721 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 12725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12728 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 12742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 12749 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 12754 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 12763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 12764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 12771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num);
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 12786 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 12791 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 12793 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 12795 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 12797 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 12799 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12801 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12812 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12814 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12816 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12818 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name.str= (char*) "";
            Lex->relay_log_connection_name.length= 0;
          }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12824 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12826 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12837 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12841 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12843 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12845 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12847 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 12849 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12853 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12858 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12859 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12863 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 12868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 12880 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12881 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 12885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 12886 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 12891 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 12897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 12906 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 12910 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 12922 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
            lex->kill_type= KILL_TYPE_ID;
          }
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 12930 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 12936 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 12937 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 12938 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 12941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 12942 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 12943 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 12945 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (int) KILL_QUERY;
            Lex->kill_type= KILL_TYPE_QUERY;
          }
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 12953 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item));
         }
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 12957 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 12965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 12972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 12983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 12994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 13004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 13014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 13018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 13022 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 13023 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 13027 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 13028 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 13032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 13034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 13041 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 13045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 13046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 13047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 13062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 13067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 13074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 13079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 13097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 13102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 13109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 13111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 13116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 13123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 13125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { }
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 13129 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 13130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 13131 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), thd->charset());
          }
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string *str= new (thd->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 13222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 13241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 13304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 13306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 13313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 13314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 13336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 13342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item) = new (thd->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13348 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13354 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (thd->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (thd->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 13414 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 13424 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13434 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 13488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 13489 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 13494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 13503 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 13517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 13522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 13567 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13572 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13588 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13593 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13671 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13695 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13726 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13742 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13751 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13756 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13768 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13778 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 13784 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13793 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(thd, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13802 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13804 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13832 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13846 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13860 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13874 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13876 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13885 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13887 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13896 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13898 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13903 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= null_lex_str; // User or Role, see get_current_user()
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            if ((yyval.lex_user)->host.str[0])
            {
              /*
                Convert hostname part of username to lowercase.
                It's OK to use in-place lowercase as long as
                the character set is utf8.
              */
              my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            }
            else
            {
              /*
                fix historical undocumented convention that empty host is the
                same as '%'
              */
              (yyval.lex_user)->host= host_not_specified;
            }
          }
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*)thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_user;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13963 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 13968 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 13969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 13970 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 13971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 13972 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 13973 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 13974 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 13975 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 13976 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 13977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 13978 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 13979 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 13980 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 13981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 13982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 13983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 13984 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 13985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 13986 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 13987 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 13988 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 13989 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 13990 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 13991 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 13992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 13993 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 13994 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 13995 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 13996 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 13997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 13998 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 13999 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 14000 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 14001 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 14002 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 14003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 14004 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 14005 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 14006 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 14007 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 14008 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 14009 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 14010 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 14011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 14012 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 14013 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 14014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 14015 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 14016 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 14017 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 14018 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 14019 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 14020 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 14021 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 14031 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 14032 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 14033 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 14034 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 14035 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 14036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 14037 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 14038 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 14039 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 14040 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 14041 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 14042 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 14043 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 14044 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 14045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 14046 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 14047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 14048 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 14049 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 14050 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 14051 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 14052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 14053 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 14054 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 14055 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 14056 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 14057 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 14058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 14059 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 14060 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 14061 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 14062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 14063 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 14064 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 14065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 14066 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 14067 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 14068 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 14069 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 14070 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 14071 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 14072 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 14073 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 14074 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 14075 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 14076 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 14077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 14078 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 14079 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 14080 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 14085 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 14086 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 14087 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 14088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 14089 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 14090 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 14091 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 14092 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 14093 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 14094 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 14095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 14096 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 14097 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 14098 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 14099 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 14100 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 14101 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 14102 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 14103 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 14104 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 14105 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 14106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 14107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 14108 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 14109 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 14110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 14111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 14112 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 14113 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 14114 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 14115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 14116 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 14117 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 14118 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 14119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 14120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 14121 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 14122 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 14123 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 14124 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 14125 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 14126 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 14127 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 14128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 14129 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 14130 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 14131 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 14132 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 14133 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 14134 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 14135 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 14136 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 14137 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 14138 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 14139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 14140 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 14141 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 14142 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 14143 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 14144 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 14145 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 14146 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 14147 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 14148 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 14149 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 14150 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 14151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 14152 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 14153 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 14154 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 14155 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 14156 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 14157 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 14158 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 14159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 14160 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 14161 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 14162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 14163 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 14164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 14165 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 14166 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 14167 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 14168 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 14169 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 14170 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 14171 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 14172 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 14173 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 14174 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 14175 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 14176 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 14177 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 14178 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 14179 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 14180 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 14181 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 14182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 14183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 14184 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 14185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 14186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 14187 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 14188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 14189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 14190 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 14191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 14192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 14193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 14194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 14195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 14196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 14197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 14198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 14199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 14200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 14201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 14202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 14203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 14204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 14205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 14206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 14207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 14208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 14209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 14210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 14211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 14212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 14213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 14214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 14215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 14216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 14217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 14218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 14219 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 14220 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 14221 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 14222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 14223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 14224 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 14225 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 14226 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 14227 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 14228 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 14229 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 14230 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 14231 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 14232 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 14233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 14234 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 14235 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 14236 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 14237 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 14238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 14239 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 14240 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 14241 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 14242 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 14243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 14244 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 14245 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 14246 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 14247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 14248 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 14249 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 14250 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 14251 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 14252 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 14253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 14254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 14255 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 14256 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 14257 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 14258 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 14259 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 14260 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 14261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14262 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 14263 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 14264 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 14265 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 14266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 14267 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14268 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14269 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 14270 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 14271 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 14272 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 14273 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14274 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 14276 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14277 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14278 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14280 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14282 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14284 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14285 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14286 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14288 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14289 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14290 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14292 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14293 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14296 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14297 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14298 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14299 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14300 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14301 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14303 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14304 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 14305 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14306 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14308 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14310 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 14311 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14312 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 14313 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14314 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14315 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14317 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14318 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14320 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14321 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14322 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14323 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14327 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14328 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 14329 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 14332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14333 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 14334 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 14335 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 14338 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 14339 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 14340 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 14341 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14343 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14366 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 14373 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14379 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14383 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 14388 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 14398 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 14404 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14418 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14422 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14427 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 14431 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 14440 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 14448 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 14449 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 14450 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 14454 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 14455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 14456 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 14457 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 14461 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 14462 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 14463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 14464 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 14470 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14494 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(thd, &(yyvsp[(1) - (3)].variable).base_name, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (3)].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable((yyvsp[(1) - (3)].variable).base_name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 14520 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 14531 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 14543 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 14556 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 14571 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14590 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            set_var_role *var= new set_var_role((yyvsp[(2) - (2)].lex_str));
            lex->var_list.push_back(var);
          }
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 14596 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->user= current_user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 14621 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 14634 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 14660 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 14703 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 14724 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 14741 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 14757 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 14758 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 14762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 14763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 14764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2524:

/* Line 1455 of yacc.c  */
#line 14765 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 14769 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 14771 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].lex_str).length == 0)
             (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).str;
            else
            switch (thd->variables.old_passwords) {
              case 1: (yyval.simple_string)= Item_func_old_password::
                alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
              case 0:
              case 2: (yyval.simple_string)= Item_func_password::
                create_password_hash_buffer(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
            }
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 14788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(thd, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 14798 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 14799 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 14801 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 14807 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 14813 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 14824 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 14835 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 14850 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 14864 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 14865 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 14867 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 14871 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 14872 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 14877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 14888 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 14897 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 14909 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 14921 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 14941 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 14954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 14955 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 14959 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 14960 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 14964 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 14965 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 14966 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 14967 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 14969 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 14977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 14981 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 14982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 14983 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 14984 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 14985 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 14992 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 14997 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 15003 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 15014 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 15025 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 15029 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 15036 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_REVOKE_ROLE;
            if (Lex->users_list.push_front((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 15045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; (yyval.lex_user)= (yyvsp[(4) - (4)].lex_user); }
    break;

  case 2574:

/* Line 1455 of yacc.c  */
#line 15047 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); }
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 15052 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 15058 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 15065 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 15077 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 15088 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 15095 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT_ROLE;
            /* The first role is the one that is granted */
            if (Lex->users_list.push_front((yyvsp[(1) - (4)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 15106 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->definer = 0; }
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 15107 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->definer = (yyvsp[(3) - (3)].lex_user); }
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 15110 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; }
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 15111 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; }
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 15115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 15120 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 15128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_role;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 15139 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= empty_lex_str;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 15162 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 15164 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 15182 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 15183 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 15185 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 15186 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2602:

/* Line 1455 of yacc.c  */
#line 15188 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2603:

/* Line 1455 of yacc.c  */
#line 15189 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 15191 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 15192 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 15193 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2607:

/* Line 1455 of yacc.c  */
#line 15194 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2608:

/* Line 1455 of yacc.c  */
#line 15195 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 15196 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 15197 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 15198 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 15199 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 15200 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 15201 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 15202 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 15203 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 15204 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 15205 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 15206 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 15207 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 15208 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 15209 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 15210 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 15211 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 15212 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 15213 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 15214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 15215 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 15216 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 15217 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 15218 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 15222 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 15223 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 15233 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 15243 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 15253 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 15266 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 15281 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 15294 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 15307 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 15319 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2644:

/* Line 1455 of yacc.c  */
#line 15324 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 15332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 15337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2647:

/* Line 1455 of yacc.c  */
#line 15345 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2648:

/* Line 1455 of yacc.c  */
#line 15350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 15361 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (thd->variables.old_passwords == 1)
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_sha1(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 15390 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 15395 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 15401 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 15407 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 15412 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2662:

/* Line 1455 of yacc.c  */
#line 15426 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            String *new_str = new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 15455 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 15459 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2666:

/* Line 1455 of yacc.c  */
#line 15463 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2667:

/* Line 1455 of yacc.c  */
#line 15467 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2668:

/* Line 1455 of yacc.c  */
#line 15473 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2670:

/* Line 1455 of yacc.c  */
#line 15478 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2671:

/* Line 1455 of yacc.c  */
#line 15479 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2672:

/* Line 1455 of yacc.c  */
#line 15483 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 15484 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2674:

/* Line 1455 of yacc.c  */
#line 15488 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2675:

/* Line 1455 of yacc.c  */
#line 15490 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2676:

/* Line 1455 of yacc.c  */
#line 15496 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2677:

/* Line 1455 of yacc.c  */
#line 15502 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2678:

/* Line 1455 of yacc.c  */
#line 15508 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2679:

/* Line 1455 of yacc.c  */
#line 15517 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2680:

/* Line 1455 of yacc.c  */
#line 15522 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2681:

/* Line 1455 of yacc.c  */
#line 15526 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2682:

/* Line 1455 of yacc.c  */
#line 15527 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2683:

/* Line 1455 of yacc.c  */
#line 15532 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2684:

/* Line 1455 of yacc.c  */
#line 15533 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2685:

/* Line 1455 of yacc.c  */
#line 15534 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2686:

/* Line 1455 of yacc.c  */
#line 15539 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2687:

/* Line 1455 of yacc.c  */
#line 15540 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2688:

/* Line 1455 of yacc.c  */
#line 15541 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2689:

/* Line 1455 of yacc.c  */
#line 15545 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2690:

/* Line 1455 of yacc.c  */
#line 15546 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2691:

/* Line 1455 of yacc.c  */
#line 15551 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2692:

/* Line 1455 of yacc.c  */
#line 15563 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2693:

/* Line 1455 of yacc.c  */
#line 15573 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2694:

/* Line 1455 of yacc.c  */
#line 15582 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2695:

/* Line 1455 of yacc.c  */
#line 15591 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2696:

/* Line 1455 of yacc.c  */
#line 15604 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2698:

/* Line 1455 of yacc.c  */
#line 15610 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2699:

/* Line 1455 of yacc.c  */
#line 15615 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2700:

/* Line 1455 of yacc.c  */
#line 15625 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2701:

/* Line 1455 of yacc.c  */
#line 15626 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2702:

/* Line 1455 of yacc.c  */
#line 15627 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2703:

/* Line 1455 of yacc.c  */
#line 15631 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2704:

/* Line 1455 of yacc.c  */
#line 15632 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2705:

/* Line 1455 of yacc.c  */
#line 15636 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2706:

/* Line 1455 of yacc.c  */
#line 15651 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2709:

/* Line 1455 of yacc.c  */
#line 15663 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2710:

/* Line 1455 of yacc.c  */
#line 15664 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2711:

/* Line 1455 of yacc.c  */
#line 15665 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2712:

/* Line 1455 of yacc.c  */
#line 15670 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2713:

/* Line 1455 of yacc.c  */
#line 15674 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2715:

/* Line 1455 of yacc.c  */
#line 15683 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2716:

/* Line 1455 of yacc.c  */
#line 15689 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2717:

/* Line 1455 of yacc.c  */
#line 15698 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2718:

/* Line 1455 of yacc.c  */
#line 15704 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2719:

/* Line 1455 of yacc.c  */
#line 15725 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2724:

/* Line 1455 of yacc.c  */
#line 15753 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2725:

/* Line 1455 of yacc.c  */
#line 15755 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2726:

/* Line 1455 of yacc.c  */
#line 15762 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2727:

/* Line 1455 of yacc.c  */
#line 15763 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2728:

/* Line 1455 of yacc.c  */
#line 15764 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2729:

/* Line 1455 of yacc.c  */
#line 15766 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2730:

/* Line 1455 of yacc.c  */
#line 15772 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2731:

/* Line 1455 of yacc.c  */
#line 15777 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2732:

/* Line 1455 of yacc.c  */
#line 15788 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2733:

/* Line 1455 of yacc.c  */
#line 15790 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2734:

/* Line 1455 of yacc.c  */
#line 15792 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2748:

/* Line 1455 of yacc.c  */
#line 15825 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
    break;

  case 2749:

/* Line 1455 of yacc.c  */
#line 15839 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            thd->lex->definer= (yyvsp[(3) - (3)].lex_user);
          }
    break;

  case 2750:

/* Line 1455 of yacc.c  */
#line 15852 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2751:

/* Line 1455 of yacc.c  */
#line 15854 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2752:

/* Line 1455 of yacc.c  */
#line 15856 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2753:

/* Line 1455 of yacc.c  */
#line 15861 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2754:

/* Line 1455 of yacc.c  */
#line 15866 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2755:

/* Line 1455 of yacc.c  */
#line 15868 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2756:

/* Line 1455 of yacc.c  */
#line 15870 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2757:

/* Line 1455 of yacc.c  */
#line 15875 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2758:

/* Line 1455 of yacc.c  */
#line 15877 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2759:

/* Line 1455 of yacc.c  */
#line 15879 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2760:

/* Line 1455 of yacc.c  */
#line 15884 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2762:

/* Line 1455 of yacc.c  */
#line 15900 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2764:

/* Line 1455 of yacc.c  */
#line 15906 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2765:

/* Line 1455 of yacc.c  */
#line 15911 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2766:

/* Line 1455 of yacc.c  */
#line 15918 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2767:

/* Line 1455 of yacc.c  */
#line 15927 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2770:

/* Line 1455 of yacc.c  */
#line 15948 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2771:

/* Line 1455 of yacc.c  */
#line 15950 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2772:

/* Line 1455 of yacc.c  */
#line 15952 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2773:

/* Line 1455 of yacc.c  */
#line 15954 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2774:

/* Line 1455 of yacc.c  */
#line 15971 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2775:

/* Line 1455 of yacc.c  */
#line 15977 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2776:

/* Line 1455 of yacc.c  */
#line 15982 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $15 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2777:

/* Line 1455 of yacc.c  */
#line 16011 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2778:

/* Line 1455 of yacc.c  */
#line 16045 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2779:

/* Line 1455 of yacc.c  */
#line 16062 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2780:

/* Line 1455 of yacc.c  */
#line 16084 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $5 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2781:

/* Line 1455 of yacc.c  */
#line 16115 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2782:

/* Line 1455 of yacc.c  */
#line 16119 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 2783:

/* Line 1455 of yacc.c  */
#line 16128 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(thd, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2784:

/* Line 1455 of yacc.c  */
#line 16151 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { /* $14 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2785:

/* Line 1455 of yacc.c  */
#line 16159 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2786:

/* Line 1455 of yacc.c  */
#line 16214 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(thd, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2787:

/* Line 1455 of yacc.c  */
#line 16238 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2788:

/* Line 1455 of yacc.c  */
#line 16247 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2789:

/* Line 1455 of yacc.c  */
#line 16254 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2790:

/* Line 1455 of yacc.c  */
#line 16261 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2791:

/* Line 1455 of yacc.c  */
#line 16275 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2792:

/* Line 1455 of yacc.c  */
#line 16279 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2793:

/* Line 1455 of yacc.c  */
#line 16283 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2794:

/* Line 1455 of yacc.c  */
#line 16287 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2795:

/* Line 1455 of yacc.c  */
#line 16291 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2796:

/* Line 1455 of yacc.c  */
#line 16295 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2797:

/* Line 1455 of yacc.c  */
#line 16302 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2798:

/* Line 1455 of yacc.c  */
#line 16309 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2799:

/* Line 1455 of yacc.c  */
#line 16316 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2800:

/* Line 1455 of yacc.c  */
#line 16325 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2801:

/* Line 1455 of yacc.c  */
#line 16326 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2802:

/* Line 1455 of yacc.c  */
#line 16330 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2803:

/* Line 1455 of yacc.c  */
#line 16331 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2804:

/* Line 1455 of yacc.c  */
#line 16332 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2805:

/* Line 1455 of yacc.c  */
#line 16336 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2806:

/* Line 1455 of yacc.c  */
#line 16337 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2807:

/* Line 1455 of yacc.c  */
#line 16342 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2808:

/* Line 1455 of yacc.c  */
#line 16344 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2810:

/* Line 1455 of yacc.c  */
#line 16349 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {}
    break;

  case 2811:

/* Line 1455 of yacc.c  */
#line 16350 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2812:

/* Line 1455 of yacc.c  */
#line 16355 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2813:

/* Line 1455 of yacc.c  */
#line 16362 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2814:

/* Line 1455 of yacc.c  */
#line 16372 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2815:

/* Line 1455 of yacc.c  */
#line 16378 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2816:

/* Line 1455 of yacc.c  */
#line 16389 "/home/buildbot/buildbot/build/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 44603 "/home/buildbot/buildbot/build/mkdist/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (thd, yymsg);
	  }
	else
	  {
	    yyerror (thd, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, thd);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, thd);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



